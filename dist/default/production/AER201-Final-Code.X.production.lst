

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 25 23:35:27 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.40
    55                           ; Generated 01/12/2016 GMT
    56                           ; 
    57                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4620 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     _ADCON1	set	4033
    89  0000                     _INTCONbits	set	4082
    90  0000                     _LATA	set	3977
    91  0000                     _LATAbits	set	3977
    92  0000                     _LATB	set	3978
    93  0000                     _LATC	set	3979
    94  0000                     _LATCbits	set	3979
    95  0000                     _LATD	set	3980
    96  0000                     _LATDbits	set	3980
    97  0000                     _LATE	set	3981
    98  0000                     _PORTB	set	3969
    99  0000                     _SSPADD	set	4040
   100  0000                     _SSPBUF	set	4041
   101  0000                     _SSPCON1	set	4038
   102  0000                     _SSPCON2	set	4037
   103  0000                     _SSPSTAT	set	4039
   104  0000                     _T0CONbits	set	4053
   105  0000                     _TRISA	set	3986
   106  0000                     _TRISB	set	3987
   107  0000                     _TRISC	set	3988
   108  0000                     _TRISD	set	3989
   109  0000                     _TRISE	set	3990
   110  0000                     _ACKDT	set	32301
   111  0000                     _ACKEN	set	32300
   112  0000                     _INT1IE	set	32643
   113  0000                     _INT1IF	set	32640
   114  0000                     _PEN	set	32298
   115  0000                     _RCEN	set	32299
   116  0000                     _RSEN	set	32297
   117  0000                     _SEN	set	32296
   118  0000                     _TRISC3	set	31907
   119  0000                     _TRISC4	set	31908
   120                           
   121                           	psect	smallconst
   122  001000                     __psmallconst:
   123                           	opt stack 0
   124  001000  00                 	db	0
   125  001001                     STR_1:
   126  001001  31                 	db	49	;'1'
   127  001002  3A                 	db	58	;':'
   128  001003  53                 	db	83	;'S'
   129  001004  54                 	db	84	;'T'
   130  001005  41                 	db	65	;'A'
   131  001006  52                 	db	82	;'R'
   132  001007  54                 	db	84	;'T'
   133  001008  20                 	db	32
   134  001009  31                 	db	49	;'1'
   135  00100A  31                 	db	49	;'1'
   136  00100B  3A                 	db	58	;':'
   137  00100C  33                 	db	51	;'3'
   138  00100D  31                 	db	49	;'1'
   139  00100E  3A                 	db	58	;':'
   140  00100F  34                 	db	52	;'4'
   141  001010  35                 	db	53	;'5'
   142  001011  00                 	db	0
   143  001012                     STR_2:
   144  001012  32                 	db	50	;'2'
   145  001013  3A                 	db	58	;':'
   146  001014  4C                 	db	76	;'L'
   147  001015  4F                 	db	79	;'O'
   148  001016  47                 	db	71	;'G'
   149  001017  53                 	db	83	;'S'
   150  001018  20                 	db	32
   151  001019  20                 	db	32
   152  00101A  32                 	db	50	;'2'
   153  00101B  32                 	db	50	;'2'
   154  00101C  2F                 	db	47
   155  00101D  30                 	db	48	;'0'
   156  00101E  32                 	db	50	;'2'
   157  00101F  2F                 	db	47
   158  001020  31                 	db	49	;'1'
   159  001021  37                 	db	55	;'7'
   160  001022  00                 	db	0
   161  001023                     STR_5:
   162  001023  31                 	db	49	;'1'
   163  001024  3A                 	db	58	;':'
   164  001025  44                 	db	68	;'D'
   165  001026  4F                 	db	79	;'O'
   166  001027  57                 	db	87	;'W'
   167  001028  4E                 	db	78	;'N'
   168  001029  4C                 	db	76	;'L'
   169  00102A  4F                 	db	79	;'O'
   170  00102B  41                 	db	65	;'A'
   171  00102C  44                 	db	68	;'D'
   172  00102D  20                 	db	32
   173  00102E  33                 	db	51	;'3'
   174  00102F  3A                 	db	58	;':'
   175  001030  45                 	db	69	;'E'
   176  001031  53                 	db	83	;'S'
   177  001032  43                 	db	67	;'C'
   178  001033  00                 	db	0
   179  001034                     STR_7:
   180  001034  31                 	db	49	;'1'
   181  001035  3A                 	db	58	;':'
   182  001036  53                 	db	83	;'S'
   183  001037  43                 	db	67	;'C'
   184  001038  52                 	db	82	;'R'
   185  001039  4F                 	db	79	;'O'
   186  00103A  4C                 	db	76	;'L'
   187  00103B  4C                 	db	76	;'L'
   188  00103C  44                 	db	68	;'D'
   189  00103D  4E                 	db	78	;'N'
   190  00103E  20                 	db	32
   191  00103F  33                 	db	51	;'3'
   192  001040  3A                 	db	58	;':'
   193  001041  45                 	db	69	;'E'
   194  001042  53                 	db	83	;'S'
   195  001043  43                 	db	67	;'C'
   196  001044  00                 	db	0
   197  001045                     STR_9:
   198  001045  54                 	db	84	;'T'
   199  001046  52                 	db	82	;'R'
   200  001047  41                 	db	65	;'A'
   201  001048  4E                 	db	78	;'N'
   202  001049  53                 	db	83	;'S'
   203  00104A  46                 	db	70	;'F'
   204  00104B  45                 	db	69	;'E'
   205  00104C  52                 	db	82	;'R'
   206  00104D  52                 	db	82	;'R'
   207  00104E  49                 	db	73	;'I'
   208  00104F  4E                 	db	78	;'N'
   209  001050  47                 	db	71	;'G'
   210  001051  2E                 	db	46
   211  001052  2E                 	db	46
   212  001053  2E                 	db	46
   213  001054  00                 	db	0
   214  001055                     STR_6:
   215  001055  32                 	db	50	;'2'
   216  001056  3A                 	db	58	;':'
   217  001057  44                 	db	68	;'D'
   218  001058  49                 	db	73	;'I'
   219  001059  53                 	db	83	;'S'
   220  00105A  50                 	db	80	;'P'
   221  00105B  20                 	db	32
   222  00105C  4C                 	db	76	;'L'
   223  00105D  4F                 	db	79	;'O'
   224  00105E  47                 	db	71	;'G'
   225  00105F  53                 	db	83	;'S'
   226  001060  00                 	db	0
   227  001061                     STR_3:
   228  001061  53                 	db	83	;'S'
   229  001062  4F                 	db	79	;'O'
   230  001063  52                 	db	82	;'R'
   231  001064  54                 	db	84	;'T'
   232  001065  49                 	db	73	;'I'
   233  001066  4E                 	db	78	;'N'
   234  001067  47                 	db	71	;'G'
   235  001068  2E                 	db	46
   236  001069  2E                 	db	46
   237  00106A  2E                 	db	46
   238  00106B  00                 	db	0
   239  00106C                     STR_8:
   240  00106C  32                 	db	50	;'2'
   241  00106D  3A                 	db	58	;':'
   242  00106E  53                 	db	83	;'S'
   243  00106F  43                 	db	67	;'C'
   244  001070  52                 	db	82	;'R'
   245  001071  4F                 	db	79	;'O'
   246  001072  4C                 	db	76	;'L'
   247  001073  4C                 	db	76	;'L'
   248  001074  55                 	db	85	;'U'
   249  001075  50                 	db	80	;'P'
   250  001076  00                 	db	0
   251  001077                     STR_4:
   252  001077  30                 	db	48	;'0'
   253  001078  3A                 	db	58	;':'
   254  001079  34                 	db	52	;'4'
   255  00107A  37                 	db	55	;'7'
   256  00107B  00                 	db	0
   257  0000                     
   258                           ; #config settings
   259  00107C  00                 	db	0	; dummy byte at the end
   260  0000                     
   261                           	psect	cinit
   262  001F98                     __pcinit:
   263                           	opt stack 0
   264  001F98                     start_initialization:
   265                           	opt stack 0
   266  001F98                     __initialization:
   267                           	opt stack 0
   268                           
   269                           ; Clear objects allocated to COMRAM (26 bytes)
   270  001F98  EE00  F045         	lfsr	0,__pbssCOMRAM
   271  001F9C  0E1A               	movlw	26
   272  001F9E                     clear_0:
   273  001F9E  6AEE               	clrf	postinc0,c
   274  001FA0  06E8               	decf	wreg,f,c
   275  001FA2  E1FD               	bnz	clear_0
   276  001FA4                     end_of_initialization:
   277                           	opt stack 0
   278  001FA4                     __end_of__initialization:
   279                           	opt stack 0
   280  001FA4  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   281  001FA6  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   282  001FA8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   283  001FAA  6EF8               	movwf	tblptru,c
   284  001FAC  0100               	movlb	0
   285  001FAE  EF79  F009         	goto	_main	;jump to C main() function
   286                           tblptru	equ	0xFF8
   287                           postinc0	equ	0xFEE
   288                           wreg	equ	0xFE8
   289                           
   290                           	psect	bssCOMRAM
   291  000045                     __pbssCOMRAM:
   292                           	opt stack 0
   293  000045                     _currentScreen:
   294                           	opt stack 0
   295  000045                     	ds	2
   296  000047                     _detectedBottle:
   297                           	opt stack 0
   298  000047                     	ds	2
   299  000049                     _eskaCapPos:
   300                           	opt stack 0
   301  000049                     	ds	2
   302  00004B                     _eskaNoCapPos:
   303                           	opt stack 0
   304  00004B                     	ds	2
   305  00004D                     _machineState:
   306                           	opt stack 0
   307  00004D                     	ds	2
   308  00004F                     _numBottles:
   309                           	opt stack 0
   310  00004F                     	ds	2
   311  000051                     _numEskaCap:
   312                           	opt stack 0
   313  000051                     	ds	2
   314  000053                     _numEskaNoCap:
   315                           	opt stack 0
   316  000053                     	ds	2
   317  000055                     _numSeconds:
   318                           	opt stack 0
   319  000055                     	ds	2
   320  000057                     _numYopCap:
   321                           	opt stack 0
   322  000057                     	ds	2
   323  000059                     _numYopNoCap:
   324                           	opt stack 0
   325  000059                     	ds	2
   326  00005B                     _yopCapPos:
   327                           	opt stack 0
   328  00005B                     	ds	2
   329  00005D                     _yopNoCapPos:
   330                           	opt stack 0
   331  00005D                     	ds	2
   332                           tblptru	equ	0xFF8
   333                           postinc0	equ	0xFEE
   334                           wreg	equ	0xFE8
   335                           
   336                           	psect	cstackBANK0
   337  000080                     __pcstackBANK0:
   338                           	opt stack 0
   339  000080                     ___ftmul@exp:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x0
   343  000080                     	ds	1
   344  000081                     ___ftmul@f3_as_product:
   345                           	opt stack 0
   346                           
   347                           ; 3 bytes @ 0x1
   348  000081                     	ds	3
   349  000084                     ___ftmul@cntr:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x4
   353  000084                     	ds	1
   354  000085                     ___ftmul@sign:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x5
   358  000085                     	ds	1
   359  000086                     ?___fttol:
   360                           	opt stack 0
   361  000086                     ___fttol@f1:
   362                           	opt stack 0
   363                           
   364                           ; 3 bytes @ 0x6
   365  000086                     	ds	4
   366  00008A                     ??___fttol:
   367                           
   368                           ; 1 bytes @ 0xA
   369  00008A                     	ds	5
   370  00008F                     ___fttol@sign1:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0xF
   374  00008F                     	ds	1
   375  000090                     ___fttol@lval:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x10
   379  000090                     	ds	4
   380  000094                     ___fttol@exp1:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x14
   384  000094                     	ds	1
   385  000095                     rotateStepperMotor@degrees:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x15
   389  000095                     	ds	2
   390  000097                     rotateStepperMotor@angularSpeed:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x17
   394  000097                     	ds	2
   395  000099                     rotateStepperMotor@direction:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x19
   399  000099                     	ds	2
   400  00009B                     ??_rotateStepperMotor:
   401                           
   402                           ; 1 bytes @ 0x1B
   403  00009B                     	ds	2
   404  00009D                     rotateStepperMotor@delay:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x1D
   408  00009D                     	ds	3
   409  0000A0                     rotateStepperMotor@numSteps:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x20
   413  0000A0                     	ds	2
   414  0000A2                     rotateStepperMotor@i:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x22
   418  0000A2                     	ds	2
   419  0000A4                     rotateContainers@containerPos:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x24
   423  0000A4                     	ds	2
   424  0000A6                     ??_main:
   425                           
   426                           ; 1 bytes @ 0x26
   427  0000A6                     	ds	2
   428                           tblptru	equ	0xFF8
   429                           postinc0	equ	0xFEE
   430                           wreg	equ	0xFE8
   431                           
   432                           	psect	cstackCOMRAM
   433  000001                     __pcstackCOMRAM:
   434                           	opt stack 0
   435  000001                     i2lcdNibble@temp:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x0
   439  000001                     	ds	1
   440  000002                     i2lcdNibble@data:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x1
   444  000002                     	ds	1
   445  000003                     i2lcdInst@data:
   446                           	opt stack 0
   447  000003                     i2putch@data:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x2
   451  000003                     	ds	1
   452  000004                     ?i2_printf:
   453                           	opt stack 0
   454  000004                     i2printf@f:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x3
   458  000004                     	ds	2
   459  000006                     i2printf@ap:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x5
   463  000006                     	ds	2
   464  000008                     i2printf@flag:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x7
   468  000008                     	ds	1
   469  000009                     i2printf@c:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x8
   473  000009                     	ds	1
   474  00000A                     i2lcdWrite@string1:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x9
   478  00000A                     	ds	2
   479  00000C                     i2lcdWrite@string2:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0xB
   483  00000C                     	ds	2
   484  00000E                     dispCorrectScreen@key:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0xD
   488  00000E                     	ds	2
   489  000010                     ??_keypressed:
   490                           
   491                           ; 1 bytes @ 0xF
   492  000010                     	ds	15
   493  00001F                     keypressed@keypress:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x1E
   497  00001F                     	ds	2
   498  000021                     ?_getDistance:
   499                           	opt stack 0
   500  000021                     ?_laserDetected:
   501                           	opt stack 0
   502  000021                     ?___awmod:
   503                           	opt stack 0
   504  000021                     ?___ftpack:
   505                           	opt stack 0
   506  000021                     lcdNibble@temp:
   507                           	opt stack 0
   508  000021                     setUpperDiscRotation@on:
   509                           	opt stack 0
   510  000021                     setFanRotation@direction:
   511                           	opt stack 0
   512  000021                     setChamberEntrance@open:
   513                           	opt stack 0
   514  000021                     setChamberExit@open:
   515                           	opt stack 0
   516  000021                     getDistance@ULTRASONIC_SENSOR:
   517                           	opt stack 0
   518  000021                     setLaserEmitter@emit:
   519                           	opt stack 0
   520  000021                     ___awmod@dividend:
   521                           	opt stack 0
   522  000021                     ___ftpack@arg:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0x20
   526  000021                     	ds	1
   527  000022                     lcdNibble@data:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x21
   531  000022                     	ds	1
   532  000023                     ??_setChamberEntrance:
   533  000023                     ??_setFanRotation:
   534  000023                     ??_laserDetected:
   535  000023                     ?_bottleComing:
   536                           	opt stack 0
   537  000023                     lcdInst@data:
   538                           	opt stack 0
   539  000023                     putch@data:
   540                           	opt stack 0
   541  000023                     ___awmod@divisor:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x22
   545  000023                     	ds	1
   546  000024                     ??_initLCD:
   547  000024                     ?_printf:
   548                           	opt stack 0
   549  000024                     ___ftpack@exp:
   550                           	opt stack 0
   551  000024                     setChamberEntrance@i:
   552                           	opt stack 0
   553  000024                     detectBottle@transparent:
   554                           	opt stack 0
   555  000024                     printf@f:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x23
   559  000024                     	ds	1
   560  000025                     ___awmod@counter:
   561                           	opt stack 0
   562  000025                     ___ftpack@sign:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x24
   566  000025                     	ds	1
   567  000026                     ??___ftpack:
   568  000026                     ___awmod@sign:
   569                           	opt stack 0
   570  000026                     setChamberEntrance@i_532:
   571                           	opt stack 0
   572  000026                     detectBottle@noCap:
   573                           	opt stack 0
   574  000026                     printf@ap:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x25
   578  000026                     	ds	2
   579  000028                     printf@flag:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x27
   583  000028                     	ds	1
   584  000029                     ?___awtoft:
   585                           	opt stack 0
   586  000029                     printf@c:
   587                           	opt stack 0
   588  000029                     ___awtoft@c:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x28
   592  000029                     	ds	1
   593  00002A                     lcdWrite@string1:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x29
   597  00002A                     	ds	2
   598  00002C                     ___awtoft@sign:
   599                           	opt stack 0
   600  00002C                     lcdWrite@string2:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x2B
   604  00002C                     	ds	1
   605  00002D                     ?___ftdiv:
   606                           	opt stack 0
   607  00002D                     ___ftdiv@f1:
   608                           	opt stack 0
   609                           
   610                           ; 3 bytes @ 0x2C
   611  00002D                     	ds	1
   612  00002E                     
   613                           ; 1 bytes @ 0x2D
   614  00002E                     	ds	2
   615  000030                     ___ftdiv@f2:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x2F
   619  000030                     	ds	3
   620  000033                     ??___ftdiv:
   621                           
   622                           ; 1 bytes @ 0x32
   623  000033                     	ds	3
   624  000036                     ___ftdiv@cntr:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x35
   628  000036                     	ds	1
   629  000037                     ___ftdiv@f3:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x36
   633  000037                     	ds	3
   634  00003A                     ___ftdiv@exp:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x39
   638  00003A                     	ds	1
   639  00003B                     ___ftdiv@sign:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x3A
   643  00003B                     	ds	1
   644  00003C                     ?___ftmul:
   645                           	opt stack 0
   646  00003C                     ___ftmul@f1:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x3B
   650  00003C                     	ds	3
   651  00003F                     ___ftmul@f2:
   652                           	opt stack 0
   653                           
   654                           ; 3 bytes @ 0x3E
   655  00003F                     	ds	3
   656  000042                     ??___ftmul:
   657                           
   658                           ; 1 bytes @ 0x41
   659  000042                     	ds	3
   660  000045                     tblptru	equ	0xFF8
   661                           postinc0	equ	0xFEE
   662                           wreg	equ	0xFE8
   663                           
   664                           ; 1 bytes @ 0x44
   665 ;;
   666 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   667 ;;
   668 ;; *************** function _main *****************
   669 ;; Defined at:
   670 ;;		line 45 in file "main.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;		None
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   686 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   688 ;;Total ram usage:        2 bytes
   689 ;; Hardware stack levels required when called:   12
   690 ;; This function calls:
   691 ;;		_bottleComing
   692 ;;		_detectBottle
   693 ;;		_dispMainMenu
   694 ;;		_initLCD
   695 ;;		_rotateContainers
   696 ;;		_setChamberEntrance
   697 ;;		_setChamberExit
   698 ;;		_setFanRotation
   699 ;;		_setLaserEmitter
   700 ;;		_setUpperDiscRotation
   701 ;; This function is called by:
   702 ;;		Startup code after reset
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           	psect	text0
   707  0012F2                     __ptext0:
   708                           	opt stack 0
   709  0012F2                     _main:
   710                           	opt stack 19
   711                           
   712                           ;main.c: 48: TRISA = 0x00;
   713                           
   714                           ;incstack = 0
   715  0012F2  0E00               	movlw	0
   716  0012F4  6E92               	movwf	3986,c	;volatile
   717                           
   718                           ;main.c: 49: TRISC = 0x00;
   719  0012F6  0E00               	movlw	0
   720  0012F8  6E94               	movwf	3988,c	;volatile
   721                           
   722                           ;main.c: 50: TRISD = 0x00;
   723  0012FA  0E00               	movlw	0
   724  0012FC  6E95               	movwf	3989,c	;volatile
   725                           
   726                           ;main.c: 51: TRISE = 0x00;
   727  0012FE  0E00               	movlw	0
   728  001300  6E96               	movwf	3990,c	;volatile
   729                           
   730                           ;main.c: 52: TRISB = 0xFF;
   731  001302  6893               	setf	3987,c	;volatile
   732                           
   733                           ;main.c: 54: LATA = 0x00;
   734  001304  0E00               	movlw	0
   735  001306  6E89               	movwf	3977,c	;volatile
   736                           
   737                           ;main.c: 55: LATB = 0x00;
   738  001308  0E00               	movlw	0
   739  00130A  6E8A               	movwf	3978,c	;volatile
   740                           
   741                           ;main.c: 56: LATC = 0x00;
   742  00130C  0E00               	movlw	0
   743  00130E  6E8B               	movwf	3979,c	;volatile
   744                           
   745                           ;main.c: 57: LATE = 0b111;
   746  001310  0E07               	movlw	7
   747  001312  6E8D               	movwf	3981,c	;volatile
   748                           
   749                           ;main.c: 59: ADCON1 = 0xFF;
   750  001314  68C1               	setf	4033,c	;volatile
   751                           
   752                           ;main.c: 61: initLCD();
   753  001316  EC3E  F00F         	call	_initLCD	;wreg free
   754                           
   755                           ;main.c: 63: INT1IE = 1;
   756  00131A  86F0               	bsf	intcon3,3,c	;volatile
   757                           
   758                           ;main.c: 64: (INTCONbits.GIE = 1);
   759  00131C  8EF2               	bsf	intcon,7,c	;volatile
   760                           
   761                           ;main.c: 67: currentScreen = 3;
   762  00131E  0E00               	movlw	0
   763  001320  6E46               	movwf	_currentScreen+1,c
   764  001322  0E03               	movlw	3
   765  001324  6E45               	movwf	_currentScreen,c
   766                           
   767                           ;main.c: 68: machineState = 1;
   768  001326  0E00               	movlw	0
   769  001328  6E4E               	movwf	_machineState+1,c
   770  00132A  0E01               	movlw	1
   771  00132C  6E4D               	movwf	_machineState,c
   772                           
   773                           ;main.c: 69: dispMainMenu();
   774  00132E  ECD9  F00F         	call	_dispMainMenu	;wreg free
   775                           
   776                           ;main.c: 72: numBottles = 0;
   777  001332  0E00               	movlw	0
   778  001334  6E50               	movwf	_numBottles+1,c
   779  001336  0E00               	movlw	0
   780  001338  6E4F               	movwf	_numBottles,c
   781                           
   782                           ;main.c: 73: numEskaNoCap = 0;
   783  00133A  0E00               	movlw	0
   784  00133C  6E54               	movwf	_numEskaNoCap+1,c
   785  00133E  0E00               	movlw	0
   786  001340  6E53               	movwf	_numEskaNoCap,c
   787                           
   788                           ;main.c: 74: numEskaCap = 0;
   789  001342  0E00               	movlw	0
   790  001344  6E52               	movwf	_numEskaCap+1,c
   791  001346  0E00               	movlw	0
   792  001348  6E51               	movwf	_numEskaCap,c
   793                           
   794                           ;main.c: 75: numYopNoCap = 0;
   795  00134A  0E00               	movlw	0
   796  00134C  6E5A               	movwf	_numYopNoCap+1,c
   797  00134E  0E00               	movlw	0
   798  001350  6E59               	movwf	_numYopNoCap,c
   799                           
   800                           ;main.c: 76: numYopCap = 0;
   801  001352  0E00               	movlw	0
   802  001354  6E58               	movwf	_numYopCap+1,c
   803  001356  0E00               	movlw	0
   804  001358  6E57               	movwf	_numYopCap,c
   805                           
   806                           ;main.c: 77: numSeconds = 0;
   807  00135A  0E00               	movlw	0
   808  00135C  6E56               	movwf	_numSeconds+1,c
   809  00135E  0E00               	movlw	0
   810  001360  6E55               	movwf	_numSeconds,c
   811                           
   812                           ;main.c: 80: eskaNoCapPos = 270;
   813  001362  0E01               	movlw	1
   814  001364  6E4C               	movwf	_eskaNoCapPos+1,c
   815  001366  0E0E               	movlw	14
   816  001368  6E4B               	movwf	_eskaNoCapPos,c
   817                           
   818                           ;main.c: 81: eskaCapPos = 0;
   819  00136A  0E00               	movlw	0
   820  00136C  6E4A               	movwf	_eskaCapPos+1,c
   821  00136E  0E00               	movlw	0
   822  001370  6E49               	movwf	_eskaCapPos,c
   823                           
   824                           ;main.c: 82: yopNoCapPos = 180;
   825  001372  0E00               	movlw	0
   826  001374  6E5E               	movwf	_yopNoCapPos+1,c
   827  001376  0EB4               	movlw	180
   828  001378  6E5D               	movwf	_yopNoCapPos,c
   829                           
   830                           ;main.c: 83: yopCapPos = 90;
   831  00137A  0E00               	movlw	0
   832  00137C  6E5C               	movwf	_yopCapPos+1,c
   833  00137E  0E5A               	movlw	90
   834  001380  6E5B               	movwf	_yopCapPos,c
   835                           
   836                           ;main.c: 87: setChamberEntrance(11);
   837  001382  0E00               	movlw	0
   838  001384  6E22               	movwf	setChamberEntrance@open+1,c
   839  001386  0E0B               	movlw	11
   840  001388  6E21               	movwf	setChamberEntrance@open,c
   841  00138A  ECA8  F00D         	call	_setChamberEntrance	;wreg free
   842                           
   843                           ;main.c: 88: setChamberExit(10);
   844  00138E  0E00               	movlw	0
   845  001390  6E22               	movwf	setChamberExit@open+1,c
   846  001392  0E0A               	movlw	10
   847  001394  6E21               	movwf	setChamberExit@open,c
   848  001396  EC5D  F010         	call	_setChamberExit	;wreg free
   849                           
   850                           ;main.c: 91: T0CONbits.T08BIT = 1;
   851  00139A  8CD5               	bsf	4053,6,c	;volatile
   852                           
   853                           ;main.c: 92: T0CONbits.T0CS = 0;
   854  00139C  9AD5               	bcf	4053,5,c	;volatile
   855                           
   856                           ;main.c: 93: T0CONbits.PSA = 0;
   857  00139E  96D5               	bcf	4053,3,c	;volatile
   858                           
   859                           ;main.c: 94: T0CONbits.T0PS2=1;
   860  0013A0  84D5               	bsf	4053,2,c	;volatile
   861                           
   862                           ;main.c: 95: T0CONbits.T0PS1=1;
   863  0013A2  82D5               	bsf	4053,1,c	;volatile
   864                           
   865                           ;main.c: 96: T0CONbits.T0PS0=1;
   866  0013A4  80D5               	bsf	4053,0,c	;volatile
   867                           
   868                           ;main.c: 97: T0CONbits.TMR0ON = 1;
   869  0013A6  8ED5               	bsf	4053,7,c	;volatile
   870  0013A8                     l2791:
   871                           
   872                           ;main.c: 100: LATCbits.LC0=1;
   873  0013A8  808B               	bsf	3979,0,c	;volatile
   874                           
   875                           ;main.c: 101: _delay((unsigned long)((1000)*(10000000/4000.0)));
   876  0013AA  0E0D               	movlw	13
   877  0013AC  0100               	movlb	0	; () banked
   878  0013AE  6FA7               	movwf	(??_main+1)& (0+255),b
   879  0013B0  0EAF               	movlw	175
   880  0013B2  0100               	movlb	0	; () banked
   881  0013B4  6FA6               	movwf	??_main& (0+255),b
   882  0013B6  0EB6               	movlw	182
   883  0013B8                     u2517:
   884  0013B8  2EE8               	decfsz	wreg,f,c
   885  0013BA  D7FE               	bra	u2517
   886  0013BC  2FA6               	decfsz	??_main& (0+255),f,b
   887  0013BE  D7FC               	bra	u2517
   888  0013C0  2FA7               	decfsz	(??_main+1)& (0+255),f,b
   889  0013C2  D7FA               	bra	u2517
   890  0013C4  F000               	nop	
   891                           
   892                           ;main.c: 102: LATCbits.LC0=0;
   893  0013C6  908B               	bcf	3979,0,c	;volatile
   894                           
   895                           ;main.c: 103: _delay((unsigned long)((1000)*(10000000/4000.0)));
   896  0013C8  0E0D               	movlw	13
   897  0013CA  0100               	movlb	0	; () banked
   898  0013CC  6FA7               	movwf	(??_main+1)& (0+255),b
   899  0013CE  0EAF               	movlw	175
   900  0013D0  0100               	movlb	0	; () banked
   901  0013D2  6FA6               	movwf	??_main& (0+255),b
   902  0013D4  0EB6               	movlw	182
   903  0013D6                     u2527:
   904  0013D6  2EE8               	decfsz	wreg,f,c
   905  0013D8  D7FE               	bra	u2527
   906  0013DA  2FA6               	decfsz	??_main& (0+255),f,b
   907  0013DC  D7FC               	bra	u2527
   908  0013DE  2FA7               	decfsz	(??_main+1)& (0+255),f,b
   909  0013E0  D7FA               	bra	u2527
   910  0013E2  F000               	nop	
   911  0013E4  D7E1               	goto	l2791
   912  0013E6                     l88:
   913                           
   914                           ;main.c: 109: (INTCONbits.GIE = 0);
   915  0013E6  9EF2               	bcf	intcon,7,c	;volatile
   916                           
   917                           ;main.c: 110: (INTCONbits.GIE = 1);
   918  0013E8  8EF2               	bsf	intcon,7,c	;volatile
   919                           
   920                           ;main.c: 111: if (machineState==2){
   921  0013EA  0E02               	movlw	2
   922  0013EC  184D               	xorwf	_machineState,w,c
   923  0013EE  104E               	iorwf	_machineState+1,w,c
   924  0013F0  A4D8               	btfss	status,2,c
   925  0013F2  D7F9               	goto	l88
   926                           
   927                           ;main.c: 112: setChamberEntrance(11);
   928  0013F4  0E00               	movlw	0
   929  0013F6  6E22               	movwf	setChamberEntrance@open+1,c
   930  0013F8  0E0B               	movlw	11
   931  0013FA  6E21               	movwf	setChamberEntrance@open,c
   932  0013FC  ECA8  F00D         	call	_setChamberEntrance	;wreg free
   933                           
   934                           ;main.c: 113: setLaserEmitter(12);
   935  001400  0E00               	movlw	0
   936  001402  6E22               	movwf	setLaserEmitter@emit+1,c
   937  001404  0E0C               	movlw	12
   938  001406  6E21               	movwf	setLaserEmitter@emit,c
   939  001408  ECBE  F00F         	call	_setLaserEmitter	;wreg free
   940                           
   941                           ;main.c: 114: setUpperDiscRotation(12);
   942  00140C  0E00               	movlw	0
   943  00140E  6E22               	movwf	setUpperDiscRotation@on+1,c
   944  001410  0E0C               	movlw	12
   945  001412  6E21               	movwf	setUpperDiscRotation@on,c
   946  001414  EC3F  F010         	call	_setUpperDiscRotation	;wreg free
   947                           
   948                           ;main.c: 115: if (bottleComing()){
   949  001418  EC7D  F00F         	call	_bottleComing	;wreg free
   950  00141C  5023               	movf	?_bottleComing,w,c
   951  00141E  1024               	iorwf	?_bottleComing+1,w,c
   952  001420  B4D8               	btfsc	status,2,c
   953  001422  D01F               	goto	l2825
   954                           
   955                           ;main.c: 116: setFanRotation(9);
   956  001424  0E00               	movlw	0
   957  001426  6E22               	movwf	setFanRotation@direction+1,c
   958  001428  0E09               	movlw	9
   959  00142A  6E21               	movwf	setFanRotation@direction,c
   960  00142C  EC58  F00E         	call	_setFanRotation	;wreg free
   961                           
   962                           ;main.c: 117: numBottles++;
   963  001430  4A4F               	infsnz	_numBottles,f,c
   964  001432  2A50               	incf	_numBottles+1,f,c
   965                           
   966                           ;main.c: 119: setChamberEntrance(10);
   967                           
   968                           ;main.c: 118: _delay((unsigned long)((0)*(10000000/4000.0)));
   969  001434  0E00               	movlw	0
   970  001436  6E22               	movwf	setChamberEntrance@open+1,c
   971  001438  0E0A               	movlw	10
   972  00143A  6E21               	movwf	setChamberEntrance@open,c
   973  00143C  ECA8  F00D         	call	_setChamberEntrance	;wreg free
   974                           
   975                           ;main.c: 120: detectBottle();
   976  001440  EC5C  F00C         	call	_detectBottle	;wreg free
   977                           
   978                           ;main.c: 121: rotateContainers();
   979  001444  EC3F  F008         	call	_rotateContainers	;wreg free
   980                           
   981                           ;main.c: 122: setChamberExit(11);
   982  001448  0E00               	movlw	0
   983  00144A  6E22               	movwf	setChamberExit@open+1,c
   984  00144C  0E0B               	movlw	11
   985  00144E  6E21               	movwf	setChamberExit@open,c
   986  001450  EC5D  F010         	call	_setChamberExit	;wreg free
   987                           
   988                           ;main.c: 124: setChamberExit(10);
   989                           
   990                           ;main.c: 123: _delay((unsigned long)((0)*(10000000/4000.0)));
   991  001454  0E00               	movlw	0
   992  001456  6E22               	movwf	setChamberExit@open+1,c
   993  001458  0E0A               	movlw	10
   994  00145A  6E21               	movwf	setChamberExit@open,c
   995  00145C  EC5D  F010         	call	_setChamberExit	;wreg free
   996                           
   997                           ;main.c: 125: }
   998  001460  D7C2               	goto	l88
   999  001462                     l2825:
  1000                           
  1001                           ;main.c: 126: else{
  1002                           ;main.c: 127: setFanRotation(8);
  1003  001462  0E00               	movlw	0
  1004  001464  6E22               	movwf	setFanRotation@direction+1,c
  1005  001466  0E08               	movlw	8
  1006  001468  6E21               	movwf	setFanRotation@direction,c
  1007  00146A  EC58  F00E         	call	_setFanRotation	;wreg free
  1008  00146E  D7BB               	goto	l88
  1009  001470                     __end_of_main:
  1010                           	opt stack 0
  1011                           tblptru	equ	0xFF8
  1012                           intcon	equ	0xFF2
  1013                           intcon3	equ	0xFF0
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           status	equ	0xFD8
  1017                           
  1018 ;; *************** function _setUpperDiscRotation *****************
  1019 ;; Defined at:
  1020 ;;		line 37 in file "controlMotors.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;  on              2   32[COMRAM] int 
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;		None
  1025 ;; Return value:  Size  Location     Type
  1026 ;;                  1    wreg      void 
  1027 ;; Registers used:
  1028 ;;		None
  1029 ;; Tracked objects:
  1030 ;;		On entry : 0/0
  1031 ;;		On exit  : 0/0
  1032 ;;		Unchanged: 0/0
  1033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1034 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1037 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1038 ;;Total ram usage:        2 bytes
  1039 ;; Hardware stack levels used:    1
  1040 ;; Hardware stack levels required when called:    7
  1041 ;; This function calls:
  1042 ;;		Nothing
  1043 ;; This function is called by:
  1044 ;;		_main
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           	psect	text1
  1049  00207E                     __ptext1:
  1050                           	opt stack 0
  1051  00207E                     _setUpperDiscRotation:
  1052                           	opt stack 23
  1053                           
  1054                           ;controlMotors.c: 38: LATDbits.LD0=on;
  1055                           
  1056                           ;incstack = 0
  1057  00207E  B021               	btfsc	setUpperDiscRotation@on,0,c
  1058  002080  D002               	bra	u1655
  1059  002082  908C               	bcf	3980,0,c	;volatile
  1060  002084  D001               	bra	u1656
  1061  002086                     u1655:
  1062  002086  808C               	bsf	3980,0,c	;volatile
  1063  002088                     u1656:
  1064  002088  0012               	return		;funcret
  1065  00208A                     __end_of_setUpperDiscRotation:
  1066                           	opt stack 0
  1067                           tblptru	equ	0xFF8
  1068                           intcon	equ	0xFF2
  1069                           intcon3	equ	0xFF0
  1070                           postinc0	equ	0xFEE
  1071                           wreg	equ	0xFE8
  1072                           status	equ	0xFD8
  1073                           
  1074 ;; *************** function _setLaserEmitter *****************
  1075 ;; Defined at:
  1076 ;;		line 56 in file "controlSensors.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;  emit            2   32[COMRAM] int 
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;		None
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  1    wreg      void 
  1083 ;; Registers used:
  1084 ;;		wreg, status,2, status,0
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;Total ram usage:        2 bytes
  1095 ;; Hardware stack levels used:    1
  1096 ;; Hardware stack levels required when called:    7
  1097 ;; This function calls:
  1098 ;;		Nothing
  1099 ;; This function is called by:
  1100 ;;		_main
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text2
  1105  001F7C                     __ptext2:
  1106                           	opt stack 0
  1107  001F7C                     _setLaserEmitter:
  1108                           	opt stack 23
  1109                           
  1110                           ;controlSensors.c: 57: if (emit == 12){
  1111                           
  1112                           ;incstack = 0
  1113  001F7C  0E0C               	movlw	12
  1114  001F7E  1821               	xorwf	setLaserEmitter@emit,w,c
  1115  001F80  1022               	iorwf	setLaserEmitter@emit+1,w,c
  1116  001F82  A4D8               	btfss	status,2,c
  1117  001F84  D002               	goto	l2209
  1118                           
  1119                           ;controlSensors.c: 58: LATCbits.LC0 = 1;
  1120  001F86  808B               	bsf	3979,0,c	;volatile
  1121                           
  1122                           ;controlSensors.c: 59: }
  1123  001F88  0012               	return	
  1124  001F8A                     l2209:
  1125                           
  1126                           ;controlSensors.c: 60: else if (emit == 13){
  1127  001F8A  0E0D               	movlw	13
  1128  001F8C  1821               	xorwf	setLaserEmitter@emit,w,c
  1129  001F8E  1022               	iorwf	setLaserEmitter@emit+1,w,c
  1130  001F90  A4D8               	btfss	status,2,c
  1131  001F92  0012               	return	
  1132                           
  1133                           ;controlSensors.c: 61: LATCbits.LC0 = 0;
  1134  001F94  908B               	bcf	3979,0,c	;volatile
  1135  001F96  0012               	return	
  1136  001F98                     __end_of_setLaserEmitter:
  1137                           	opt stack 0
  1138                           tblptru	equ	0xFF8
  1139                           intcon	equ	0xFF2
  1140                           intcon3	equ	0xFF0
  1141                           postinc0	equ	0xFEE
  1142                           wreg	equ	0xFE8
  1143                           status	equ	0xFD8
  1144                           
  1145 ;; *************** function _setFanRotation *****************
  1146 ;; Defined at:
  1147 ;;		line 41 in file "controlMotors.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;  direction       2   32[COMRAM] int 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, status,2, status,0
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1161 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1163 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1164 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1165 ;;Total ram usage:        3 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    7
  1168 ;; This function calls:
  1169 ;;		Nothing
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text3
  1176  001CB0                     __ptext3:
  1177                           	opt stack 0
  1178  001CB0                     _setFanRotation:
  1179                           	opt stack 23
  1180                           
  1181                           ;controlMotors.c: 42: if (direction==8){
  1182                           
  1183                           ;incstack = 0
  1184  001CB0  0E08               	movlw	8
  1185  001CB2  1821               	xorwf	setFanRotation@direction,w,c
  1186  001CB4  1022               	iorwf	setFanRotation@direction+1,w,c
  1187  001CB6  A4D8               	btfss	status,2,c
  1188  001CB8  D010               	goto	l2241
  1189                           
  1190                           ;controlMotors.c: 44: if(LATAbits.LA0==1 && LATAbits.LA1==0){
  1191  001CBA  B089               	btfsc	3977,0,c	;volatile
  1192  001CBC  B289               	btfsc	3977,1,c	;volatile
  1193  001CBE  D00A               	goto	l2237
  1194                           
  1195                           ;controlMotors.c: 45: LATAbits.LA0=0;
  1196  001CC0  9089               	bcf	3977,0,c	;volatile
  1197                           
  1198                           ;controlMotors.c: 46: LATAbits.LA1=0;
  1199  001CC2  9289               	bcf	3977,1,c	;volatile
  1200                           
  1201                           ;controlMotors.c: 47: _delay((unsigned long)((100*0.1)*(10000000/4000.0)));
  1202  001CC4  0E21               	movlw	33
  1203  001CC6  6E23               	movwf	??_setFanRotation& (0+255),c
  1204  001CC8  0E76               	movlw	118
  1205  001CCA                     u2537:
  1206  001CCA  2EE8               	decfsz	wreg,f,c
  1207  001CCC  D7FE               	bra	u2537
  1208  001CCE  2E23               	decfsz	??_setFanRotation& (0+255),f,c
  1209  001CD0  D7FC               	bra	u2537
  1210  001CD2  D000               	nop2	
  1211  001CD4                     l2237:
  1212                           
  1213                           ;controlMotors.c: 48: }
  1214                           ;controlMotors.c: 49: LATAbits.LA0=0;
  1215  001CD4  9089               	bcf	3977,0,c	;volatile
  1216                           
  1217                           ;controlMotors.c: 50: LATAbits.LA1=1;
  1218  001CD6  8289               	bsf	3977,1,c	;volatile
  1219                           
  1220                           ;controlMotors.c: 51: }
  1221  001CD8  0012               	return	
  1222  001CDA                     l2241:
  1223                           
  1224                           ;controlMotors.c: 52: else if (direction==9){
  1225  001CDA  0E09               	movlw	9
  1226  001CDC  1821               	xorwf	setFanRotation@direction,w,c
  1227  001CDE  1022               	iorwf	setFanRotation@direction+1,w,c
  1228  001CE0  A4D8               	btfss	status,2,c
  1229  001CE2  D010               	goto	l2255
  1230                           
  1231                           ;controlMotors.c: 54: if(LATAbits.LA0==0 && LATAbits.LA1==1){
  1232  001CE4  A089               	btfss	3977,0,c	;volatile
  1233  001CE6  A289               	btfss	3977,1,c	;volatile
  1234  001CE8  D00A               	goto	l2251
  1235                           
  1236                           ;controlMotors.c: 55: LATAbits.LA0=0;
  1237  001CEA  9089               	bcf	3977,0,c	;volatile
  1238                           
  1239                           ;controlMotors.c: 56: LATAbits.LA1=0;
  1240  001CEC  9289               	bcf	3977,1,c	;volatile
  1241                           
  1242                           ;controlMotors.c: 57: _delay((unsigned long)((100*0.1)*(10000000/4000.0)));
  1243  001CEE  0E21               	movlw	33
  1244  001CF0  6E23               	movwf	??_setFanRotation& (0+255),c
  1245  001CF2  0E76               	movlw	118
  1246  001CF4                     u2547:
  1247  001CF4  2EE8               	decfsz	wreg,f,c
  1248  001CF6  D7FE               	bra	u2547
  1249  001CF8  2E23               	decfsz	??_setFanRotation& (0+255),f,c
  1250  001CFA  D7FC               	bra	u2547
  1251  001CFC  D000               	nop2	
  1252  001CFE                     l2251:
  1253                           
  1254                           ;controlMotors.c: 58: }
  1255                           ;controlMotors.c: 59: LATAbits.LA0=1;
  1256  001CFE  8089               	bsf	3977,0,c	;volatile
  1257                           
  1258                           ;controlMotors.c: 60: LATAbits.LA1=0;
  1259  001D00  9289               	bcf	3977,1,c	;volatile
  1260                           
  1261                           ;controlMotors.c: 61: }
  1262  001D02  0012               	return	
  1263  001D04                     l2255:
  1264                           
  1265                           ;controlMotors.c: 62: else if (direction==13){
  1266  001D04  0E0D               	movlw	13
  1267  001D06  1821               	xorwf	setFanRotation@direction,w,c
  1268  001D08  1022               	iorwf	setFanRotation@direction+1,w,c
  1269  001D0A  A4D8               	btfss	status,2,c
  1270  001D0C  0012               	return	
  1271                           
  1272                           ;controlMotors.c: 63: LATAbits.LA0=0;
  1273  001D0E  9089               	bcf	3977,0,c	;volatile
  1274                           
  1275                           ;controlMotors.c: 64: LATAbits.LA1=0;
  1276  001D10  9289               	bcf	3977,1,c	;volatile
  1277  001D12  0012               	return	
  1278  001D14                     __end_of_setFanRotation:
  1279                           	opt stack 0
  1280                           tblptru	equ	0xFF8
  1281                           intcon	equ	0xFF2
  1282                           intcon3	equ	0xFF0
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           status	equ	0xFD8
  1286                           
  1287 ;; *************** function _setChamberExit *****************
  1288 ;; Defined at:
  1289 ;;		line 93 in file "controlMotors.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;  open            2   32[COMRAM] int 
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;		None
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2, status,0
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1306 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1307 ;;Total ram usage:        2 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; Hardware stack levels required when called:    7
  1310 ;; This function calls:
  1311 ;;		Nothing
  1312 ;; This function is called by:
  1313 ;;		_main
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           	psect	text4
  1318  0020BA                     __ptext4:
  1319                           	opt stack 0
  1320  0020BA                     _setChamberExit:
  1321                           	opt stack 23
  1322                           
  1323                           ;controlMotors.c: 97: }
  1324                           
  1325                           ;incstack = 0
  1326  0020BA  0012               	return	
  1327  0020BC                     __end_of_setChamberExit:
  1328                           	opt stack 0
  1329                           tblptru	equ	0xFF8
  1330                           intcon	equ	0xFF2
  1331                           intcon3	equ	0xFF0
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           status	equ	0xFD8
  1335                           
  1336 ;; *************** function _setChamberEntrance *****************
  1337 ;; Defined at:
  1338 ;;		line 69 in file "controlMotors.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  open            2   32[COMRAM] int 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  i               2   37[COMRAM] int 
  1343 ;;  i               2   35[COMRAM] int 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1353 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;Total ram usage:        7 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    7
  1360 ;; This function calls:
  1361 ;;		Nothing
  1362 ;; This function is called by:
  1363 ;;		_main
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text5
  1368  001B50                     __ptext5:
  1369                           	opt stack 0
  1370  001B50                     _setChamberEntrance:
  1371                           	opt stack 23
  1372                           
  1373                           ;controlMotors.c: 70: if (open==11){
  1374                           
  1375                           ;incstack = 0
  1376  001B50  0E0B               	movlw	11
  1377  001B52  1821               	xorwf	setChamberEntrance@open,w,c
  1378  001B54  1022               	iorwf	setChamberEntrance@open+1,w,c
  1379  001B56  A4D8               	btfss	status,2,c
  1380  001B58  D01B               	goto	l2185
  1381                           
  1382                           ;controlMotors.c: 72: int i;
  1383                           ;controlMotors.c: 73: for (i=0;i<500;i++){
  1384  001B5A  0E00               	movlw	0
  1385  001B5C  6E25               	movwf	setChamberEntrance@i+1,c
  1386  001B5E  0E00               	movlw	0
  1387  001B60  6E24               	movwf	setChamberEntrance@i,c
  1388  001B62                     l2175:
  1389  001B62  BE25               	btfsc	setChamberEntrance@i+1,7,c
  1390  001B64  D006               	goto	l309
  1391  001B66  0EF4               	movlw	244
  1392  001B68  5C24               	subwf	setChamberEntrance@i,w,c
  1393  001B6A  0E01               	movlw	1
  1394  001B6C  5825               	subwfb	setChamberEntrance@i+1,w,c
  1395  001B6E  B0D8               	btfsc	status,0,c
  1396  001B70  0012               	return	
  1397  001B72                     l309:
  1398                           
  1399                           ;controlMotors.c: 74: LATAbits.LA2=1;
  1400  001B72  8489               	bsf	3977,2,c	;volatile
  1401                           
  1402                           ;controlMotors.c: 75: _delay((unsigned long)((0.1*0.7)*(10000000/4000.0)));
  1403  001B74  0E3A               	movlw	58
  1404  001B76                     u2557:
  1405  001B76  2EE8               	decfsz	wreg,f,c
  1406  001B78  D7FE               	bra	u2557
  1407                           
  1408                           ;controlMotors.c: 76: LATAbits.LA2=0;
  1409  001B7A  9489               	bcf	3977,2,c	;volatile
  1410                           
  1411                           ;controlMotors.c: 77: _delay((unsigned long)((0.1*(20-0.7))*(10000000/4000.0)));
  1412  001B7C  0E07               	movlw	7
  1413  001B7E  6E23               	movwf	??_setChamberEntrance& (0+255),c
  1414  001B80  0E43               	movlw	67
  1415  001B82                     u2567:
  1416  001B82  2EE8               	decfsz	wreg,f,c
  1417  001B84  D7FE               	bra	u2567
  1418  001B86  2E23               	decfsz	??_setChamberEntrance& (0+255),f,c
  1419  001B88  D7FC               	bra	u2567
  1420  001B8A  4A24               	infsnz	setChamberEntrance@i,f,c
  1421  001B8C  2A25               	incf	setChamberEntrance@i+1,f,c
  1422  001B8E  D7E9               	goto	l2175
  1423  001B90                     l2185:
  1424                           
  1425                           ;controlMotors.c: 80: else if (open==10){
  1426  001B90  0E0A               	movlw	10
  1427  001B92  1821               	xorwf	setChamberEntrance@open,w,c
  1428  001B94  1022               	iorwf	setChamberEntrance@open+1,w,c
  1429  001B96  A4D8               	btfss	status,2,c
  1430  001B98  0012               	return	
  1431                           
  1432                           ;controlMotors.c: 82: int i;
  1433                           ;controlMotors.c: 83: for (i=0;i<500;i++){
  1434  001B9A  0E00               	movlw	0
  1435  001B9C  6E27               	movwf	setChamberEntrance@i_532+1,c
  1436  001B9E  0E00               	movlw	0
  1437  001BA0  6E26               	movwf	setChamberEntrance@i_532,c
  1438  001BA2                     l2189:
  1439  001BA2  BE27               	btfsc	setChamberEntrance@i_532+1,7,c
  1440  001BA4  D006               	goto	l313
  1441  001BA6  0EF4               	movlw	244
  1442  001BA8  5C26               	subwf	setChamberEntrance@i_532,w,c
  1443  001BAA  0E01               	movlw	1
  1444  001BAC  5827               	subwfb	setChamberEntrance@i_532+1,w,c
  1445  001BAE  B0D8               	btfsc	status,0,c
  1446  001BB0  0012               	return	
  1447  001BB2                     l313:
  1448                           
  1449                           ;controlMotors.c: 84: LATAbits.LA2=1;
  1450  001BB2  8489               	bsf	3977,2,c	;volatile
  1451                           
  1452                           ;controlMotors.c: 85: _delay((unsigned long)((0.1*1.7)*(10000000/4000.0)));
  1453  001BB4  0E8D               	movlw	141
  1454  001BB6                     u2577:
  1455  001BB6  2EE8               	decfsz	wreg,f,c
  1456  001BB8  D7FE               	bra	u2577
  1457  001BBA  D000               	nop2	
  1458                           
  1459                           ;controlMotors.c: 86: LATAbits.LA2=0;
  1460  001BBC  9489               	bcf	3977,2,c	;volatile
  1461                           
  1462                           ;controlMotors.c: 87: _delay((unsigned long)((0.1*(20-1.7))*(10000000/4000.0)));
  1463  001BBE  0E06               	movlw	6
  1464  001BC0  6E23               	movwf	??_setChamberEntrance& (0+255),c
  1465  001BC2  0EF0               	movlw	240
  1466  001BC4                     u2587:
  1467  001BC4  2EE8               	decfsz	wreg,f,c
  1468  001BC6  D7FE               	bra	u2587
  1469  001BC8  2E23               	decfsz	??_setChamberEntrance& (0+255),f,c
  1470  001BCA  D7FC               	bra	u2587
  1471  001BCC  F000               	nop	
  1472  001BCE  4A26               	infsnz	setChamberEntrance@i_532,f,c
  1473  001BD0  2A27               	incf	setChamberEntrance@i_532+1,f,c
  1474  001BD2  D7E7               	goto	l2189
  1475  001BD4                     __end_of_setChamberEntrance:
  1476                           	opt stack 0
  1477                           tblptru	equ	0xFF8
  1478                           intcon	equ	0xFF2
  1479                           intcon3	equ	0xFF0
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _rotateContainers *****************
  1485 ;; Defined at:
  1486 ;;		line 105 in file "controlMotors.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;		None
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  containerPos    2   36[BANK0 ] int 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  2   50[None  ] int 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1501 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;Total ram usage:        2 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:   10
  1507 ;; This function calls:
  1508 ;;		___awmod
  1509 ;;		_rotateStepperMotor
  1510 ;; This function is called by:
  1511 ;;		_main
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           	psect	text6
  1516  00107E                     __ptext6:
  1517                           	opt stack 0
  1518  00107E                     _rotateContainers:
  1519                           	opt stack 20
  1520                           
  1521                           ;controlMotors.c: 106: int containerPos;
  1522                           ;controlMotors.c: 107: if (detectedBottle == 14){
  1523                           
  1524                           ;incstack = 0
  1525  00107E  0E0E               	movlw	14
  1526  001080  1847               	xorwf	_detectedBottle,w,c
  1527  001082  1048               	iorwf	_detectedBottle+1,w,c
  1528  001084  A4D8               	btfss	status,2,c
  1529  001086  D005               	goto	l2707
  1530                           
  1531                           ;controlMotors.c: 108: containerPos = eskaCapPos;
  1532  001088  C049  F0A4         	movff	_eskaCapPos,rotateContainers@containerPos
  1533  00108C  C04A  F0A5         	movff	_eskaCapPos+1,rotateContainers@containerPos+1
  1534                           
  1535                           ;controlMotors.c: 109: }
  1536  001090  D01D               	goto	l2719
  1537  001092                     l2707:
  1538                           
  1539                           ;controlMotors.c: 110: else if (detectedBottle == 15){
  1540  001092  0E0F               	movlw	15
  1541  001094  1847               	xorwf	_detectedBottle,w,c
  1542  001096  1048               	iorwf	_detectedBottle+1,w,c
  1543  001098  A4D8               	btfss	status,2,c
  1544  00109A  D005               	goto	l2711
  1545                           
  1546                           ;controlMotors.c: 111: containerPos = eskaNoCapPos;
  1547  00109C  C04B  F0A4         	movff	_eskaNoCapPos,rotateContainers@containerPos
  1548  0010A0  C04C  F0A5         	movff	_eskaNoCapPos+1,rotateContainers@containerPos+1
  1549                           
  1550                           ;controlMotors.c: 112: }
  1551  0010A4  D013               	goto	l2719
  1552  0010A6                     l2711:
  1553                           
  1554                           ;controlMotors.c: 113: else if (detectedBottle == 16){
  1555  0010A6  0E10               	movlw	16
  1556  0010A8  1847               	xorwf	_detectedBottle,w,c
  1557  0010AA  1048               	iorwf	_detectedBottle+1,w,c
  1558  0010AC  A4D8               	btfss	status,2,c
  1559  0010AE  D005               	goto	l2715
  1560                           
  1561                           ;controlMotors.c: 114: containerPos = yopCapPos;
  1562  0010B0  C05B  F0A4         	movff	_yopCapPos,rotateContainers@containerPos
  1563  0010B4  C05C  F0A5         	movff	_yopCapPos+1,rotateContainers@containerPos+1
  1564                           
  1565                           ;controlMotors.c: 115: }
  1566  0010B8  D009               	goto	l2719
  1567  0010BA                     l2715:
  1568                           
  1569                           ;controlMotors.c: 116: else if (detectedBottle == 17){
  1570  0010BA  0E11               	movlw	17
  1571  0010BC  1847               	xorwf	_detectedBottle,w,c
  1572  0010BE  1048               	iorwf	_detectedBottle+1,w,c
  1573  0010C0  A4D8               	btfss	status,2,c
  1574  0010C2  D004               	goto	l2719
  1575                           
  1576                           ;controlMotors.c: 117: containerPos = yopNoCapPos;
  1577  0010C4  C05D  F0A4         	movff	_yopNoCapPos,rotateContainers@containerPos
  1578  0010C8  C05E  F0A5         	movff	_yopNoCapPos+1,rotateContainers@containerPos+1
  1579  0010CC                     l2719:
  1580                           
  1581                           ;controlMotors.c: 118: }
  1582                           ;controlMotors.c: 120: if (containerPos==0){
  1583  0010CC  0100               	movlb	0	; () banked
  1584  0010CE  51A4               	movf	rotateContainers@containerPos& (0+255),w,b
  1585  0010D0  0100               	movlb	0	; () banked
  1586  0010D2  11A5               	iorwf	(rotateContainers@containerPos+1)& (0+255),w,b
  1587  0010D4  B4D8               	btfsc	status,2,c
  1588  0010D6  0012               	return	
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;controlMotors.c: 123: else if (containerPos == 90){
  1592                           
  1593                           ; BSR set to: 0
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;controlMotors.c: 122: }
  1597  0010D8  0E5A               	movlw	90
  1598  0010DA  0100               	movlb	0	; () banked
  1599  0010DC  19A4               	xorwf	rotateContainers@containerPos& (0+255),w,b
  1600  0010DE  0100               	movlb	0	; () banked
  1601  0010E0  11A5               	iorwf	(rotateContainers@containerPos+1)& (0+255),w,b
  1602  0010E2  A4D8               	btfss	status,2,c
  1603  0010E4  D052               	goto	l2727
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;controlMotors.c: 124: rotateStepperMotor(90, 360, 9);
  1607  0010E6  0E00               	movlw	0
  1608  0010E8  0100               	movlb	0	; () banked
  1609  0010EA  6F96               	movwf	(rotateStepperMotor@degrees+1)& (0+255),b
  1610  0010EC  0E5A               	movlw	90
  1611  0010EE  6F95               	movwf	rotateStepperMotor@degrees& (0+255),b
  1612  0010F0  0E01               	movlw	1
  1613  0010F2  0100               	movlb	0	; () banked
  1614  0010F4  6F98               	movwf	(rotateStepperMotor@angularSpeed+1)& (0+255),b
  1615  0010F6  0E68               	movlw	104
  1616  0010F8  6F97               	movwf	rotateStepperMotor@angularSpeed& (0+255),b
  1617  0010FA  0E00               	movlw	0
  1618  0010FC  0100               	movlb	0	; () banked
  1619  0010FE  6F9A               	movwf	(rotateStepperMotor@direction+1)& (0+255),b
  1620  001100  0E09               	movlw	9
  1621  001102  6F99               	movwf	rotateStepperMotor@direction& (0+255),b
  1622  001104  EC6A  F00B         	call	_rotateStepperMotor	;wreg free
  1623                           
  1624                           ;controlMotors.c: 125: eskaCapPos=(eskaCapPos+270)%360;
  1625  001108  0E0E               	movlw	14
  1626  00110A  2449               	addwf	_eskaCapPos,w,c
  1627  00110C  6E21               	movwf	___awmod@dividend,c
  1628  00110E  0E01               	movlw	1
  1629  001110  204A               	addwfc	_eskaCapPos+1,w,c
  1630  001112  6E22               	movwf	___awmod@dividend+1,c
  1631  001114  0E01               	movlw	1
  1632  001116  6E24               	movwf	___awmod@divisor+1,c
  1633  001118  0E68               	movlw	104
  1634  00111A  6E23               	movwf	___awmod@divisor,c
  1635  00111C  ECEA  F00D         	call	___awmod	;wreg free
  1636  001120  C021  F049         	movff	?___awmod,_eskaCapPos
  1637  001124  C022  F04A         	movff	?___awmod+1,_eskaCapPos+1
  1638                           
  1639                           ;controlMotors.c: 126: eskaNoCapPos=(eskaNoCapPos+270)%360;
  1640  001128  0E0E               	movlw	14
  1641  00112A  244B               	addwf	_eskaNoCapPos,w,c
  1642  00112C  6E21               	movwf	___awmod@dividend,c
  1643  00112E  0E01               	movlw	1
  1644  001130  204C               	addwfc	_eskaNoCapPos+1,w,c
  1645  001132  6E22               	movwf	___awmod@dividend+1,c
  1646  001134  0E01               	movlw	1
  1647  001136  6E24               	movwf	___awmod@divisor+1,c
  1648  001138  0E68               	movlw	104
  1649  00113A  6E23               	movwf	___awmod@divisor,c
  1650  00113C  ECEA  F00D         	call	___awmod	;wreg free
  1651  001140  C021  F04B         	movff	?___awmod,_eskaNoCapPos
  1652  001144  C022  F04C         	movff	?___awmod+1,_eskaNoCapPos+1
  1653                           
  1654                           ;controlMotors.c: 127: yopCapPos=(yopCapPos+270)%360;
  1655  001148  0E0E               	movlw	14
  1656  00114A  245B               	addwf	_yopCapPos,w,c
  1657  00114C  6E21               	movwf	___awmod@dividend,c
  1658  00114E  0E01               	movlw	1
  1659  001150  205C               	addwfc	_yopCapPos+1,w,c
  1660  001152  6E22               	movwf	___awmod@dividend+1,c
  1661  001154  0E01               	movlw	1
  1662  001156  6E24               	movwf	___awmod@divisor+1,c
  1663  001158  0E68               	movlw	104
  1664  00115A  6E23               	movwf	___awmod@divisor,c
  1665  00115C  ECEA  F00D         	call	___awmod	;wreg free
  1666  001160  C021  F05B         	movff	?___awmod,_yopCapPos
  1667  001164  C022  F05C         	movff	?___awmod+1,_yopCapPos+1
  1668                           
  1669                           ;controlMotors.c: 128: yopNoCapPos=(yopNoCapPos+270)%360;
  1670  001168  0E0E               	movlw	14
  1671  00116A  245D               	addwf	_yopNoCapPos,w,c
  1672  00116C  6E21               	movwf	___awmod@dividend,c
  1673  00116E  0E01               	movlw	1
  1674  001170  205E               	addwfc	_yopNoCapPos+1,w,c
  1675  001172  6E22               	movwf	___awmod@dividend+1,c
  1676  001174  0E01               	movlw	1
  1677  001176  6E24               	movwf	___awmod@divisor+1,c
  1678  001178  0E68               	movlw	104
  1679  00117A  6E23               	movwf	___awmod@divisor,c
  1680  00117C  ECEA  F00D         	call	___awmod	;wreg free
  1681  001180  C021  F05D         	movff	?___awmod,_yopNoCapPos
  1682  001184  C022  F05E         	movff	?___awmod+1,_yopNoCapPos+1
  1683                           
  1684                           ;controlMotors.c: 129: }
  1685  001188  0012               	return	
  1686  00118A                     l2727:
  1687                           
  1688                           ;controlMotors.c: 130: else if (containerPos == 180){
  1689  00118A  0EB4               	movlw	180
  1690  00118C  0100               	movlb	0	; () banked
  1691  00118E  19A4               	xorwf	rotateContainers@containerPos& (0+255),w,b
  1692  001190  0100               	movlb	0	; () banked
  1693  001192  11A5               	iorwf	(rotateContainers@containerPos+1)& (0+255),w,b
  1694  001194  A4D8               	btfss	status,2,c
  1695  001196  D052               	goto	l2731
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;controlMotors.c: 131: rotateStepperMotor(180, 360, 9);
  1699  001198  0E00               	movlw	0
  1700  00119A  0100               	movlb	0	; () banked
  1701  00119C  6F96               	movwf	(rotateStepperMotor@degrees+1)& (0+255),b
  1702  00119E  0EB4               	movlw	180
  1703  0011A0  6F95               	movwf	rotateStepperMotor@degrees& (0+255),b
  1704  0011A2  0E01               	movlw	1
  1705  0011A4  0100               	movlb	0	; () banked
  1706  0011A6  6F98               	movwf	(rotateStepperMotor@angularSpeed+1)& (0+255),b
  1707  0011A8  0E68               	movlw	104
  1708  0011AA  6F97               	movwf	rotateStepperMotor@angularSpeed& (0+255),b
  1709  0011AC  0E00               	movlw	0
  1710  0011AE  0100               	movlb	0	; () banked
  1711  0011B0  6F9A               	movwf	(rotateStepperMotor@direction+1)& (0+255),b
  1712  0011B2  0E09               	movlw	9
  1713  0011B4  6F99               	movwf	rotateStepperMotor@direction& (0+255),b
  1714  0011B6  EC6A  F00B         	call	_rotateStepperMotor	;wreg free
  1715                           
  1716                           ;controlMotors.c: 132: eskaCapPos=(eskaCapPos+180)%360;
  1717  0011BA  0EB4               	movlw	180
  1718  0011BC  2449               	addwf	_eskaCapPos,w,c
  1719  0011BE  6E21               	movwf	___awmod@dividend,c
  1720  0011C0  0E00               	movlw	0
  1721  0011C2  204A               	addwfc	_eskaCapPos+1,w,c
  1722  0011C4  6E22               	movwf	___awmod@dividend+1,c
  1723  0011C6  0E01               	movlw	1
  1724  0011C8  6E24               	movwf	___awmod@divisor+1,c
  1725  0011CA  0E68               	movlw	104
  1726  0011CC  6E23               	movwf	___awmod@divisor,c
  1727  0011CE  ECEA  F00D         	call	___awmod	;wreg free
  1728  0011D2  C021  F049         	movff	?___awmod,_eskaCapPos
  1729  0011D6  C022  F04A         	movff	?___awmod+1,_eskaCapPos+1
  1730                           
  1731                           ;controlMotors.c: 133: eskaNoCapPos=(eskaNoCapPos+180)%360;
  1732  0011DA  0EB4               	movlw	180
  1733  0011DC  244B               	addwf	_eskaNoCapPos,w,c
  1734  0011DE  6E21               	movwf	___awmod@dividend,c
  1735  0011E0  0E00               	movlw	0
  1736  0011E2  204C               	addwfc	_eskaNoCapPos+1,w,c
  1737  0011E4  6E22               	movwf	___awmod@dividend+1,c
  1738  0011E6  0E01               	movlw	1
  1739  0011E8  6E24               	movwf	___awmod@divisor+1,c
  1740  0011EA  0E68               	movlw	104
  1741  0011EC  6E23               	movwf	___awmod@divisor,c
  1742  0011EE  ECEA  F00D         	call	___awmod	;wreg free
  1743  0011F2  C021  F04B         	movff	?___awmod,_eskaNoCapPos
  1744  0011F6  C022  F04C         	movff	?___awmod+1,_eskaNoCapPos+1
  1745                           
  1746                           ;controlMotors.c: 134: yopCapPos=(yopCapPos+180)%360;
  1747  0011FA  0EB4               	movlw	180
  1748  0011FC  245B               	addwf	_yopCapPos,w,c
  1749  0011FE  6E21               	movwf	___awmod@dividend,c
  1750  001200  0E00               	movlw	0
  1751  001202  205C               	addwfc	_yopCapPos+1,w,c
  1752  001204  6E22               	movwf	___awmod@dividend+1,c
  1753  001206  0E01               	movlw	1
  1754  001208  6E24               	movwf	___awmod@divisor+1,c
  1755  00120A  0E68               	movlw	104
  1756  00120C  6E23               	movwf	___awmod@divisor,c
  1757  00120E  ECEA  F00D         	call	___awmod	;wreg free
  1758  001212  C021  F05B         	movff	?___awmod,_yopCapPos
  1759  001216  C022  F05C         	movff	?___awmod+1,_yopCapPos+1
  1760                           
  1761                           ;controlMotors.c: 135: yopNoCapPos=(yopNoCapPos+180)%360;
  1762  00121A  0EB4               	movlw	180
  1763  00121C  245D               	addwf	_yopNoCapPos,w,c
  1764  00121E  6E21               	movwf	___awmod@dividend,c
  1765  001220  0E00               	movlw	0
  1766  001222  205E               	addwfc	_yopNoCapPos+1,w,c
  1767  001224  6E22               	movwf	___awmod@dividend+1,c
  1768  001226  0E01               	movlw	1
  1769  001228  6E24               	movwf	___awmod@divisor+1,c
  1770  00122A  0E68               	movlw	104
  1771  00122C  6E23               	movwf	___awmod@divisor,c
  1772  00122E  ECEA  F00D         	call	___awmod	;wreg free
  1773  001232  C021  F05D         	movff	?___awmod,_yopNoCapPos
  1774  001236  C022  F05E         	movff	?___awmod+1,_yopNoCapPos+1
  1775                           
  1776                           ;controlMotors.c: 136: }
  1777  00123A  0012               	return	
  1778  00123C                     l2731:
  1779                           
  1780                           ;controlMotors.c: 137: else if (containerPos == 270){
  1781  00123C  0E0E               	movlw	14
  1782  00123E  0100               	movlb	0	; () banked
  1783  001240  19A4               	xorwf	rotateContainers@containerPos& (0+255),w,b
  1784  001242  E156               	bnz	l338
  1785  001244  0100               	movlb	0	; () banked
  1786  001246  05A5               	decf	(rotateContainers@containerPos+1)& (0+255),w,b
  1787  001248  A4D8               	btfss	status,2,c
  1788  00124A  0012               	return	
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;controlMotors.c: 138: rotateStepperMotor(90, 360, 8);
  1792  00124C  0E00               	movlw	0
  1793  00124E  0100               	movlb	0	; () banked
  1794  001250  6F96               	movwf	(rotateStepperMotor@degrees+1)& (0+255),b
  1795  001252  0E5A               	movlw	90
  1796  001254  6F95               	movwf	rotateStepperMotor@degrees& (0+255),b
  1797  001256  0E01               	movlw	1
  1798  001258  0100               	movlb	0	; () banked
  1799  00125A  6F98               	movwf	(rotateStepperMotor@angularSpeed+1)& (0+255),b
  1800  00125C  0E68               	movlw	104
  1801  00125E  6F97               	movwf	rotateStepperMotor@angularSpeed& (0+255),b
  1802  001260  0E00               	movlw	0
  1803  001262  0100               	movlb	0	; () banked
  1804  001264  6F9A               	movwf	(rotateStepperMotor@direction+1)& (0+255),b
  1805  001266  0E08               	movlw	8
  1806  001268  6F99               	movwf	rotateStepperMotor@direction& (0+255),b
  1807  00126A  EC6A  F00B         	call	_rotateStepperMotor	;wreg free
  1808                           
  1809                           ;controlMotors.c: 139: eskaCapPos=(eskaCapPos+90)%360;
  1810  00126E  0E5A               	movlw	90
  1811  001270  2449               	addwf	_eskaCapPos,w,c
  1812  001272  6E21               	movwf	___awmod@dividend,c
  1813  001274  0E00               	movlw	0
  1814  001276  204A               	addwfc	_eskaCapPos+1,w,c
  1815  001278  6E22               	movwf	___awmod@dividend+1,c
  1816  00127A  0E01               	movlw	1
  1817  00127C  6E24               	movwf	___awmod@divisor+1,c
  1818  00127E  0E68               	movlw	104
  1819  001280  6E23               	movwf	___awmod@divisor,c
  1820  001282  ECEA  F00D         	call	___awmod	;wreg free
  1821  001286  C021  F049         	movff	?___awmod,_eskaCapPos
  1822  00128A  C022  F04A         	movff	?___awmod+1,_eskaCapPos+1
  1823                           
  1824                           ;controlMotors.c: 140: eskaNoCapPos=(eskaNoCapPos+90)%360;
  1825  00128E  0E5A               	movlw	90
  1826  001290  244B               	addwf	_eskaNoCapPos,w,c
  1827  001292  6E21               	movwf	___awmod@dividend,c
  1828  001294  0E00               	movlw	0
  1829  001296  204C               	addwfc	_eskaNoCapPos+1,w,c
  1830  001298  6E22               	movwf	___awmod@dividend+1,c
  1831  00129A  0E01               	movlw	1
  1832  00129C  6E24               	movwf	___awmod@divisor+1,c
  1833  00129E  0E68               	movlw	104
  1834  0012A0  6E23               	movwf	___awmod@divisor,c
  1835  0012A2  ECEA  F00D         	call	___awmod	;wreg free
  1836  0012A6  C021  F04B         	movff	?___awmod,_eskaNoCapPos
  1837  0012AA  C022  F04C         	movff	?___awmod+1,_eskaNoCapPos+1
  1838                           
  1839                           ;controlMotors.c: 141: yopCapPos=(yopCapPos+90)%360;
  1840  0012AE  0E5A               	movlw	90
  1841  0012B0  245B               	addwf	_yopCapPos,w,c
  1842  0012B2  6E21               	movwf	___awmod@dividend,c
  1843  0012B4  0E00               	movlw	0
  1844  0012B6  205C               	addwfc	_yopCapPos+1,w,c
  1845  0012B8  6E22               	movwf	___awmod@dividend+1,c
  1846  0012BA  0E01               	movlw	1
  1847  0012BC  6E24               	movwf	___awmod@divisor+1,c
  1848  0012BE  0E68               	movlw	104
  1849  0012C0  6E23               	movwf	___awmod@divisor,c
  1850  0012C2  ECEA  F00D         	call	___awmod	;wreg free
  1851  0012C6  C021  F05B         	movff	?___awmod,_yopCapPos
  1852  0012CA  C022  F05C         	movff	?___awmod+1,_yopCapPos+1
  1853                           
  1854                           ;controlMotors.c: 142: yopNoCapPos=(yopNoCapPos+90)%360;
  1855  0012CE  0E5A               	movlw	90
  1856  0012D0  245D               	addwf	_yopNoCapPos,w,c
  1857  0012D2  6E21               	movwf	___awmod@dividend,c
  1858  0012D4  0E00               	movlw	0
  1859  0012D6  205E               	addwfc	_yopNoCapPos+1,w,c
  1860  0012D8  6E22               	movwf	___awmod@dividend+1,c
  1861  0012DA  0E01               	movlw	1
  1862  0012DC  6E24               	movwf	___awmod@divisor+1,c
  1863  0012DE  0E68               	movlw	104
  1864  0012E0  6E23               	movwf	___awmod@divisor,c
  1865  0012E2  ECEA  F00D         	call	___awmod	;wreg free
  1866  0012E6  C021  F05D         	movff	?___awmod,_yopNoCapPos
  1867  0012EA  C022  F05E         	movff	?___awmod+1,_yopNoCapPos+1
  1868  0012EE  0012               	return	
  1869  0012F0                     l338:
  1870  0012F0  0012               	return		;funcret
  1871  0012F2                     __end_of_rotateContainers:
  1872                           	opt stack 0
  1873                           tblptru	equ	0xFF8
  1874                           intcon	equ	0xFF2
  1875                           intcon3	equ	0xFF0
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           status	equ	0xFD8
  1879                           
  1880 ;; *************** function _rotateStepperMotor *****************
  1881 ;; Defined at:
  1882 ;;		line 11 in file "controlMotors.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  degrees         2   21[BANK0 ] int 
  1885 ;;  angularSpeed    2   23[BANK0 ] int 
  1886 ;;  direction       2   25[BANK0 ] int 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  i               2   34[BANK0 ] int 
  1889 ;;  delay           3   29[BANK0 ] int 
  1890 ;;  numSteps        2   32[BANK0 ] int 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  1    wreg      void 
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1900 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;Total ram usage:       15 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    9
  1907 ;; This function calls:
  1908 ;;		___awtoft
  1909 ;;		___ftdiv
  1910 ;;		___ftmul
  1911 ;;		___fttol
  1912 ;; This function is called by:
  1913 ;;		_rotateContainers
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text7
  1918  0016D4                     __ptext7:
  1919                           	opt stack 0
  1920  0016D4                     _rotateStepperMotor:
  1921                           	opt stack 20
  1922                           
  1923                           ;controlMotors.c: 12: int numSteps= (degrees/360.0)*4096;
  1924                           
  1925                           ;incstack = 0
  1926  0016D4  0E00               	movlw	0
  1927  0016D6  6E3F               	movwf	___ftmul@f2,c
  1928  0016D8  0E80               	movlw	128
  1929  0016DA  6E40               	movwf	___ftmul@f2+1,c
  1930  0016DC  0E45               	movlw	69
  1931  0016DE  6E41               	movwf	___ftmul@f2+2,c
  1932  0016E0  0E00               	movlw	0
  1933  0016E2  6E30               	movwf	___ftdiv@f2,c
  1934  0016E4  0EB4               	movlw	180
  1935  0016E6  6E31               	movwf	___ftdiv@f2+1,c
  1936  0016E8  0E43               	movlw	67
  1937  0016EA  6E32               	movwf	___ftdiv@f2+2,c
  1938  0016EC  C095  F029         	movff	rotateStepperMotor@degrees,___awtoft@c
  1939  0016F0  C096  F02A         	movff	rotateStepperMotor@degrees+1,___awtoft@c+1
  1940  0016F4  EC61  F00F         	call	___awtoft	;wreg free
  1941  0016F8  C029  F02D         	movff	?___awtoft,___ftdiv@f1
  1942  0016FC  C02A  F02E         	movff	?___awtoft+1,___ftdiv@f1+1
  1943  001700  C02B  F02F         	movff	?___awtoft+2,___ftdiv@f1+2
  1944  001704  ECE9  F00B         	call	___ftdiv	;wreg free
  1945  001708  C02D  F03C         	movff	?___ftdiv,___ftmul@f1
  1946  00170C  C02E  F03D         	movff	?___ftdiv+1,___ftmul@f1+1
  1947  001710  C02F  F03E         	movff	?___ftdiv+2,___ftmul@f1+2
  1948  001714  ECDA  F00A         	call	___ftmul	;wreg free
  1949  001718  C03C  F086         	movff	?___ftmul,___fttol@f1
  1950  00171C  C03D  F087         	movff	?___ftmul+1,___fttol@f1+1
  1951  001720  C03E  F088         	movff	?___ftmul+2,___fttol@f1+2
  1952  001724  EC38  F00A         	call	___fttol	;wreg free
  1953  001728  C086  F0A0         	movff	?___fttol,rotateStepperMotor@numSteps
  1954  00172C  C087  F0A1         	movff	?___fttol+1,rotateStepperMotor@numSteps+1
  1955                           
  1956                           ;controlMotors.c: 13: double delay = 360.0/(4096*angularSpeed);
  1957  001730  0E00               	movlw	0
  1958  001732  6E2D               	movwf	___ftdiv@f1,c
  1959  001734  0EB4               	movlw	180
  1960  001736  6E2E               	movwf	___ftdiv@f1+1,c
  1961  001738  0E43               	movlw	67
  1962  00173A  6E2F               	movwf	___ftdiv@f1+2,c
  1963  00173C  C097  F09B         	movff	rotateStepperMotor@angularSpeed,??_rotateStepperMotor
  1964  001740  C098  F09C         	movff	rotateStepperMotor@angularSpeed+1,??_rotateStepperMotor+1
  1965  001744  0E0C               	movlw	12
  1966  001746                     u2315:
  1967  001746  90D8               	bcf	status,0,c
  1968  001748  0100               	movlb	0	; () banked
  1969  00174A  379B               	rlcf	??_rotateStepperMotor& (0+255),f,b
  1970  00174C  379C               	rlcf	(??_rotateStepperMotor+1)& (0+255),f,b
  1971  00174E  2EE8               	decfsz	wreg,f,c
  1972  001750  D7FA               	goto	u2315
  1973  001752  C09B  F029         	movff	??_rotateStepperMotor,___awtoft@c
  1974  001756  C09C  F02A         	movff	??_rotateStepperMotor+1,___awtoft@c+1
  1975  00175A  EC61  F00F         	call	___awtoft	;wreg free
  1976  00175E  C029  F030         	movff	?___awtoft,___ftdiv@f2
  1977  001762  C02A  F031         	movff	?___awtoft+1,___ftdiv@f2+1
  1978  001766  C02B  F032         	movff	?___awtoft+2,___ftdiv@f2+2
  1979  00176A  ECE9  F00B         	call	___ftdiv	;wreg free
  1980  00176E  C02D  F09D         	movff	?___ftdiv,rotateStepperMotor@delay
  1981  001772  C02E  F09E         	movff	?___ftdiv+1,rotateStepperMotor@delay+1
  1982  001776  C02F  F09F         	movff	?___ftdiv+2,rotateStepperMotor@delay+2
  1983                           
  1984                           ;controlMotors.c: 14: if (direction == 8){
  1985  00177A  0E08               	movlw	8
  1986  00177C  0100               	movlb	0	; () banked
  1987  00177E  1999               	xorwf	rotateStepperMotor@direction& (0+255),w,b
  1988  001780  0100               	movlb	0	; () banked
  1989  001782  119A               	iorwf	(rotateStepperMotor@direction+1)& (0+255),w,b
  1990  001784  A4D8               	btfss	status,2,c
  1991  001786  D002               	goto	l2657
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;controlMotors.c: 15: LATCbits.LC0 = 0;
  1995  001788  908B               	bcf	3979,0,c	;volatile
  1996                           
  1997                           ;controlMotors.c: 16: }
  1998  00178A  D007               	goto	l2661
  1999  00178C                     l2657:
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;controlMotors.c: 17: else if (direction == 9){
  2003  00178C  0E09               	movlw	9
  2004  00178E  0100               	movlb	0	; () banked
  2005  001790  1999               	xorwf	rotateStepperMotor@direction& (0+255),w,b
  2006  001792  0100               	movlb	0	; () banked
  2007  001794  119A               	iorwf	(rotateStepperMotor@direction+1)& (0+255),w,b
  2008  001796  B4D8               	btfsc	status,2,c
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;controlMotors.c: 18: LATCbits.LC0 = 1;
  2012  001798  808B               	bsf	3979,0,c	;volatile
  2013  00179A                     l2661:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;controlMotors.c: 19: }
  2017                           ;controlMotors.c: 20: for (int i=0;i<numSteps;i++){
  2018  00179A  0E00               	movlw	0
  2019  00179C  0100               	movlb	0	; () banked
  2020  00179E  6FA3               	movwf	(rotateStepperMotor@i+1)& (0+255),b
  2021  0017A0  0E00               	movlw	0
  2022  0017A2  6FA2               	movwf	rotateStepperMotor@i& (0+255),b
  2023  0017A4  D005               	goto	l2665
  2024  0017A6                     l284:
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;controlMotors.c: 21: LATCbits.LC1 = 1;
  2028  0017A6  828B               	bsf	3979,1,c	;volatile
  2029                           
  2030                           ;controlMotors.c: 23: LATCbits.LC1 = 0;
  2031  0017A8  928B               	bcf	3979,1,c	;volatile
  2032                           
  2033                           ; BSR set to: 0
  2034  0017AA  0100               	movlb	0	; () banked
  2035  0017AC  4BA2               	infsnz	rotateStepperMotor@i& (0+255),f,b
  2036  0017AE  2BA3               	incf	(rotateStepperMotor@i+1)& (0+255),f,b
  2037  0017B0                     l2665:
  2038                           
  2039                           ; BSR set to: 0
  2040  0017B0  0100               	movlb	0	; () banked
  2041  0017B2  51A0               	movf	rotateStepperMotor@numSteps& (0+255),w,b
  2042  0017B4  0100               	movlb	0	; () banked
  2043  0017B6  5DA2               	subwf	rotateStepperMotor@i& (0+255),w,b
  2044  0017B8  0100               	movlb	0	; () banked
  2045  0017BA  51A3               	movf	(rotateStepperMotor@i+1)& (0+255),w,b
  2046  0017BC  0A80               	xorlw	128
  2047  0017BE  0100               	movlb	0	; () banked
  2048  0017C0  6F9B               	movwf	??_rotateStepperMotor& (0+255),b
  2049  0017C2  0100               	movlb	0	; () banked
  2050  0017C4  51A1               	movf	(rotateStepperMotor@numSteps+1)& (0+255),w,b
  2051  0017C6  0A80               	xorlw	128
  2052  0017C8  0100               	movlb	0	; () banked
  2053  0017CA  599B               	subwfb	??_rotateStepperMotor& (0+255),w,b
  2054  0017CC  B0D8               	btfsc	status,0,c
  2055  0017CE  0012               	return	
  2056  0017D0  D7EA               	goto	l284
  2057  0017D2                     __end_of_rotateStepperMotor:
  2058                           	opt stack 0
  2059                           tblptru	equ	0xFF8
  2060                           intcon	equ	0xFF2
  2061                           intcon3	equ	0xFF0
  2062                           postinc0	equ	0xFEE
  2063                           wreg	equ	0xFE8
  2064                           status	equ	0xFD8
  2065                           
  2066 ;; *************** function ___fttol *****************
  2067 ;; Defined at:
  2068 ;;		line 44 in file "/opt/microchip/xc8/v1.40/sources/common/fttol.c"
  2069 ;; Parameters:    Size  Location     Type
  2070 ;;  f1              3    6[BANK0 ] float 
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;  lval            4   16[BANK0 ] unsigned long 
  2073 ;;  exp1            1   20[BANK0 ] unsigned char 
  2074 ;;  sign1           1   15[BANK0 ] unsigned char 
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  4    6[BANK0 ] long 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2, status,0
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2084 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;Total ram usage:       15 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    7
  2091 ;; This function calls:
  2092 ;;		Nothing
  2093 ;; This function is called by:
  2094 ;;		_rotateStepperMotor
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           	psect	text8
  2099  001470                     __ptext8:
  2100                           	opt stack 0
  2101  001470                     ___fttol:
  2102                           	opt stack 21
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;incstack = 0
  2106  001470  C088  F08A         	movff	___fttol@f1+2,??___fttol
  2107  001474  0100               	movlb	0	; () banked
  2108  001476  6B8B               	clrf	(??___fttol+1)& (0+255),b
  2109  001478  6B8C               	clrf	(??___fttol+2)& (0+255),b
  2110  00147A  0100               	movlb	0	; () banked
  2111  00147C  3587               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2112  00147E  0100               	movlb	0	; () banked
  2113  001480  378A               	rlcf	??___fttol& (0+255),f,b
  2114  001482  E301               	bnc	u2231
  2115  001484  818B               	bsf	(??___fttol+1)& (0+255),0,b
  2116  001486                     u2231:
  2117  001486  0100               	movlb	0	; () banked
  2118  001488  518A               	movf	??___fttol& (0+255),w,b
  2119  00148A  0100               	movlb	0	; () banked
  2120  00148C  6F94               	movwf	___fttol@exp1& (0+255),b
  2121  00148E  0100               	movlb	0	; () banked
  2122  001490  5194               	movf	___fttol@exp1& (0+255),w,b
  2123  001492  A4D8               	btfss	status,2,c
  2124  001494  D00A               	goto	l2611
  2125                           
  2126                           ; BSR set to: 0
  2127  001496  0E00               	movlw	0
  2128  001498  0100               	movlb	0	; () banked
  2129  00149A  6F86               	movwf	?___fttol& (0+255),b
  2130  00149C  0E00               	movlw	0
  2131  00149E  6F87               	movwf	(?___fttol+1)& (0+255),b
  2132  0014A0  0E00               	movlw	0
  2133  0014A2  6F88               	movwf	(?___fttol+2)& (0+255),b
  2134  0014A4  0E00               	movlw	0
  2135  0014A6  6F89               	movwf	(?___fttol+3)& (0+255),b
  2136                           
  2137                           ; BSR set to: 0
  2138  0014A8  0012               	return	
  2139  0014AA                     l2611:
  2140                           
  2141                           ; BSR set to: 0
  2142  0014AA  0E17               	movlw	23
  2143  0014AC  0100               	movlb	0	; () banked
  2144  0014AE  6F8A               	movwf	??___fttol& (0+255),b
  2145  0014B0  C086  F08B         	movff	___fttol@f1,??___fttol+1
  2146  0014B4  C087  F08C         	movff	___fttol@f1+1,??___fttol+2
  2147  0014B8  C088  F08D         	movff	___fttol@f1+2,??___fttol+3
  2148  0014BC  0100               	movlb	0	; () banked
  2149  0014BE  298A               	incf	??___fttol& (0+255),w,b
  2150  0014C0  0100               	movlb	0	; () banked
  2151  0014C2  6F8E               	movwf	(??___fttol+4)& (0+255),b
  2152  0014C4  D005               	goto	u2250
  2153  0014C6                     u2255:
  2154  0014C6  0100               	movlb	0	; () banked
  2155  0014C8  90D8               	bcf	status,0,c
  2156  0014CA  338D               	rrcf	(??___fttol+3)& (0+255),f,b
  2157  0014CC  338C               	rrcf	(??___fttol+2)& (0+255),f,b
  2158  0014CE  338B               	rrcf	(??___fttol+1)& (0+255),f,b
  2159  0014D0                     u2250:
  2160  0014D0  0100               	movlb	0	; () banked
  2161  0014D2  2F8E               	decfsz	(??___fttol+4)& (0+255),f,b
  2162  0014D4  D7F8               	goto	u2255
  2163  0014D6  0100               	movlb	0	; () banked
  2164  0014D8  518B               	movf	(??___fttol+1)& (0+255),w,b
  2165  0014DA  0100               	movlb	0	; () banked
  2166  0014DC  6F8F               	movwf	___fttol@sign1& (0+255),b
  2167                           
  2168                           ; BSR set to: 0
  2169  0014DE  0100               	movlb	0	; () banked
  2170  0014E0  8F87               	bsf	(___fttol@f1+1)& (0+255),7,b
  2171                           
  2172                           ; BSR set to: 0
  2173  0014E2  0EFF               	movlw	255
  2174  0014E4  0100               	movlb	0	; () banked
  2175  0014E6  1786               	andwf	___fttol@f1& (0+255),f,b
  2176  0014E8  0EFF               	movlw	255
  2177  0014EA  0100               	movlb	0	; () banked
  2178  0014EC  1787               	andwf	(___fttol@f1+1)& (0+255),f,b
  2179  0014EE  0E00               	movlw	0
  2180  0014F0  0100               	movlb	0	; () banked
  2181  0014F2  1788               	andwf	(___fttol@f1+2)& (0+255),f,b
  2182                           
  2183                           ; BSR set to: 0
  2184  0014F4  0100               	movlb	0	; () banked
  2185  0014F6  5186               	movf	___fttol@f1& (0+255),w,b
  2186  0014F8  0100               	movlb	0	; () banked
  2187  0014FA  6F90               	movwf	___fttol@lval& (0+255),b
  2188  0014FC  0100               	movlb	0	; () banked
  2189  0014FE  5187               	movf	(___fttol@f1+1)& (0+255),w,b
  2190  001500  0100               	movlb	0	; () banked
  2191  001502  6F91               	movwf	(___fttol@lval+1)& (0+255),b
  2192  001504  0100               	movlb	0	; () banked
  2193  001506  5188               	movf	(___fttol@f1+2)& (0+255),w,b
  2194  001508  0100               	movlb	0	; () banked
  2195  00150A  6F92               	movwf	(___fttol@lval+2)& (0+255),b
  2196  00150C  0100               	movlb	0	; () banked
  2197  00150E  6B93               	clrf	(___fttol@lval+3)& (0+255),b
  2198                           
  2199                           ; BSR set to: 0
  2200  001510  0E8E               	movlw	142
  2201  001512  0100               	movlb	0	; () banked
  2202  001514  5F94               	subwf	___fttol@exp1& (0+255),f,b
  2203                           
  2204                           ; BSR set to: 0
  2205  001516  0100               	movlb	0	; () banked
  2206  001518  AF94               	btfss	___fttol@exp1& (0+255),7,b
  2207  00151A  D01A               	goto	l2633
  2208                           
  2209                           ; BSR set to: 0
  2210  00151C  0100               	movlb	0	; () banked
  2211  00151E  5194               	movf	___fttol@exp1& (0+255),w,b
  2212  001520  0A80               	xorlw	128
  2213  001522  0F8F               	addlw	143
  2214  001524  B0D8               	btfsc	status,0,c
  2215  001526  D00A               	goto	l2629
  2216                           
  2217                           ; BSR set to: 0
  2218  001528  0E00               	movlw	0
  2219  00152A  0100               	movlb	0	; () banked
  2220  00152C  6F86               	movwf	?___fttol& (0+255),b
  2221  00152E  0E00               	movlw	0
  2222  001530  6F87               	movwf	(?___fttol+1)& (0+255),b
  2223  001532  0E00               	movlw	0
  2224  001534  6F88               	movwf	(?___fttol+2)& (0+255),b
  2225  001536  0E00               	movlw	0
  2226  001538  6F89               	movwf	(?___fttol+3)& (0+255),b
  2227                           
  2228                           ; BSR set to: 0
  2229  00153A  0012               	return	
  2230  00153C                     l2629:
  2231                           
  2232                           ; BSR set to: 0
  2233  00153C  0100               	movlb	0	; () banked
  2234  00153E  90D8               	bcf	status,0,c
  2235  001540  3393               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2236  001542  3392               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2237  001544  3391               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2238  001546  3390               	rrcf	___fttol@lval& (0+255),f,b
  2239                           
  2240                           ; BSR set to: 0
  2241  001548  0100               	movlb	0	; () banked
  2242  00154A  3F94               	incfsz	___fttol@exp1& (0+255),f,b
  2243  00154C  D7F7               	goto	l2629
  2244                           
  2245                           ; BSR set to: 0
  2246  00154E  D01B               	goto	l2643
  2247  001550                     l2633:
  2248                           
  2249                           ; BSR set to: 0
  2250  001550  0E17               	movlw	23
  2251  001552  0100               	movlb	0	; () banked
  2252  001554  6594               	cpfsgt	___fttol@exp1& (0+255),b
  2253  001556  D012               	goto	l2641
  2254                           
  2255                           ; BSR set to: 0
  2256  001558  0E00               	movlw	0
  2257  00155A  0100               	movlb	0	; () banked
  2258  00155C  6F86               	movwf	?___fttol& (0+255),b
  2259  00155E  0E00               	movlw	0
  2260  001560  6F87               	movwf	(?___fttol+1)& (0+255),b
  2261  001562  0E00               	movlw	0
  2262  001564  6F88               	movwf	(?___fttol+2)& (0+255),b
  2263  001566  0E00               	movlw	0
  2264  001568  6F89               	movwf	(?___fttol+3)& (0+255),b
  2265                           
  2266                           ; BSR set to: 0
  2267  00156A  0012               	return	
  2268  00156C                     l2639:
  2269                           
  2270                           ; BSR set to: 0
  2271  00156C  0100               	movlb	0	; () banked
  2272  00156E  90D8               	bcf	status,0,c
  2273  001570  3790               	rlcf	___fttol@lval& (0+255),f,b
  2274  001572  3791               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2275  001574  3792               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2276  001576  3793               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2277  001578  0100               	movlb	0	; () banked
  2278  00157A  0794               	decf	___fttol@exp1& (0+255),f,b
  2279  00157C                     l2641:
  2280                           
  2281                           ; BSR set to: 0
  2282  00157C  0100               	movlb	0	; () banked
  2283  00157E  5194               	movf	___fttol@exp1& (0+255),w,b
  2284  001580  0100               	movlb	0	; () banked
  2285  001582  A4D8               	btfss	status,2,c
  2286  001584  D7F3               	goto	l2639
  2287  001586                     l2643:
  2288                           
  2289                           ; BSR set to: 0
  2290  001586  0100               	movlb	0	; () banked
  2291  001588  518F               	movf	___fttol@sign1& (0+255),w,b
  2292  00158A  0100               	movlb	0	; () banked
  2293  00158C  B4D8               	btfsc	status,2,c
  2294  00158E  D009               	goto	l2647
  2295                           
  2296                           ; BSR set to: 0
  2297  001590  0100               	movlb	0	; () banked
  2298  001592  1F93               	comf	(___fttol@lval+3)& (0+255),f,b
  2299  001594  1F92               	comf	(___fttol@lval+2)& (0+255),f,b
  2300  001596  1F91               	comf	(___fttol@lval+1)& (0+255),f,b
  2301  001598  6D90               	negf	___fttol@lval& (0+255),b
  2302  00159A  0E00               	movlw	0
  2303  00159C  2391               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2304  00159E  2392               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2305  0015A0  2393               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2306  0015A2                     l2647:
  2307                           
  2308                           ; BSR set to: 0
  2309  0015A2  C090  F086         	movff	___fttol@lval,?___fttol
  2310  0015A6  C091  F087         	movff	___fttol@lval+1,?___fttol+1
  2311  0015AA  C092  F088         	movff	___fttol@lval+2,?___fttol+2
  2312  0015AE  C093  F089         	movff	___fttol@lval+3,?___fttol+3
  2313  0015B2  0012               	return	
  2314  0015B4                     __end_of___fttol:
  2315                           	opt stack 0
  2316                           tblptru	equ	0xFF8
  2317                           intcon	equ	0xFF2
  2318                           intcon3	equ	0xFF0
  2319                           postinc0	equ	0xFEE
  2320                           wreg	equ	0xFE8
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function ___ftmul *****************
  2324 ;; Defined at:
  2325 ;;		line 62 in file "/opt/microchip/xc8/v1.40/sources/common/ftmul.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  f1              3   59[COMRAM] float 
  2328 ;;  f2              3   62[COMRAM] float 
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  2331 ;;  sign            1    5[BANK0 ] unsigned char 
  2332 ;;  cntr            1    4[BANK0 ] unsigned char 
  2333 ;;  exp             1    0[BANK0 ] unsigned char 
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  3   59[COMRAM] float 
  2336 ;; Registers used:
  2337 ;;		wreg, status,2, status,0, cstack
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2343 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2345 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2346 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2347 ;;Total ram usage:       15 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    8
  2350 ;; This function calls:
  2351 ;;		___ftpack
  2352 ;; This function is called by:
  2353 ;;		_rotateStepperMotor
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text9
  2358  0015B4                     __ptext9:
  2359                           	opt stack 0
  2360  0015B4                     ___ftmul:
  2361                           	opt stack 20
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;incstack = 0
  2365  0015B4  C03E  F042         	movff	___ftmul@f1+2,??___ftmul
  2366  0015B8  6A43               	clrf	(??___ftmul+1)& (0+255),c
  2367  0015BA  6A44               	clrf	(??___ftmul+2)& (0+255),c
  2368  0015BC  343D               	rlcf	___ftmul@f1+1,w,c
  2369  0015BE  3642               	rlcf	??___ftmul& (0+255),f,c
  2370  0015C0  E301               	bnc	u2161
  2371  0015C2  8043               	bsf	(??___ftmul+1)& (0+255),0,c
  2372  0015C4                     u2161:
  2373  0015C4  5042               	movf	??___ftmul,w,c
  2374  0015C6  0100               	movlb	0	; () banked
  2375  0015C8  6F80               	movwf	___ftmul@exp& (0+255),b
  2376  0015CA  0100               	movlb	0	; () banked
  2377  0015CC  5180               	movf	___ftmul@exp& (0+255),w,b
  2378  0015CE  A4D8               	btfss	status,2,c
  2379  0015D0  D007               	goto	l2551
  2380                           
  2381                           ; BSR set to: 0
  2382  0015D2  0E00               	movlw	0
  2383  0015D4  6E3C               	movwf	?___ftmul,c
  2384  0015D6  0E00               	movlw	0
  2385  0015D8  6E3D               	movwf	?___ftmul+1,c
  2386  0015DA  0E00               	movlw	0
  2387  0015DC  6E3E               	movwf	?___ftmul+2,c
  2388                           
  2389                           ; BSR set to: 0
  2390  0015DE  0012               	return	
  2391  0015E0                     l2551:
  2392                           
  2393                           ; BSR set to: 0
  2394  0015E0  C041  F042         	movff	___ftmul@f2+2,??___ftmul
  2395  0015E4  6A43               	clrf	(??___ftmul+1)& (0+255),c
  2396  0015E6  6A44               	clrf	(??___ftmul+2)& (0+255),c
  2397  0015E8  3440               	rlcf	___ftmul@f2+1,w,c
  2398  0015EA  3642               	rlcf	??___ftmul& (0+255),f,c
  2399  0015EC  E301               	bnc	u2181
  2400  0015EE  8043               	bsf	(??___ftmul+1)& (0+255),0,c
  2401  0015F0                     u2181:
  2402  0015F0  5042               	movf	??___ftmul,w,c
  2403  0015F2  0100               	movlb	0	; () banked
  2404  0015F4  6F85               	movwf	___ftmul@sign& (0+255),b
  2405  0015F6  0100               	movlb	0	; () banked
  2406  0015F8  5185               	movf	___ftmul@sign& (0+255),w,b
  2407  0015FA  A4D8               	btfss	status,2,c
  2408  0015FC  D007               	goto	l2557
  2409                           
  2410                           ; BSR set to: 0
  2411  0015FE  0E00               	movlw	0
  2412  001600  6E3C               	movwf	?___ftmul,c
  2413  001602  0E00               	movlw	0
  2414  001604  6E3D               	movwf	?___ftmul+1,c
  2415  001606  0E00               	movlw	0
  2416  001608  6E3E               	movwf	?___ftmul+2,c
  2417                           
  2418                           ; BSR set to: 0
  2419  00160A  0012               	return	
  2420  00160C                     l2557:
  2421                           
  2422                           ; BSR set to: 0
  2423  00160C  0100               	movlb	0	; () banked
  2424  00160E  5185               	movf	___ftmul@sign& (0+255),w,b
  2425  001610  0F7B               	addlw	123
  2426  001612  0100               	movlb	0	; () banked
  2427  001614  2780               	addwf	___ftmul@exp& (0+255),f,b
  2428                           
  2429                           ; BSR set to: 0
  2430  001616  C03E  F085         	movff	___ftmul@f1+2,___ftmul@sign
  2431  00161A  5041               	movf	___ftmul@f2+2,w,c
  2432  00161C  0100               	movlb	0	; () banked
  2433  00161E  1B85               	xorwf	___ftmul@sign& (0+255),f,b
  2434  001620  0E80               	movlw	128
  2435  001622  0100               	movlb	0	; () banked
  2436  001624  1785               	andwf	___ftmul@sign& (0+255),f,b
  2437                           
  2438                           ; BSR set to: 0
  2439  001626  8E3D               	bsf	___ftmul@f1+1,7,c
  2440                           
  2441                           ; BSR set to: 0
  2442  001628  8E40               	bsf	___ftmul@f2+1,7,c
  2443                           
  2444                           ; BSR set to: 0
  2445  00162A  0EFF               	movlw	255
  2446  00162C  163F               	andwf	___ftmul@f2,f,c
  2447  00162E  0EFF               	movlw	255
  2448  001630  1640               	andwf	___ftmul@f2+1,f,c
  2449  001632  0E00               	movlw	0
  2450  001634  1641               	andwf	___ftmul@f2+2,f,c
  2451                           
  2452                           ; BSR set to: 0
  2453  001636  0E00               	movlw	0
  2454  001638  0100               	movlb	0	; () banked
  2455  00163A  6F81               	movwf	___ftmul@f3_as_product& (0+255),b
  2456  00163C  0E00               	movlw	0
  2457  00163E  0100               	movlb	0	; () banked
  2458  001640  6F82               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  2459  001642  0E00               	movlw	0
  2460  001644  0100               	movlb	0	; () banked
  2461  001646  6F83               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  2462                           
  2463                           ; BSR set to: 0
  2464  001648  0E07               	movlw	7
  2465  00164A  0100               	movlb	0	; () banked
  2466  00164C  6F84               	movwf	___ftmul@cntr& (0+255),b
  2467  00164E                     l2571:
  2468                           
  2469                           ; BSR set to: 0
  2470  00164E  A03C               	btfss	___ftmul@f1,0,c
  2471  001650  D009               	goto	l2575
  2472                           
  2473                           ; BSR set to: 0
  2474  001652  503F               	movf	___ftmul@f2,w,c
  2475  001654  0100               	movlb	0	; () banked
  2476  001656  2781               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2477  001658  5040               	movf	___ftmul@f2+1,w,c
  2478  00165A  0100               	movlb	0	; () banked
  2479  00165C  2382               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2480  00165E  5041               	movf	___ftmul@f2+2,w,c
  2481  001660  0100               	movlb	0	; () banked
  2482  001662  2383               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2483  001664                     l2575:
  2484                           
  2485                           ; BSR set to: 0
  2486  001664  90D8               	bcf	status,0,c
  2487  001666  323E               	rrcf	___ftmul@f1+2,f,c
  2488  001668  323D               	rrcf	___ftmul@f1+1,f,c
  2489  00166A  323C               	rrcf	___ftmul@f1,f,c
  2490  00166C  90D8               	bcf	status,0,c
  2491  00166E  363F               	rlcf	___ftmul@f2,f,c
  2492  001670  3640               	rlcf	___ftmul@f2+1,f,c
  2493  001672  3641               	rlcf	___ftmul@f2+2,f,c
  2494                           
  2495                           ; BSR set to: 0
  2496  001674  0100               	movlb	0	; () banked
  2497  001676  2F84               	decfsz	___ftmul@cntr& (0+255),f,b
  2498  001678  D7EA               	goto	l2571
  2499                           
  2500                           ; BSR set to: 0
  2501                           
  2502                           ; BSR set to: 0
  2503  00167A  0E09               	movlw	9
  2504  00167C  0100               	movlb	0	; () banked
  2505  00167E  6F84               	movwf	___ftmul@cntr& (0+255),b
  2506  001680                     l2581:
  2507                           
  2508                           ; BSR set to: 0
  2509  001680  A03C               	btfss	___ftmul@f1,0,c
  2510  001682  D009               	goto	l2585
  2511                           
  2512                           ; BSR set to: 0
  2513  001684  503F               	movf	___ftmul@f2,w,c
  2514  001686  0100               	movlb	0	; () banked
  2515  001688  2781               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2516  00168A  5040               	movf	___ftmul@f2+1,w,c
  2517  00168C  0100               	movlb	0	; () banked
  2518  00168E  2382               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2519  001690  5041               	movf	___ftmul@f2+2,w,c
  2520  001692  0100               	movlb	0	; () banked
  2521  001694  2383               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2522  001696                     l2585:
  2523                           
  2524                           ; BSR set to: 0
  2525  001696  90D8               	bcf	status,0,c
  2526  001698  323E               	rrcf	___ftmul@f1+2,f,c
  2527  00169A  323D               	rrcf	___ftmul@f1+1,f,c
  2528  00169C  323C               	rrcf	___ftmul@f1,f,c
  2529  00169E  0100               	movlb	0	; () banked
  2530  0016A0  90D8               	bcf	status,0,c
  2531  0016A2  3383               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  2532  0016A4  3382               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  2533  0016A6  3381               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  2534                           
  2535                           ; BSR set to: 0
  2536  0016A8  0100               	movlb	0	; () banked
  2537  0016AA  2F84               	decfsz	___ftmul@cntr& (0+255),f,b
  2538  0016AC  D7E9               	goto	l2581
  2539                           
  2540                           ; BSR set to: 0
  2541                           
  2542                           ; BSR set to: 0
  2543  0016AE  C081  F021         	movff	___ftmul@f3_as_product,___ftpack@arg
  2544  0016B2  C082  F022         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2545  0016B6  C083  F023         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2546  0016BA  C080  F024         	movff	___ftmul@exp,___ftpack@exp
  2547  0016BE  C085  F025         	movff	___ftmul@sign,___ftpack@sign
  2548  0016C2  ECB8  F00C         	call	___ftpack	;wreg free
  2549  0016C6  C021  F03C         	movff	?___ftpack,?___ftmul
  2550  0016CA  C022  F03D         	movff	?___ftpack+1,?___ftmul+1
  2551  0016CE  C023  F03E         	movff	?___ftpack+2,?___ftmul+2
  2552  0016D2  0012               	return	
  2553  0016D4                     __end_of___ftmul:
  2554                           	opt stack 0
  2555                           tblptru	equ	0xFF8
  2556                           intcon	equ	0xFF2
  2557                           intcon3	equ	0xFF0
  2558                           postinc0	equ	0xFEE
  2559                           wreg	equ	0xFE8
  2560                           status	equ	0xFD8
  2561                           
  2562 ;; *************** function ___ftdiv *****************
  2563 ;; Defined at:
  2564 ;;		line 54 in file "/opt/microchip/xc8/v1.40/sources/common/ftdiv.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;  f1              3   44[COMRAM] float 
  2567 ;;  f2              3   47[COMRAM] float 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  f3              3   54[COMRAM] float 
  2570 ;;  sign            1   58[COMRAM] unsigned char 
  2571 ;;  exp             1   57[COMRAM] unsigned char 
  2572 ;;  cntr            1   53[COMRAM] unsigned char 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  3   44[COMRAM] float 
  2575 ;; Registers used:
  2576 ;;		wreg, status,2, status,0, cstack
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2582 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;Total ram usage:       15 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; Hardware stack levels required when called:    8
  2589 ;; This function calls:
  2590 ;;		___ftpack
  2591 ;; This function is called by:
  2592 ;;		_rotateStepperMotor
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text10
  2597  0017D2                     __ptext10:
  2598                           	opt stack 0
  2599  0017D2                     ___ftdiv:
  2600                           	opt stack 20
  2601                           
  2602                           ;incstack = 0
  2603  0017D2  C02F  F033         	movff	___ftdiv@f1+2,??___ftdiv
  2604  0017D6  6A34               	clrf	(??___ftdiv+1)& (0+255),c
  2605  0017D8  6A35               	clrf	(??___ftdiv+2)& (0+255),c
  2606  0017DA  342E               	rlcf	___ftdiv@f1+1,w,c
  2607  0017DC  3633               	rlcf	??___ftdiv& (0+255),f,c
  2608  0017DE  E301               	bnc	u2111
  2609  0017E0  8034               	bsf	(??___ftdiv+1)& (0+255),0,c
  2610  0017E2                     u2111:
  2611  0017E2  5033               	movf	??___ftdiv,w,c
  2612  0017E4  6E3A               	movwf	___ftdiv@exp,c
  2613  0017E6  503A               	movf	___ftdiv@exp,w,c
  2614  0017E8  A4D8               	btfss	status,2,c
  2615  0017EA  D007               	goto	l2505
  2616  0017EC  0E00               	movlw	0
  2617  0017EE  6E2D               	movwf	?___ftdiv,c
  2618  0017F0  0E00               	movlw	0
  2619  0017F2  6E2E               	movwf	?___ftdiv+1,c
  2620  0017F4  0E00               	movlw	0
  2621  0017F6  6E2F               	movwf	?___ftdiv+2,c
  2622  0017F8  0012               	return	
  2623  0017FA                     l2505:
  2624  0017FA  C032  F033         	movff	___ftdiv@f2+2,??___ftdiv
  2625  0017FE  6A34               	clrf	(??___ftdiv+1)& (0+255),c
  2626  001800  6A35               	clrf	(??___ftdiv+2)& (0+255),c
  2627  001802  3431               	rlcf	___ftdiv@f2+1,w,c
  2628  001804  3633               	rlcf	??___ftdiv& (0+255),f,c
  2629  001806  E301               	bnc	u2131
  2630  001808  8034               	bsf	(??___ftdiv+1)& (0+255),0,c
  2631  00180A                     u2131:
  2632  00180A  5033               	movf	??___ftdiv,w,c
  2633  00180C  6E3B               	movwf	___ftdiv@sign,c
  2634  00180E  503B               	movf	___ftdiv@sign,w,c
  2635  001810  A4D8               	btfss	status,2,c
  2636  001812  D007               	goto	l2511
  2637  001814  0E00               	movlw	0
  2638  001816  6E2D               	movwf	?___ftdiv,c
  2639  001818  0E00               	movlw	0
  2640  00181A  6E2E               	movwf	?___ftdiv+1,c
  2641  00181C  0E00               	movlw	0
  2642  00181E  6E2F               	movwf	?___ftdiv+2,c
  2643  001820  0012               	return	
  2644  001822                     l2511:
  2645  001822  0E00               	movlw	0
  2646  001824  6E37               	movwf	___ftdiv@f3,c
  2647  001826  0E00               	movlw	0
  2648  001828  6E38               	movwf	___ftdiv@f3+1,c
  2649  00182A  0E00               	movlw	0
  2650  00182C  6E39               	movwf	___ftdiv@f3+2,c
  2651  00182E  503B               	movf	___ftdiv@sign,w,c
  2652  001830  0F89               	addlw	137
  2653  001832  5E3A               	subwf	___ftdiv@exp,f,c
  2654  001834  C02F  F03B         	movff	___ftdiv@f1+2,___ftdiv@sign
  2655  001838  5032               	movf	___ftdiv@f2+2,w,c
  2656  00183A  1A3B               	xorwf	___ftdiv@sign,f,c
  2657  00183C  0E80               	movlw	128
  2658  00183E  163B               	andwf	___ftdiv@sign,f,c
  2659  001840  8E2E               	bsf	___ftdiv@f1+1,7,c
  2660  001842  0EFF               	movlw	255
  2661  001844  162D               	andwf	___ftdiv@f1,f,c
  2662  001846  0EFF               	movlw	255
  2663  001848  162E               	andwf	___ftdiv@f1+1,f,c
  2664  00184A  0E00               	movlw	0
  2665  00184C  162F               	andwf	___ftdiv@f1+2,f,c
  2666  00184E  8E31               	bsf	___ftdiv@f2+1,7,c
  2667  001850  0EFF               	movlw	255
  2668  001852  1630               	andwf	___ftdiv@f2,f,c
  2669  001854  0EFF               	movlw	255
  2670  001856  1631               	andwf	___ftdiv@f2+1,f,c
  2671  001858  0E00               	movlw	0
  2672  00185A  1632               	andwf	___ftdiv@f2+2,f,c
  2673  00185C  0E18               	movlw	24
  2674  00185E  6E36               	movwf	___ftdiv@cntr,c
  2675  001860                     l2531:
  2676  001860  90D8               	bcf	status,0,c
  2677  001862  3637               	rlcf	___ftdiv@f3,f,c
  2678  001864  3638               	rlcf	___ftdiv@f3+1,f,c
  2679  001866  3639               	rlcf	___ftdiv@f3+2,f,c
  2680  001868  5030               	movf	___ftdiv@f2,w,c
  2681  00186A  5C2D               	subwf	___ftdiv@f1,w,c
  2682  00186C  5031               	movf	___ftdiv@f2+1,w,c
  2683  00186E  582E               	subwfb	___ftdiv@f1+1,w,c
  2684  001870  5032               	movf	___ftdiv@f2+2,w,c
  2685  001872  582F               	subwfb	___ftdiv@f1+2,w,c
  2686  001874  A0D8               	btfss	status,0,c
  2687  001876  D007               	goto	l718
  2688  001878  5030               	movf	___ftdiv@f2,w,c
  2689  00187A  5E2D               	subwf	___ftdiv@f1,f,c
  2690  00187C  5031               	movf	___ftdiv@f2+1,w,c
  2691  00187E  5A2E               	subwfb	___ftdiv@f1+1,f,c
  2692  001880  5032               	movf	___ftdiv@f2+2,w,c
  2693  001882  5A2F               	subwfb	___ftdiv@f1+2,f,c
  2694  001884  8037               	bsf	___ftdiv@f3,0,c
  2695  001886                     l718:
  2696  001886  90D8               	bcf	status,0,c
  2697  001888  362D               	rlcf	___ftdiv@f1,f,c
  2698  00188A  362E               	rlcf	___ftdiv@f1+1,f,c
  2699  00188C  362F               	rlcf	___ftdiv@f1+2,f,c
  2700  00188E  2E36               	decfsz	___ftdiv@cntr,f,c
  2701  001890  D7E7               	goto	l2531
  2702  001892  C037  F021         	movff	___ftdiv@f3,___ftpack@arg
  2703  001896  C038  F022         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2704  00189A  C039  F023         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2705  00189E  C03A  F024         	movff	___ftdiv@exp,___ftpack@exp
  2706  0018A2  C03B  F025         	movff	___ftdiv@sign,___ftpack@sign
  2707  0018A6  ECB8  F00C         	call	___ftpack	;wreg free
  2708  0018AA  C021  F02D         	movff	?___ftpack,?___ftdiv
  2709  0018AE  C022  F02E         	movff	?___ftpack+1,?___ftdiv+1
  2710  0018B2  C023  F02F         	movff	?___ftpack+2,?___ftdiv+2
  2711  0018B6  0012               	return	
  2712  0018B8                     __end_of___ftdiv:
  2713                           	opt stack 0
  2714                           tblptru	equ	0xFF8
  2715                           intcon	equ	0xFF2
  2716                           intcon3	equ	0xFF0
  2717                           postinc0	equ	0xFEE
  2718                           wreg	equ	0xFE8
  2719                           status	equ	0xFD8
  2720                           
  2721 ;; *************** function ___awtoft *****************
  2722 ;; Defined at:
  2723 ;;		line 32 in file "/opt/microchip/xc8/v1.40/sources/common/awtoft.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;  c               2   40[COMRAM] int 
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;  sign            1   43[COMRAM] unsigned char 
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  3   40[COMRAM] float 
  2730 ;; Registers used:
  2731 ;;		wreg, status,2, status,0, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2737 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;Total ram usage:        4 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    8
  2744 ;; This function calls:
  2745 ;;		___ftpack
  2746 ;; This function is called by:
  2747 ;;		_rotateStepperMotor
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text11
  2752  001EC2                     __ptext11:
  2753                           	opt stack 0
  2754  001EC2                     ___awtoft:
  2755                           	opt stack 20
  2756                           
  2757                           ;incstack = 0
  2758  001EC2  0E00               	movlw	0
  2759  001EC4  6E2C               	movwf	___awtoft@sign,c
  2760  001EC6  AE2A               	btfss	___awtoft@c+1,7,c
  2761  001EC8  D006               	goto	l2601
  2762  001ECA  6C29               	negf	___awtoft@c,c
  2763  001ECC  1E2A               	comf	___awtoft@c+1,f,c
  2764  001ECE  B0D8               	btfsc	status,0,c
  2765  001ED0  2A2A               	incf	___awtoft@c+1,f,c
  2766  001ED2  0E01               	movlw	1
  2767  001ED4  6E2C               	movwf	___awtoft@sign,c
  2768  001ED6                     l2601:
  2769  001ED6  C029  F021         	movff	___awtoft@c,___ftpack@arg
  2770  001EDA  C02A  F022         	movff	___awtoft@c+1,___ftpack@arg+1
  2771  001EDE  6A23               	clrf	___ftpack@arg+2,c
  2772  001EE0  0E8E               	movlw	142
  2773  001EE2  6E24               	movwf	___ftpack@exp,c
  2774  001EE4  C02C  F025         	movff	___awtoft@sign,___ftpack@sign
  2775  001EE8  ECB8  F00C         	call	___ftpack	;wreg free
  2776  001EEC  C021  F029         	movff	?___ftpack,?___awtoft
  2777  001EF0  C022  F02A         	movff	?___ftpack+1,?___awtoft+1
  2778  001EF4  C023  F02B         	movff	?___ftpack+2,?___awtoft+2
  2779  001EF8  0012               	return	
  2780  001EFA                     __end_of___awtoft:
  2781                           	opt stack 0
  2782                           tblptru	equ	0xFF8
  2783                           intcon	equ	0xFF2
  2784                           intcon3	equ	0xFF0
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function ___ftpack *****************
  2790 ;; Defined at:
  2791 ;;		line 62 in file "/opt/microchip/xc8/v1.40/sources/common/float.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  arg             3   32[COMRAM] unsigned um
  2794 ;;  exp             1   35[COMRAM] unsigned char 
  2795 ;;  sign            1   36[COMRAM] unsigned char 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;		None
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  3   32[COMRAM] float 
  2800 ;; Registers used:
  2801 ;;		wreg, status,2, status,0
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2807 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;Total ram usage:        8 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    7
  2814 ;; This function calls:
  2815 ;;		Nothing
  2816 ;; This function is called by:
  2817 ;;		___awtoft
  2818 ;;		___ftdiv
  2819 ;;		___ftmul
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text12
  2824  001970                     __ptext12:
  2825                           	opt stack 0
  2826  001970                     ___ftpack:
  2827                           	opt stack 20
  2828                           
  2829                           ;incstack = 0
  2830  001970  5024               	movf	___ftpack@exp,w,c
  2831  001972  B4D8               	btfsc	status,2,c
  2832  001974  D005               	goto	l2467
  2833  001976  5021               	movf	___ftpack@arg,w,c
  2834  001978  1022               	iorwf	___ftpack@arg+1,w,c
  2835  00197A  1023               	iorwf	___ftpack@arg+2,w,c
  2836  00197C  A4D8               	btfss	status,2,c
  2837  00197E  D00C               	goto	l2473
  2838  001980                     l2467:
  2839  001980  0E00               	movlw	0
  2840  001982  6E21               	movwf	?___ftpack,c
  2841  001984  0E00               	movlw	0
  2842  001986  6E22               	movwf	?___ftpack+1,c
  2843  001988  0E00               	movlw	0
  2844  00198A  6E23               	movwf	?___ftpack+2,c
  2845  00198C  0012               	return	
  2846  00198E                     l2471:
  2847  00198E  2A24               	incf	___ftpack@exp,f,c
  2848  001990  90D8               	bcf	status,0,c
  2849  001992  3223               	rrcf	___ftpack@arg+2,f,c
  2850  001994  3222               	rrcf	___ftpack@arg+1,f,c
  2851  001996  3221               	rrcf	___ftpack@arg,f,c
  2852  001998                     l2473:
  2853  001998  0E00               	movlw	0
  2854  00199A  1421               	andwf	___ftpack@arg,w,c
  2855  00199C  6E26               	movwf	??___ftpack& (0+255),c
  2856  00199E  0E00               	movlw	0
  2857  0019A0  1422               	andwf	___ftpack@arg+1,w,c
  2858  0019A2  6E27               	movwf	(??___ftpack+1)& (0+255),c
  2859  0019A4  0EFE               	movlw	254
  2860  0019A6  1423               	andwf	___ftpack@arg+2,w,c
  2861  0019A8  6E28               	movwf	(??___ftpack+2)& (0+255),c
  2862  0019AA  5026               	movf	??___ftpack,w,c
  2863  0019AC  1027               	iorwf	??___ftpack+1,w,c
  2864  0019AE  1028               	iorwf	??___ftpack+2,w,c
  2865  0019B0  B4D8               	btfsc	status,2,c
  2866  0019B2  D00C               	goto	l2479
  2867  0019B4  D7EC               	goto	l2471
  2868  0019B6                     l2475:
  2869  0019B6  2A24               	incf	___ftpack@exp,f,c
  2870  0019B8  0E01               	movlw	1
  2871  0019BA  2621               	addwf	___ftpack@arg,f,c
  2872  0019BC  0E00               	movlw	0
  2873  0019BE  2222               	addwfc	___ftpack@arg+1,f,c
  2874  0019C0  0E00               	movlw	0
  2875  0019C2  2223               	addwfc	___ftpack@arg+2,f,c
  2876  0019C4  90D8               	bcf	status,0,c
  2877  0019C6  3223               	rrcf	___ftpack@arg+2,f,c
  2878  0019C8  3222               	rrcf	___ftpack@arg+1,f,c
  2879  0019CA  3221               	rrcf	___ftpack@arg,f,c
  2880  0019CC                     l2479:
  2881  0019CC  0E00               	movlw	0
  2882  0019CE  1421               	andwf	___ftpack@arg,w,c
  2883  0019D0  6E26               	movwf	??___ftpack& (0+255),c
  2884  0019D2  0E00               	movlw	0
  2885  0019D4  1422               	andwf	___ftpack@arg+1,w,c
  2886  0019D6  6E27               	movwf	(??___ftpack+1)& (0+255),c
  2887  0019D8  0EFF               	movlw	255
  2888  0019DA  1423               	andwf	___ftpack@arg+2,w,c
  2889  0019DC  6E28               	movwf	(??___ftpack+2)& (0+255),c
  2890  0019DE  5026               	movf	??___ftpack,w,c
  2891  0019E0  1027               	iorwf	??___ftpack+1,w,c
  2892  0019E2  1028               	iorwf	??___ftpack+2,w,c
  2893  0019E4  B4D8               	btfsc	status,2,c
  2894  0019E6  D006               	goto	l2483
  2895  0019E8  D7E6               	goto	l2475
  2896  0019EA                     l2481:
  2897  0019EA  0624               	decf	___ftpack@exp,f,c
  2898  0019EC  90D8               	bcf	status,0,c
  2899  0019EE  3621               	rlcf	___ftpack@arg,f,c
  2900  0019F0  3622               	rlcf	___ftpack@arg+1,f,c
  2901  0019F2  3623               	rlcf	___ftpack@arg+2,f,c
  2902  0019F4                     l2483:
  2903  0019F4  BE22               	btfsc	___ftpack@arg+1,7,c
  2904  0019F6  D003               	goto	l660
  2905  0019F8  0E02               	movlw	2
  2906  0019FA  6024               	cpfslt	___ftpack@exp,c
  2907  0019FC  D7F6               	goto	l2481
  2908  0019FE                     l660:
  2909  0019FE  A024               	btfss	___ftpack@exp,0,c
  2910  001A00  9E22               	bcf	___ftpack@arg+1,7,c
  2911  001A02  90D8               	bcf	status,0,c
  2912  001A04  3224               	rrcf	___ftpack@exp,f,c
  2913  001A06  5024               	movf	___ftpack@exp,w,c
  2914  001A08  1223               	iorwf	___ftpack@arg+2,f,c
  2915  001A0A  5025               	movf	___ftpack@sign,w,c
  2916  001A0C  A4D8               	btfss	status,2,c
  2917  001A0E  8E23               	bsf	___ftpack@arg+2,7,c
  2918  001A10  C021  F021         	movff	___ftpack@arg,?___ftpack
  2919  001A14  C022  F022         	movff	___ftpack@arg+1,?___ftpack+1
  2920  001A18  C023  F023         	movff	___ftpack@arg+2,?___ftpack+2
  2921  001A1C  0012               	return	
  2922  001A1E                     __end_of___ftpack:
  2923                           	opt stack 0
  2924                           tblptru	equ	0xFF8
  2925                           intcon	equ	0xFF2
  2926                           intcon3	equ	0xFF0
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           status	equ	0xFD8
  2930                           
  2931 ;; *************** function ___awmod *****************
  2932 ;; Defined at:
  2933 ;;		line 8 in file "/opt/microchip/xc8/v1.40/sources/common/awmod.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  dividend        2   32[COMRAM] int 
  2936 ;;  divisor         2   34[COMRAM] int 
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  sign            1   37[COMRAM] unsigned char 
  2939 ;;  counter         1   36[COMRAM] unsigned char 
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  2   32[COMRAM] int 
  2942 ;; Registers used:
  2943 ;;		wreg, status,2, status,0
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2949 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;Total ram usage:        6 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    7
  2956 ;; This function calls:
  2957 ;;		Nothing
  2958 ;; This function is called by:
  2959 ;;		_rotateContainers
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text13
  2964  001BD4                     __ptext13:
  2965                           	opt stack 0
  2966  001BD4                     ___awmod:
  2967                           	opt stack 22
  2968                           
  2969                           ;incstack = 0
  2970  001BD4  0E00               	movlw	0
  2971  001BD6  6E26               	movwf	___awmod@sign,c
  2972  001BD8  AE22               	btfss	___awmod@dividend+1,7,c
  2973  001BDA  D006               	goto	l2675
  2974  001BDC  6C21               	negf	___awmod@dividend,c
  2975  001BDE  1E22               	comf	___awmod@dividend+1,f,c
  2976  001BE0  B0D8               	btfsc	status,0,c
  2977  001BE2  2A22               	incf	___awmod@dividend+1,f,c
  2978  001BE4  0E01               	movlw	1
  2979  001BE6  6E26               	movwf	___awmod@sign,c
  2980  001BE8                     l2675:
  2981  001BE8  AE24               	btfss	___awmod@divisor+1,7,c
  2982  001BEA  D004               	goto	l2679
  2983  001BEC  6C23               	negf	___awmod@divisor,c
  2984  001BEE  1E24               	comf	___awmod@divisor+1,f,c
  2985  001BF0  B0D8               	btfsc	status,0,c
  2986  001BF2  2A24               	incf	___awmod@divisor+1,f,c
  2987  001BF4                     l2679:
  2988  001BF4  5023               	movf	___awmod@divisor,w,c
  2989  001BF6  1024               	iorwf	___awmod@divisor+1,w,c
  2990  001BF8  B4D8               	btfsc	status,2,c
  2991  001BFA  D018               	goto	l2695
  2992  001BFC  0E01               	movlw	1
  2993  001BFE  6E25               	movwf	___awmod@counter,c
  2994  001C00  D004               	goto	l2685
  2995  001C02                     l2683:
  2996  001C02  90D8               	bcf	status,0,c
  2997  001C04  3623               	rlcf	___awmod@divisor,f,c
  2998  001C06  3624               	rlcf	___awmod@divisor+1,f,c
  2999  001C08  2A25               	incf	___awmod@counter,f,c
  3000  001C0A                     l2685:
  3001  001C0A  AE24               	btfss	___awmod@divisor+1,7,c
  3002  001C0C  D7FA               	goto	l2683
  3003  001C0E                     l2687:
  3004  001C0E  5023               	movf	___awmod@divisor,w,c
  3005  001C10  5C21               	subwf	___awmod@dividend,w,c
  3006  001C12  5024               	movf	___awmod@divisor+1,w,c
  3007  001C14  5822               	subwfb	___awmod@dividend+1,w,c
  3008  001C16  A0D8               	btfss	status,0,c
  3009  001C18  D004               	goto	l2691
  3010  001C1A  5023               	movf	___awmod@divisor,w,c
  3011  001C1C  5E21               	subwf	___awmod@dividend,f,c
  3012  001C1E  5024               	movf	___awmod@divisor+1,w,c
  3013  001C20  5A22               	subwfb	___awmod@dividend+1,f,c
  3014  001C22                     l2691:
  3015  001C22  90D8               	bcf	status,0,c
  3016  001C24  3224               	rrcf	___awmod@divisor+1,f,c
  3017  001C26  3223               	rrcf	___awmod@divisor,f,c
  3018  001C28  2E25               	decfsz	___awmod@counter,f,c
  3019  001C2A  D7F1               	goto	l2687
  3020  001C2C                     l2695:
  3021  001C2C  5026               	movf	___awmod@sign,w,c
  3022  001C2E  B4D8               	btfsc	status,2,c
  3023  001C30  D004               	goto	l2699
  3024  001C32  6C21               	negf	___awmod@dividend,c
  3025  001C34  1E22               	comf	___awmod@dividend+1,f,c
  3026  001C36  B0D8               	btfsc	status,0,c
  3027  001C38  2A22               	incf	___awmod@dividend+1,f,c
  3028  001C3A                     l2699:
  3029  001C3A  C021  F021         	movff	___awmod@dividend,?___awmod
  3030  001C3E  C022  F022         	movff	___awmod@dividend+1,?___awmod+1
  3031  001C42  0012               	return	
  3032  001C44                     __end_of___awmod:
  3033                           	opt stack 0
  3034                           tblptru	equ	0xFF8
  3035                           intcon	equ	0xFF2
  3036                           intcon3	equ	0xFF0
  3037                           postinc0	equ	0xFEE
  3038                           wreg	equ	0xFE8
  3039                           status	equ	0xFD8
  3040                           
  3041 ;; *************** function _initLCD *****************
  3042 ;; Defined at:
  3043 ;;		line 10 in file "LCD.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;		None
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg, status,2, status,0, cstack
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;Total ram usage:        1 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    9
  3064 ;; This function calls:
  3065 ;;		_lcdInst
  3066 ;; This function is called by:
  3067 ;;		_main
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text14
  3072  001E7C                     __ptext14:
  3073                           	opt stack 0
  3074  001E7C                     _initLCD:
  3075                           	opt stack 21
  3076                           
  3077                           ;LCD.c: 11: _delay((unsigned long)((15)*(10000000/4000.0)));
  3078                           
  3079                           ;incstack = 0
  3080  001E7C  0E31               	movlw	49
  3081  001E7E  6E24               	movwf	??_initLCD& (0+255),c
  3082  001E80  0EB2               	movlw	178
  3083  001E82                     u2597:
  3084  001E82  2EE8               	decfsz	wreg,f,c
  3085  001E84  D7FE               	bra	u2597
  3086  001E86  2E24               	decfsz	??_initLCD& (0+255),f,c
  3087  001E88  D7FC               	bra	u2597
  3088  001E8A  D000               	nop2	
  3089                           
  3090                           ;LCD.c: 12: lcdInst(0b00110011);
  3091  001E8C  0E33               	movlw	51
  3092  001E8E  EC4B  F010         	call	_lcdInst
  3093                           
  3094                           ;LCD.c: 13: lcdInst(0b00110010);
  3095  001E92  0E32               	movlw	50
  3096  001E94  EC4B  F010         	call	_lcdInst
  3097                           
  3098                           ;LCD.c: 14: lcdInst(0b00101000);
  3099  001E98  0E28               	movlw	40
  3100  001E9A  EC4B  F010         	call	_lcdInst
  3101                           
  3102                           ;LCD.c: 15: lcdInst(0b00001111);
  3103  001E9E  0E0F               	movlw	15
  3104  001EA0  EC4B  F010         	call	_lcdInst
  3105                           
  3106                           ;LCD.c: 16: lcdInst(0b00000110);
  3107  001EA4  0E06               	movlw	6
  3108  001EA6  EC4B  F010         	call	_lcdInst
  3109                           
  3110                           ;LCD.c: 17: lcdInst(0b00000001);
  3111  001EAA  0E01               	movlw	1
  3112  001EAC  EC4B  F010         	call	_lcdInst
  3113                           
  3114                           ;LCD.c: 18: _delay((unsigned long)((15)*(10000000/4000.0)));
  3115  001EB0  0E31               	movlw	49
  3116  001EB2  6E24               	movwf	??_initLCD& (0+255),c
  3117  001EB4  0EB2               	movlw	178
  3118  001EB6                     u2607:
  3119  001EB6  2EE8               	decfsz	wreg,f,c
  3120  001EB8  D7FE               	bra	u2607
  3121  001EBA  2E24               	decfsz	??_initLCD& (0+255),f,c
  3122  001EBC  D7FC               	bra	u2607
  3123  001EBE  D000               	nop2	
  3124  001EC0  0012               	return		;funcret
  3125  001EC2                     __end_of_initLCD:
  3126                           	opt stack 0
  3127                           tblptru	equ	0xFF8
  3128                           intcon	equ	0xFF2
  3129                           intcon3	equ	0xFF0
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function _dispMainMenu *****************
  3135 ;; Defined at:
  3136 ;;		line 67 in file "LCD.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;		None
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;		None
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      void 
  3143 ;; Registers used:
  3144 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;Total ram usage:        0 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:   11
  3157 ;; This function calls:
  3158 ;;		_clearLCD
  3159 ;;		_lcdWrite
  3160 ;; This function is called by:
  3161 ;;		_main
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text15
  3166  001FB2                     __ptext15:
  3167                           	opt stack 0
  3168  001FB2                     _dispMainMenu:
  3169                           	opt stack 19
  3170                           
  3171                           ;LCD.c: 68: clearLCD();
  3172                           
  3173                           ;incstack = 0
  3174  001FB2  EC31  F010         	call	_clearLCD	;wreg free
  3175                           
  3176                           ;LCD.c: 69: lcdWrite("1:START 11:31:45", "2:LOGS  22/02/17");
  3177  001FB6  0E01               	movlw	low STR_1
  3178  001FB8  6E2A               	movwf	lcdWrite@string1,c
  3179  001FBA  0E10               	movlw	high STR_1
  3180  001FBC  6E2B               	movwf	lcdWrite@string1+1,c
  3181  001FBE  0E12               	movlw	low STR_2
  3182  001FC0  6E2C               	movwf	lcdWrite@string2,c
  3183  001FC2  0E10               	movlw	high STR_2
  3184  001FC4  6E2D               	movwf	lcdWrite@string2+1,c
  3185  001FC6  EC94  F00F         	call	_lcdWrite	;wreg free
  3186  001FCA  0012               	return		;funcret
  3187  001FCC                     __end_of_dispMainMenu:
  3188                           	opt stack 0
  3189                           tblptru	equ	0xFF8
  3190                           intcon	equ	0xFF2
  3191                           intcon3	equ	0xFF0
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           status	equ	0xFD8
  3195                           
  3196 ;; *************** function _lcdWrite *****************
  3197 ;; Defined at:
  3198 ;;		line 54 in file "LCD.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  string1         2   41[COMRAM] PTR unsigned char 
  3201 ;;		 -> STR_9(16), STR_7(17), STR_5(17), STR_3(11), 
  3202 ;;		 -> STR_1(17), 
  3203 ;;  string2         2   43[COMRAM] PTR unsigned char 
  3204 ;;		 -> STR_10(1), STR_8(11), STR_6(12), STR_4(5), 
  3205 ;;		 -> STR_2(17), 
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;		None
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  1    wreg      void 
  3210 ;; Registers used:
  3211 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;Total ram usage:        4 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:   10
  3224 ;; This function calls:
  3225 ;;		_clearLCD
  3226 ;;		_lcdInst
  3227 ;;		_printf
  3228 ;; This function is called by:
  3229 ;;		_dispMainMenu
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           	psect	text16
  3234  001F28                     __ptext16:
  3235                           	opt stack 0
  3236  001F28                     _lcdWrite:
  3237                           	opt stack 19
  3238                           
  3239                           ;LCD.c: 55: clearLCD();
  3240                           
  3241                           ;incstack = 0
  3242  001F28  EC31  F010         	call	_clearLCD	;wreg free
  3243                           
  3244                           ;LCD.c: 56: printf(string1);
  3245  001F2C  C02A  F024         	movff	lcdWrite@string1,printf@f
  3246  001F30  C02B  F025         	movff	lcdWrite@string1+1,printf@f+1
  3247  001F34  EC8A  F00E         	call	_printf	;wreg free
  3248                           
  3249                           ;LCD.c: 57: lcdInst(0b11000000);
  3250  001F38  0EC0               	movlw	192
  3251  001F3A  EC4B  F010         	call	_lcdInst
  3252                           
  3253                           ;LCD.c: 58: printf(string2);
  3254  001F3E  C02C  F024         	movff	lcdWrite@string2,printf@f
  3255  001F42  C02D  F025         	movff	lcdWrite@string2+1,printf@f+1
  3256  001F46  EC8A  F00E         	call	_printf	;wreg free
  3257                           
  3258                           ;LCD.c: 59: lcdInst(0b1100);
  3259  001F4A  0E0C               	movlw	12
  3260  001F4C  EC4B  F010         	call	_lcdInst
  3261  001F50  0012               	return		;funcret
  3262  001F52                     __end_of_lcdWrite:
  3263                           	opt stack 0
  3264                           tblptru	equ	0xFF8
  3265                           intcon	equ	0xFF2
  3266                           intcon3	equ	0xFF0
  3267                           postinc0	equ	0xFEE
  3268                           wreg	equ	0xFE8
  3269                           status	equ	0xFD8
  3270                           
  3271 ;; *************** function _printf *****************
  3272 ;; Defined at:
  3273 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;  f               2   35[COMRAM] PTR const unsigned char 
  3276 ;;		 -> STR_10(1), STR_9(16), STR_8(11), STR_7(17), 
  3277 ;;		 -> STR_6(12), STR_5(17), STR_4(5), STR_3(11), 
  3278 ;;		 -> STR_2(17), STR_1(17), 
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  tmpval          4    0        struct .
  3281 ;;  cp              3    0        PTR const unsigned char 
  3282 ;;  ap              2   37[COMRAM] PTR void [1]
  3283 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3284 ;;  len             2    0        unsigned int 
  3285 ;;  val             2    0        unsigned int 
  3286 ;;  c               1   40[COMRAM] char 
  3287 ;;  flag            1   39[COMRAM] unsigned char 
  3288 ;;  prec            1    0        char 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  2   35[COMRAM] int 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3299 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;Total ram usage:        6 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    9
  3305 ;; This function calls:
  3306 ;;		_putch
  3307 ;; This function is called by:
  3308 ;;		_lcdWrite
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text17
  3313  001D14                     __ptext17:
  3314                           	opt stack 0
  3315  001D14                     _printf:
  3316                           	opt stack 19
  3317                           
  3318                           ;doprnt.c: 466: va_list ap;
  3319                           ;doprnt.c: 499: signed char c;
  3320                           ;doprnt.c: 506: signed char prec;
  3321                           ;doprnt.c: 508: unsigned char flag;
  3322                           ;doprnt.c: 523: union {
  3323                           ;doprnt.c: 524: unsigned long vd;
  3324                           ;doprnt.c: 525: double integ;
  3325                           ;doprnt.c: 526: } tmpval;
  3326                           ;doprnt.c: 528: unsigned int val;
  3327                           ;doprnt.c: 529: unsigned len;
  3328                           ;doprnt.c: 530: const char * cp;
  3329                           ;doprnt.c: 533: *ap = __va_start();
  3330                           
  3331                           ;incstack = 0
  3332  001D14  0E26               	movlw	low (?_printf+2)
  3333  001D16  6E26               	movwf	printf@ap,c
  3334  001D18  0E00               	movlw	high (?_printf+2)
  3335  001D1A  6E27               	movwf	printf@ap+1,c
  3336                           
  3337                           ;doprnt.c: 536: while(c = *f++) {
  3338  001D1C  D01D               	goto	l1897
  3339  001D1E                     l1885:
  3340                           
  3341                           ;doprnt.c: 538: if(c != '%')
  3342  001D1E  0E25               	movlw	37
  3343  001D20  1829               	xorwf	printf@c,w,c
  3344  001D22  B4D8               	btfsc	status,2,c
  3345  001D24  D004               	goto	l1889
  3346                           
  3347                           ;doprnt.c: 540: {
  3348                           ;doprnt.c: 541: (putch(c) );
  3349  001D26  5029               	movf	printf@c,w,c
  3350  001D28  EC45  F010         	call	_putch
  3351                           
  3352                           ;doprnt.c: 542: continue;
  3353  001D2C  D015               	goto	l1897
  3354  001D2E                     l1889:
  3355                           
  3356                           ;doprnt.c: 543: }
  3357                           ;doprnt.c: 548: flag = 0;
  3358  001D2E  0E00               	movlw	0
  3359  001D30  6E28               	movwf	printf@flag,c
  3360                           
  3361                           ;doprnt.c: 635: switch(c = *f++) {
  3362  001D32  D004               	goto	l1895
  3363  001D34                     l1891:
  3364                           
  3365                           ;doprnt.c: 809: (putch(c) );
  3366  001D34  5029               	movf	printf@c,w,c
  3367  001D36  EC45  F010         	call	_putch
  3368                           
  3369                           ;doprnt.c: 822: }
  3370                           
  3371                           ;doprnt.c: 810: continue;
  3372  001D3A  D00E               	goto	l1897
  3373  001D3C                     l1895:
  3374  001D3C  C024  FFF6         	movff	printf@f,tblptrl
  3375  001D40  C025  FFF7         	movff	printf@f+1,tblptrh
  3376  001D44  4A24               	infsnz	printf@f,f,c
  3377  001D46  2A25               	incf	printf@f+1,f,c
  3378  001D48                     	if	0	;tblptru may be non-zero
  3379  001D48                     	endif
  3380  001D48                     	if	0	;tblptru may be non-zero
  3381  001D48                     	endif
  3382  001D48  0008               	tblrd		*
  3383  001D4A  CFF5 F029          	movff	tablat,printf@c
  3384  001D4E  5029               	movf	printf@c,w,c
  3385                           
  3386                           ; Switch size 1, requested type "space"
  3387                           ; Number of cases is 1, Range of values is 0 to 0
  3388                           ; switch strategies available:
  3389                           ; Name         Instructions Cycles
  3390                           ; simple_byte            4     3 (average)
  3391                           ;	Chosen strategy is simple_byte
  3392  001D50  0A00               	xorlw	0	; case 0
  3393  001D52  B4D8               	btfsc	status,2,c
  3394  001D54  0012               	return	
  3395  001D56  D7EE               	goto	l1891
  3396  001D58                     l1897:
  3397  001D58  C024  FFF6         	movff	printf@f,tblptrl
  3398  001D5C  C025  FFF7         	movff	printf@f+1,tblptrh
  3399  001D60  4A24               	infsnz	printf@f,f,c
  3400  001D62  2A25               	incf	printf@f+1,f,c
  3401  001D64                     	if	0	;tblptru may be non-zero
  3402  001D64                     	endif
  3403  001D64                     	if	0	;tblptru may be non-zero
  3404  001D64                     	endif
  3405  001D64  0008               	tblrd		*
  3406  001D66  CFF5 F029          	movff	tablat,printf@c
  3407  001D6A  5029               	movf	printf@c,w,c
  3408  001D6C  B4D8               	btfsc	status,2,c
  3409  001D6E  0012               	return	
  3410  001D70  D7D6               	goto	l1885
  3411  001D72                     __end_of_printf:
  3412                           	opt stack 0
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           intcon	equ	0xFF2
  3418                           intcon3	equ	0xFF0
  3419                           postinc0	equ	0xFEE
  3420                           wreg	equ	0xFE8
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function _putch *****************
  3424 ;; Defined at:
  3425 ;;		line 26 in file "LCD.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  data            1    wreg     unsigned char 
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  data            1   34[COMRAM] unsigned char 
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg, status,2, status,0, cstack
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;Total ram usage:        1 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    8
  3446 ;; This function calls:
  3447 ;;		_lcdNibble
  3448 ;; This function is called by:
  3449 ;;		_printf
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           	psect	text18
  3454  00208A                     __ptext18:
  3455                           	opt stack 0
  3456  00208A                     _putch:
  3457                           	opt stack 19
  3458                           
  3459                           ;incstack = 0
  3460                           ;putch@data stored from wreg
  3461  00208A  6E23               	movwf	putch@data,c
  3462                           
  3463                           ;LCD.c: 27: LATDbits.LATD2 = 1;
  3464  00208C  848C               	bsf	3980,2,c	;volatile
  3465                           
  3466                           ;LCD.c: 28: lcdNibble(data);
  3467  00208E  5023               	movf	putch@data,w,c
  3468  002090  ECE8  F00E         	call	_lcdNibble
  3469  002094  0012               	return		;funcret
  3470  002096                     __end_of_putch:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           intcon	equ	0xFF2
  3477                           intcon3	equ	0xFF0
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           status	equ	0xFD8
  3481                           
  3482 ;; *************** function _clearLCD *****************
  3483 ;; Defined at:
  3484 ;;		line 62 in file "LCD.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;		None
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;		None
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  1    wreg      void 
  3491 ;; Registers used:
  3492 ;;		wreg, status,2, status,0, cstack
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;Total ram usage:        0 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; Hardware stack levels required when called:    9
  3505 ;; This function calls:
  3506 ;;		_lcdInst
  3507 ;; This function is called by:
  3508 ;;		_lcdWrite
  3509 ;;		_dispMainMenu
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           	psect	text19
  3514  002062                     __ptext19:
  3515                           	opt stack 0
  3516  002062                     _clearLCD:
  3517                           	opt stack 19
  3518                           
  3519                           ;LCD.c: 63: lcdInst(0b01);
  3520                           
  3521                           ;incstack = 0
  3522  002062  0E01               	movlw	1
  3523  002064  EC4B  F010         	call	_lcdInst
  3524                           
  3525                           ;LCD.c: 64: lcdInst(0x10);
  3526  002068  0E10               	movlw	16
  3527  00206A  EC4B  F010         	call	_lcdInst
  3528  00206E  0012               	return		;funcret
  3529  002070                     __end_of_clearLCD:
  3530                           	opt stack 0
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           intcon	equ	0xFF2
  3536                           intcon3	equ	0xFF0
  3537                           postinc0	equ	0xFEE
  3538                           wreg	equ	0xFE8
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function _lcdInst *****************
  3542 ;; Defined at:
  3543 ;;		line 21 in file "LCD.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  data            1    wreg     unsigned char 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;  data            1   34[COMRAM] unsigned char 
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  1    wreg      void 
  3550 ;; Registers used:
  3551 ;;		wreg, status,2, status,0, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;Total ram usage:        1 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    8
  3564 ;; This function calls:
  3565 ;;		_lcdNibble
  3566 ;; This function is called by:
  3567 ;;		_initLCD
  3568 ;;		_lcdWrite
  3569 ;;		_clearLCD
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text20
  3574  002096                     __ptext20:
  3575                           	opt stack 0
  3576  002096                     _lcdInst:
  3577                           	opt stack 21
  3578                           
  3579                           ;incstack = 0
  3580                           ;lcdInst@data stored from wreg
  3581  002096  6E23               	movwf	lcdInst@data,c
  3582                           
  3583                           ;LCD.c: 22: LATDbits.LATD2 = 0;
  3584  002098  948C               	bcf	3980,2,c	;volatile
  3585                           
  3586                           ;LCD.c: 23: lcdNibble(data);
  3587  00209A  5023               	movf	lcdInst@data,w,c
  3588  00209C  ECE8  F00E         	call	_lcdNibble
  3589  0020A0  0012               	return		;funcret
  3590  0020A2                     __end_of_lcdInst:
  3591                           	opt stack 0
  3592                           tblptru	equ	0xFF8
  3593                           tblptrh	equ	0xFF7
  3594                           tblptrl	equ	0xFF6
  3595                           tablat	equ	0xFF5
  3596                           intcon	equ	0xFF2
  3597                           intcon3	equ	0xFF0
  3598                           postinc0	equ	0xFEE
  3599                           wreg	equ	0xFE8
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function _lcdNibble *****************
  3603 ;; Defined at:
  3604 ;;		line 31 in file "LCD.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  data            1    wreg     unsigned char 
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  data            1   33[COMRAM] unsigned char 
  3609 ;;  temp            1   32[COMRAM] unsigned char 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      void 
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;Total ram usage:        2 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    7
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_lcdInst
  3630 ;;		_putch
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text21
  3635  001DD0                     __ptext21:
  3636                           	opt stack 0
  3637  001DD0                     _lcdNibble:
  3638                           	opt stack 21
  3639                           
  3640                           ;incstack = 0
  3641                           ;lcdNibble@data stored from wreg
  3642  001DD0  6E22               	movwf	lcdNibble@data,c
  3643                           
  3644                           ;LCD.c: 33: char temp = data & 0xF0;
  3645  001DD2  5022               	movf	lcdNibble@data,w,c
  3646  001DD4  0BF0               	andlw	240
  3647  001DD6  6E21               	movwf	lcdNibble@temp,c
  3648                           
  3649                           ;LCD.c: 34: LATD = LATD & 0x0F;
  3650  001DD8  508C               	movf	3980,w,c	;volatile
  3651  001DDA  0B0F               	andlw	15
  3652  001DDC  6E8C               	movwf	3980,c	;volatile
  3653                           
  3654                           ;LCD.c: 35: LATD = temp | LATD;
  3655  001DDE  5021               	movf	lcdNibble@temp,w,c
  3656  001DE0  108C               	iorwf	3980,w,c	;volatile
  3657  001DE2  6E8C               	movwf	3980,c	;volatile
  3658                           
  3659                           ;LCD.c: 37: LATDbits.LATD3 = 0;
  3660  001DE4  968C               	bcf	3980,3,c	;volatile
  3661                           
  3662                           ;LCD.c: 38: _delay((unsigned long)((25)*(10000000/4000000.0)));
  3663  001DE6  0E14               	movlw	20
  3664  001DE8                     u2617:
  3665  001DE8  2EE8               	decfsz	wreg,f,c
  3666  001DEA  D7FE               	bra	u2617
  3667  001DEC  D000               	nop2	
  3668                           
  3669                           ;LCD.c: 39: LATDbits.LATD3 = 1;
  3670  001DEE  868C               	bsf	3980,3,c	;volatile
  3671                           
  3672                           ;LCD.c: 40: _delay((unsigned long)((25)*(10000000/4000000.0)));
  3673  001DF0  0E14               	movlw	20
  3674  001DF2                     u2627:
  3675  001DF2  2EE8               	decfsz	wreg,f,c
  3676  001DF4  D7FE               	bra	u2627
  3677  001DF6  D000               	nop2	
  3678                           
  3679                           ;LCD.c: 42: data = data << 4;
  3680  001DF8  3822               	swapf	lcdNibble@data,w,c
  3681  001DFA  0BF0               	andlw	240
  3682  001DFC  6E22               	movwf	lcdNibble@data,c
  3683                           
  3684                           ;LCD.c: 44: temp = data & 0xF0;
  3685  001DFE  5022               	movf	lcdNibble@data,w,c
  3686  001E00  0BF0               	andlw	240
  3687  001E02  6E21               	movwf	lcdNibble@temp,c
  3688                           
  3689                           ;LCD.c: 45: LATD = LATD & 0x0F;
  3690  001E04  508C               	movf	3980,w,c	;volatile
  3691  001E06  0B0F               	andlw	15
  3692  001E08  6E8C               	movwf	3980,c	;volatile
  3693                           
  3694                           ;LCD.c: 46: LATD = temp | LATD;
  3695  001E0A  5021               	movf	lcdNibble@temp,w,c
  3696  001E0C  108C               	iorwf	3980,w,c	;volatile
  3697  001E0E  6E8C               	movwf	3980,c	;volatile
  3698                           
  3699                           ;LCD.c: 48: LATDbits.LATD3 = 0;
  3700  001E10  968C               	bcf	3980,3,c	;volatile
  3701                           
  3702                           ;LCD.c: 49: _delay((unsigned long)((25)*(10000000/4000000.0)));
  3703  001E12  0E14               	movlw	20
  3704  001E14                     u2637:
  3705  001E14  2EE8               	decfsz	wreg,f,c
  3706  001E16  D7FE               	bra	u2637
  3707  001E18  D000               	nop2	
  3708                           
  3709                           ;LCD.c: 50: LATDbits.LATD3 = 1;
  3710  001E1A  868C               	bsf	3980,3,c	;volatile
  3711                           
  3712                           ;LCD.c: 51: _delay((unsigned long)((25)*(10000000/4000000.0)));
  3713  001E1C  0E14               	movlw	20
  3714  001E1E                     u2647:
  3715  001E1E  2EE8               	decfsz	wreg,f,c
  3716  001E20  D7FE               	bra	u2647
  3717  001E22  D000               	nop2	
  3718  001E24  0012               	return		;funcret
  3719  001E26                     __end_of_lcdNibble:
  3720                           	opt stack 0
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           intcon	equ	0xFF2
  3726                           intcon3	equ	0xFF0
  3727                           postinc0	equ	0xFEE
  3728                           wreg	equ	0xFE8
  3729                           status	equ	0xFD8
  3730                           
  3731 ;; *************** function _detectBottle *****************
  3732 ;; Defined at:
  3733 ;;		line 85 in file "controlSensors.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;		None
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  noCap           2   37[COMRAM] int 
  3738 ;;  transparent     2   35[COMRAM] int 
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  1    wreg      void 
  3741 ;; Registers used:
  3742 ;;		wreg, status,2, status,0, cstack
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;Total ram usage:        4 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    8
  3755 ;; This function calls:
  3756 ;;		_getDistance
  3757 ;;		_laserDetected
  3758 ;; This function is called by:
  3759 ;;		_main
  3760 ;; This function uses a non-reentrant model
  3761 ;;
  3762                           
  3763                           	psect	text22
  3764  0018B8                     __ptext22:
  3765                           	opt stack 0
  3766  0018B8                     _detectBottle:
  3767                           	opt stack 22
  3768                           
  3769                           ;controlSensors.c: 86: int noCap = 0;
  3770                           
  3771                           ;incstack = 0
  3772  0018B8  0E00               	movlw	0
  3773  0018BA  6E27               	movwf	detectBottle@noCap+1,c
  3774  0018BC  0E00               	movlw	0
  3775  0018BE  6E26               	movwf	detectBottle@noCap,c
  3776                           
  3777                           ;controlSensors.c: 87: int transparent = laserDetected();
  3778  0018C0  EC27  F010         	call	_laserDetected	;wreg free
  3779  0018C4  C021  F024         	movff	?_laserDetected,detectBottle@transparent
  3780  0018C8  C022  F025         	movff	?_laserDetected+1,detectBottle@transparent+1
  3781                           
  3782                           ;controlSensors.c: 88: if (getDistance(19) > 0 || getDistance(20) > 0){
  3783  0018CC  0E00               	movlw	0
  3784  0018CE  6E22               	movwf	getDistance@ULTRASONIC_SENSOR+1,c
  3785  0018D0  0E13               	movlw	19
  3786  0018D2  6E21               	movwf	getDistance@ULTRASONIC_SENSOR,c
  3787  0018D4  EC22  F00E         	call	_getDistance	;wreg free
  3788  0018D8  BE22               	btfsc	?_getDistance+1,7,c
  3789  0018DA  D005               	goto	l2265
  3790  0018DC  5022               	movf	?_getDistance+1,w,c
  3791  0018DE  E110               	bnz	l2267
  3792  0018E0  0421               	decf	?_getDistance,w,c
  3793  0018E2  B0D8               	btfsc	status,0,c
  3794  0018E4  D00D               	goto	l2267
  3795  0018E6                     l2265:
  3796  0018E6  0E00               	movlw	0
  3797  0018E8  6E22               	movwf	getDistance@ULTRASONIC_SENSOR+1,c
  3798  0018EA  0E14               	movlw	20
  3799  0018EC  6E21               	movwf	getDistance@ULTRASONIC_SENSOR,c
  3800  0018EE  EC22  F00E         	call	_getDistance	;wreg free
  3801  0018F2  BE22               	btfsc	?_getDistance+1,7,c
  3802  0018F4  D009               	goto	l2269
  3803  0018F6  5022               	movf	?_getDistance+1,w,c
  3804  0018F8  E103               	bnz	l2267
  3805  0018FA  0421               	decf	?_getDistance,w,c
  3806  0018FC  A0D8               	btfss	status,0,c
  3807  0018FE  D004               	goto	l2269
  3808  001900                     l2267:
  3809                           
  3810                           ;controlSensors.c: 89: noCap = 1;
  3811  001900  0E00               	movlw	0
  3812  001902  6E27               	movwf	detectBottle@noCap+1,c
  3813  001904  0E01               	movlw	1
  3814  001906  6E26               	movwf	detectBottle@noCap,c
  3815  001908                     l2269:
  3816                           
  3817                           ;controlSensors.c: 90: }
  3818                           ;controlSensors.c: 91: if (transparent && noCap){
  3819  001908  5024               	movf	detectBottle@transparent,w,c
  3820  00190A  1025               	iorwf	detectBottle@transparent+1,w,c
  3821  00190C  B4D8               	btfsc	status,2,c
  3822  00190E  D009               	goto	l2275
  3823  001910  5026               	movf	detectBottle@noCap,w,c
  3824  001912  1027               	iorwf	detectBottle@noCap+1,w,c
  3825  001914  B4D8               	btfsc	status,2,c
  3826  001916  D005               	goto	l2275
  3827                           
  3828                           ;controlSensors.c: 92: detectedBottle = 15;
  3829  001918  0E00               	movlw	0
  3830  00191A  6E48               	movwf	_detectedBottle+1,c
  3831  00191C  0E0F               	movlw	15
  3832  00191E  6E47               	movwf	_detectedBottle,c
  3833                           
  3834                           ;controlSensors.c: 93: }
  3835  001920  0012               	return	
  3836  001922                     l2275:
  3837                           
  3838                           ;controlSensors.c: 94: else if (transparent && !noCap){
  3839  001922  5024               	movf	detectBottle@transparent,w,c
  3840  001924  1025               	iorwf	detectBottle@transparent+1,w,c
  3841  001926  B4D8               	btfsc	status,2,c
  3842  001928  D009               	goto	l2281
  3843  00192A  5026               	movf	detectBottle@noCap,w,c
  3844  00192C  1027               	iorwf	detectBottle@noCap+1,w,c
  3845  00192E  A4D8               	btfss	status,2,c
  3846  001930  D005               	goto	l2281
  3847                           
  3848                           ;controlSensors.c: 95: detectedBottle = 14;
  3849  001932  0E00               	movlw	0
  3850  001934  6E48               	movwf	_detectedBottle+1,c
  3851  001936  0E0E               	movlw	14
  3852  001938  6E47               	movwf	_detectedBottle,c
  3853                           
  3854                           ;controlSensors.c: 96: }
  3855  00193A  0012               	return	
  3856  00193C                     l2281:
  3857                           
  3858                           ;controlSensors.c: 97: else if (!transparent && noCap){
  3859  00193C  5024               	movf	detectBottle@transparent,w,c
  3860  00193E  1025               	iorwf	detectBottle@transparent+1,w,c
  3861  001940  A4D8               	btfss	status,2,c
  3862  001942  D009               	goto	l2287
  3863  001944  5026               	movf	detectBottle@noCap,w,c
  3864  001946  1027               	iorwf	detectBottle@noCap+1,w,c
  3865  001948  B4D8               	btfsc	status,2,c
  3866  00194A  D005               	goto	l2287
  3867                           
  3868                           ;controlSensors.c: 98: detectedBottle = 17;
  3869  00194C  0E00               	movlw	0
  3870  00194E  6E48               	movwf	_detectedBottle+1,c
  3871  001950  0E11               	movlw	17
  3872  001952  6E47               	movwf	_detectedBottle,c
  3873                           
  3874                           ;controlSensors.c: 99: }
  3875  001954  0012               	return	
  3876  001956                     l2287:
  3877                           
  3878                           ;controlSensors.c: 100: else if (!transparent && !noCap){
  3879  001956  5024               	movf	detectBottle@transparent,w,c
  3880  001958  1025               	iorwf	detectBottle@transparent+1,w,c
  3881  00195A  A4D8               	btfss	status,2,c
  3882  00195C  0012               	return	
  3883  00195E  5026               	movf	detectBottle@noCap,w,c
  3884  001960  1027               	iorwf	detectBottle@noCap+1,w,c
  3885  001962  A4D8               	btfss	status,2,c
  3886  001964  0012               	return	
  3887                           
  3888                           ;controlSensors.c: 101: detectedBottle = 16;
  3889  001966  0E00               	movlw	0
  3890  001968  6E48               	movwf	_detectedBottle+1,c
  3891  00196A  0E10               	movlw	16
  3892  00196C  6E47               	movwf	_detectedBottle,c
  3893  00196E  0012               	return	
  3894  001970                     __end_of_detectBottle:
  3895                           	opt stack 0
  3896                           tblptru	equ	0xFF8
  3897                           tblptrh	equ	0xFF7
  3898                           tblptrl	equ	0xFF6
  3899                           tablat	equ	0xFF5
  3900                           intcon	equ	0xFF2
  3901                           intcon3	equ	0xFF0
  3902                           postinc0	equ	0xFEE
  3903                           wreg	equ	0xFE8
  3904                           status	equ	0xFD8
  3905                           
  3906 ;; *************** function _laserDetected *****************
  3907 ;; Defined at:
  3908 ;;		line 65 in file "controlSensors.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;		None
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;		None
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  2   32[COMRAM] int 
  3915 ;; Registers used:
  3916 ;;		wreg, status,2
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3924 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3925 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;Total ram usage:        3 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:    7
  3929 ;; This function calls:
  3930 ;;		Nothing
  3931 ;; This function is called by:
  3932 ;;		_detectBottle
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           	psect	text23
  3937  00204E                     __ptext23:
  3938                           	opt stack 0
  3939  00204E                     _laserDetected:
  3940                           	opt stack 22
  3941                           
  3942                           ;controlSensors.c: 66: return LATCbits.LC1;
  3943                           
  3944                           ;incstack = 0
  3945  00204E  A28B               	btfss	3979,1,c	;volatile
  3946  002050  D003               	goto	u1500
  3947  002052  6A23               	clrf	??_laserDetected& (0+255),c
  3948  002054  2A23               	incf	??_laserDetected& (0+255),f,c
  3949  002056  D001               	goto	u1508
  3950  002058                     u1500:
  3951  002058  6A23               	clrf	??_laserDetected& (0+255),c
  3952  00205A                     u1508:
  3953  00205A  5023               	movf	??_laserDetected,w,c
  3954  00205C  6E21               	movwf	?_laserDetected,c
  3955  00205E  6A22               	clrf	?_laserDetected+1,c
  3956  002060  0012               	return	
  3957  002062                     __end_of_laserDetected:
  3958                           	opt stack 0
  3959                           tblptru	equ	0xFF8
  3960                           tblptrh	equ	0xFF7
  3961                           tblptrl	equ	0xFF6
  3962                           tablat	equ	0xFF5
  3963                           intcon	equ	0xFF2
  3964                           intcon3	equ	0xFF0
  3965                           postinc0	equ	0xFEE
  3966                           wreg	equ	0xFE8
  3967                           status	equ	0xFD8
  3968                           
  3969 ;; *************** function _bottleComing *****************
  3970 ;; Defined at:
  3971 ;;		line 73 in file "controlSensors.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  2   34[COMRAM] int 
  3978 ;; Registers used:
  3979 ;;		wreg, status,2, status,0, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3985 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;Total ram usage:        2 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    8
  3992 ;; This function calls:
  3993 ;;		_getDistance
  3994 ;; This function is called by:
  3995 ;;		_main
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text24
  4000  001EFA                     __ptext24:
  4001                           	opt stack 0
  4002  001EFA                     _bottleComing:
  4003                           	opt stack 22
  4004                           
  4005                           ;controlSensors.c: 74: if (getDistance(19) > 0){
  4006                           
  4007                           ;incstack = 0
  4008  001EFA  0E00               	movlw	0
  4009  001EFC  6E22               	movwf	getDistance@ULTRASONIC_SENSOR+1,c
  4010  001EFE  0E13               	movlw	19
  4011  001F00  6E21               	movwf	getDistance@ULTRASONIC_SENSOR,c
  4012  001F02  EC22  F00E         	call	_getDistance	;wreg free
  4013  001F06  BE22               	btfsc	?_getDistance+1,7,c
  4014  001F08  D00A               	goto	l2223
  4015  001F0A  5022               	movf	?_getDistance+1,w,c
  4016  001F0C  E103               	bnz	u1660
  4017  001F0E  0421               	decf	?_getDistance,w,c
  4018  001F10  A0D8               	btfss	status,0,c
  4019  001F12  D005               	goto	l2223
  4020  001F14                     u1660:
  4021                           
  4022                           ;controlSensors.c: 75: return 1;
  4023  001F14  0E00               	movlw	0
  4024  001F16  6E24               	movwf	?_bottleComing+1,c
  4025  001F18  0E01               	movlw	1
  4026  001F1A  6E23               	movwf	?_bottleComing,c
  4027                           
  4028                           ;controlSensors.c: 76: }
  4029  001F1C  0012               	return	
  4030  001F1E                     l2223:
  4031                           
  4032                           ;controlSensors.c: 77: else{
  4033                           ;controlSensors.c: 78: return 0;
  4034  001F1E  0E00               	movlw	0
  4035  001F20  6E24               	movwf	?_bottleComing+1,c
  4036  001F22  0E00               	movlw	0
  4037  001F24  6E23               	movwf	?_bottleComing,c
  4038  001F26  0012               	return	
  4039  001F28                     __end_of_bottleComing:
  4040                           	opt stack 0
  4041                           tblptru	equ	0xFF8
  4042                           tblptrh	equ	0xFF7
  4043                           tblptrl	equ	0xFF6
  4044                           tablat	equ	0xFF5
  4045                           intcon	equ	0xFF2
  4046                           intcon3	equ	0xFF0
  4047                           postinc0	equ	0xFEE
  4048                           wreg	equ	0xFE8
  4049                           status	equ	0xFD8
  4050                           
  4051 ;; *************** function _getDistance *****************
  4052 ;; Defined at:
  4053 ;;		line 10 in file "controlSensors.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;  ULTRASONIC_S    2   32[COMRAM] int 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;		None
  4058 ;; Return value:  Size  Location     Type
  4059 ;;                  2   32[COMRAM] int 
  4060 ;; Registers used:
  4061 ;;		wreg, status,2, status,0
  4062 ;; Tracked objects:
  4063 ;;		On entry : 0/0
  4064 ;;		On exit  : 0/0
  4065 ;;		Unchanged: 0/0
  4066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4067 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4071 ;;Total ram usage:        2 bytes
  4072 ;; Hardware stack levels used:    1
  4073 ;; Hardware stack levels required when called:    7
  4074 ;; This function calls:
  4075 ;;		Nothing
  4076 ;; This function is called by:
  4077 ;;		_bottleComing
  4078 ;;		_detectBottle
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text25
  4083  001C44                     __ptext25:
  4084                           	opt stack 0
  4085  001C44                     _getDistance:
  4086                           	opt stack 22
  4087                           
  4088                           ;controlSensors.c: 11: if (ULTRASONIC_SENSOR == 18){
  4089                           
  4090                           ;incstack = 0
  4091  001C44  0E12               	movlw	18
  4092  001C46  1821               	xorwf	getDistance@ULTRASONIC_SENSOR,w,c
  4093  001C48  1022               	iorwf	getDistance@ULTRASONIC_SENSOR+1,w,c
  4094  001C4A  A4D8               	btfss	status,2,c
  4095  001C4C  D00D               	goto	l2107
  4096                           
  4097                           ;controlSensors.c: 12: LATCbits.LC2 = 0;
  4098  001C4E  948B               	bcf	3979,2,c	;volatile
  4099                           
  4100                           ;controlSensors.c: 13: _delay((unsigned long)((0.0001*2)*(10000000/4000.0)));
  4101                           ;controlSensors.c: 14: LATCbits.LC2 = 1;
  4102  001C50  848B               	bsf	3979,2,c	;volatile
  4103                           
  4104                           ;controlSensors.c: 15: _delay((unsigned long)((0.0001*10)*(10000000/4000.0)));
  4105  001C52  D000               	nop2		;2 cycle nop
  4106                           
  4107                           ;controlSensors.c: 16: LATCbits.LC2=0;
  4108  001C54  948B               	bcf	3979,2,c	;volatile
  4109  001C56                     l372:
  4110  001C56  A68B               	btfss	3979,3,c	;volatile
  4111  001C58  D7FE               	goto	l372
  4112  001C5A                     l375:
  4113  001C5A  B68B               	btfsc	3979,3,c	;volatile
  4114  001C5C  D7FE               	goto	l375
  4115                           
  4116                           ;controlSensors.c: 22: }
  4117                           ;controlSensors.c: 23: return 0;
  4118  001C5E  0E00               	movlw	0
  4119  001C60  6E22               	movwf	?_getDistance+1,c
  4120  001C62  0E00               	movlw	0
  4121  001C64  6E21               	movwf	?_getDistance,c
  4122  001C66  0012               	return	
  4123  001C68                     l2107:
  4124                           
  4125                           ;controlSensors.c: 24: }
  4126                           ;controlSensors.c: 25: if (ULTRASONIC_SENSOR == 19){
  4127  001C68  0E13               	movlw	19
  4128  001C6A  1821               	xorwf	getDistance@ULTRASONIC_SENSOR,w,c
  4129  001C6C  1022               	iorwf	getDistance@ULTRASONIC_SENSOR+1,w,c
  4130  001C6E  A4D8               	btfss	status,2,c
  4131  001C70  D00D               	goto	l2115
  4132                           
  4133                           ;controlSensors.c: 26: LATCbits.LC4 = 0;
  4134  001C72  988B               	bcf	3979,4,c	;volatile
  4135                           
  4136                           ;controlSensors.c: 27: _delay((unsigned long)((0.0001*2)*(10000000/4000.0)));
  4137                           ;controlSensors.c: 28: LATCbits.LC4 = 1;
  4138  001C74  888B               	bsf	3979,4,c	;volatile
  4139                           
  4140                           ;controlSensors.c: 29: _delay((unsigned long)((0.0001*10)*(10000000/4000.0)));
  4141  001C76  D000               	nop2		;2 cycle nop
  4142                           
  4143                           ;controlSensors.c: 30: LATCbits.LC4=0;
  4144  001C78  988B               	bcf	3979,4,c	;volatile
  4145  001C7A                     l380:
  4146  001C7A  AA8B               	btfss	3979,5,c	;volatile
  4147  001C7C  D7FE               	goto	l380
  4148  001C7E                     l383:
  4149  001C7E  BA8B               	btfsc	3979,5,c	;volatile
  4150  001C80  D7FE               	goto	l383
  4151                           
  4152                           ;controlSensors.c: 36: }
  4153                           ;controlSensors.c: 37: return 0;
  4154  001C82  0E00               	movlw	0
  4155  001C84  6E22               	movwf	?_getDistance+1,c
  4156  001C86  0E00               	movlw	0
  4157  001C88  6E21               	movwf	?_getDistance,c
  4158  001C8A  0012               	return	
  4159  001C8C                     l2115:
  4160                           
  4161                           ;controlSensors.c: 38: }
  4162                           ;controlSensors.c: 39: if (ULTRASONIC_SENSOR == 20){
  4163  001C8C  0E14               	movlw	20
  4164  001C8E  1821               	xorwf	getDistance@ULTRASONIC_SENSOR,w,c
  4165  001C90  1022               	iorwf	getDistance@ULTRASONIC_SENSOR+1,w,c
  4166  001C92  A4D8               	btfss	status,2,c
  4167  001C94  0012               	return	
  4168                           
  4169                           ;controlSensors.c: 40: LATCbits.LC6 = 0;
  4170  001C96  9C8B               	bcf	3979,6,c	;volatile
  4171                           
  4172                           ;controlSensors.c: 41: _delay((unsigned long)((0.0001*2)*(10000000/4000.0)));
  4173                           ;controlSensors.c: 42: LATCbits.LC6 = 1;
  4174  001C98  8C8B               	bsf	3979,6,c	;volatile
  4175                           
  4176                           ;controlSensors.c: 43: _delay((unsigned long)((0.0001*10)*(10000000/4000.0)));
  4177  001C9A  D000               	nop2		;2 cycle nop
  4178                           
  4179                           ;controlSensors.c: 44: LATCbits.LC6=0;
  4180  001C9C  9C8B               	bcf	3979,6,c	;volatile
  4181  001C9E                     l387:
  4182  001C9E  AE8B               	btfss	3979,7,c	;volatile
  4183  001CA0  D7FE               	goto	l387
  4184  001CA2                     l390:
  4185  001CA2  BE8B               	btfsc	3979,7,c	;volatile
  4186  001CA4  D7FE               	goto	l390
  4187                           
  4188                           ;controlSensors.c: 50: }
  4189                           ;controlSensors.c: 51: return 0;
  4190  001CA6  0E00               	movlw	0
  4191  001CA8  6E22               	movwf	?_getDistance+1,c
  4192  001CAA  0E00               	movlw	0
  4193  001CAC  6E21               	movwf	?_getDistance,c
  4194  001CAE  0012               	return	
  4195  001CB0                     __end_of_getDistance:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           intcon	equ	0xFF2
  4202                           intcon3	equ	0xFF0
  4203                           postinc0	equ	0xFEE
  4204                           wreg	equ	0xFE8
  4205                           status	equ	0xFD8
  4206                           
  4207 ;; *************** function _keypressed *****************
  4208 ;; Defined at:
  4209 ;;		line 135 in file "main.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;  keypress        2   30[COMRAM] int 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      void 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4226 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;Total ram usage:       17 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    6
  4230 ;; This function calls:
  4231 ;;		_dispCorrectScreen
  4232 ;; This function is called by:
  4233 ;;		Interrupt level 2
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	intcode
  4238  000008                     __pintcode:
  4239                           	opt stack 0
  4240  000008                     _keypressed:
  4241                           	opt stack 19
  4242                           
  4243                           ;incstack = 0
  4244  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4245  00000A  ED0F  F00D         	call	int_func,f	;refresh shadow registers
  4246                           tblptru	equ	0xFF8
  4247                           tblptrh	equ	0xFF7
  4248                           tblptrl	equ	0xFF6
  4249                           tablat	equ	0xFF5
  4250                           intcon	equ	0xFF2
  4251                           intcon3	equ	0xFF0
  4252                           postinc0	equ	0xFEE
  4253                           wreg	equ	0xFE8
  4254                           status	equ	0xFD8
  4255                           
  4256                           	psect	intcode_body
  4257  001A1E                     __pintcode_body:
  4258                           	opt stack 19
  4259  001A1E                     int_func:
  4260                           	opt stack 19
  4261  001A1E  0006               	pop		; remove dummy address from shadow register refresh
  4262  001A20  CFFA F011          	movff	pclath,??_keypressed+1
  4263  001A24  CFFB F012          	movff	pclatu,??_keypressed+2
  4264  001A28  CFE9 F013          	movff	fsr0l,??_keypressed+3
  4265  001A2C  CFEA F014          	movff	fsr0h,??_keypressed+4
  4266  001A30  CFE1 F015          	movff	fsr1l,??_keypressed+5
  4267  001A34  CFE2 F016          	movff	fsr1h,??_keypressed+6
  4268  001A38  CFD9 F017          	movff	fsr2l,??_keypressed+7
  4269  001A3C  CFDA F018          	movff	fsr2h,??_keypressed+8
  4270  001A40  CFF3 F019          	movff	prodl,??_keypressed+9
  4271  001A44  CFF4 F01A          	movff	prodh,??_keypressed+10
  4272  001A48  CFF6 F01B          	movff	tblptrl,??_keypressed+11
  4273  001A4C  CFF7 F01C          	movff	tblptrh,??_keypressed+12
  4274  001A50  CFF8 F01D          	movff	tblptru,??_keypressed+13
  4275  001A54  CFF5 F01E          	movff	tablat,??_keypressed+14
  4276                           
  4277                           ;main.c: 137: if(INT1IF){
  4278  001A58  A0F0               	btfss	intcon3,0,c	;volatile
  4279  001A5A  D011               	goto	i2l98
  4280                           
  4281                           ;main.c: 138: int keypress = (PORTB & 0xF0) >> 4;
  4282  001A5C  CF81 F010          	movff	3969,??_keypressed	;volatile
  4283  001A60  3A10               	swapf	??_keypressed,f,c
  4284  001A62  0E0F               	movlw	15
  4285  001A64  1610               	andwf	??_keypressed,f,c
  4286  001A66  0E0F               	movlw	15
  4287  001A68  1610               	andwf	??_keypressed,f,c
  4288  001A6A  5010               	movf	??_keypressed,w,c
  4289  001A6C  6E1F               	movwf	keypressed@keypress,c
  4290  001A6E  6A20               	clrf	keypressed@keypress+1,c
  4291                           
  4292                           ;main.c: 139: dispCorrectScreen(keypress);
  4293  001A70  C01F  F00E         	movff	keypressed@keypress,dispCorrectScreen@key
  4294  001A74  C020  F00F         	movff	keypressed@keypress+1,dispCorrectScreen@key+1
  4295  001A78  EC5D  F00D         	call	_dispCorrectScreen	;wreg free
  4296                           
  4297                           ;main.c: 140: INT1IF = 0;
  4298  001A7C  90F0               	bcf	intcon3,0,c	;volatile
  4299  001A7E                     i2l98:
  4300  001A7E  C01E  FFF5         	movff	??_keypressed+14,tablat
  4301  001A82  C01D  FFF8         	movff	??_keypressed+13,tblptru
  4302  001A86  C01C  FFF7         	movff	??_keypressed+12,tblptrh
  4303  001A8A  C01B  FFF6         	movff	??_keypressed+11,tblptrl
  4304  001A8E  C01A  FFF4         	movff	??_keypressed+10,prodh
  4305  001A92  C019  FFF3         	movff	??_keypressed+9,prodl
  4306  001A96  C018  FFDA         	movff	??_keypressed+8,fsr2h
  4307  001A9A  C017  FFD9         	movff	??_keypressed+7,fsr2l
  4308  001A9E  C016  FFE2         	movff	??_keypressed+6,fsr1h
  4309  001AA2  C015  FFE1         	movff	??_keypressed+5,fsr1l
  4310  001AA6  C014  FFEA         	movff	??_keypressed+4,fsr0h
  4311  001AAA  C013  FFE9         	movff	??_keypressed+3,fsr0l
  4312  001AAE  C012  FFFB         	movff	??_keypressed+2,pclatu
  4313  001AB2  C011  FFFA         	movff	??_keypressed+1,pclath
  4314  001AB6  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4315  001AB8  0011               	retfie		f
  4316  001ABA                     __end_of_keypressed:
  4317                           	opt stack 0
  4318                           pclatu	equ	0xFFB
  4319                           pclath	equ	0xFFA
  4320                           tblptru	equ	0xFF8
  4321                           tblptrh	equ	0xFF7
  4322                           tblptrl	equ	0xFF6
  4323                           tablat	equ	0xFF5
  4324                           prodh	equ	0xFF4
  4325                           prodl	equ	0xFF3
  4326                           intcon	equ	0xFF2
  4327                           intcon3	equ	0xFF0
  4328                           postinc0	equ	0xFEE
  4329                           fsr0h	equ	0xFEA
  4330                           fsr0l	equ	0xFE9
  4331                           wreg	equ	0xFE8
  4332                           fsr1h	equ	0xFE2
  4333                           fsr1l	equ	0xFE1
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function _dispCorrectScreen *****************
  4339 ;; Defined at:
  4340 ;;		line 97 in file "LCD.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;  key             2   13[COMRAM] int 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  1    wreg      void 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;Total ram usage:        2 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    5
  4361 ;; This function calls:
  4362 ;;		_dispDownloadToPCScreen
  4363 ;;		_dispLogsDisplayMenuScreen
  4364 ;;		_dispLogsMenu
  4365 ;;		_dispSortingScreen
  4366 ;;		i2_dispMainMenu
  4367 ;; This function is called by:
  4368 ;;		_keypressed
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           	psect	text27
  4373  001ABA                     __ptext27:
  4374                           	opt stack 0
  4375  001ABA                     _dispCorrectScreen:
  4376                           	opt stack 19
  4377                           
  4378                           ;LCD.c: 99: if (key == 2 && machineState != 2){
  4379                           
  4380                           ;incstack = 0
  4381  001ABA  0E02               	movlw	2
  4382  001ABC  180E               	xorwf	dispCorrectScreen@key,w,c
  4383  001ABE  100F               	iorwf	dispCorrectScreen@key+1,w,c
  4384  001AC0  A4D8               	btfss	status,2,c
  4385  001AC2  D00C               	goto	i2l2333
  4386  001AC4  0E02               	movlw	2
  4387  001AC6  184D               	xorwf	_machineState,w,c
  4388  001AC8  104E               	iorwf	_machineState+1,w,c
  4389  001ACA  B4D8               	btfsc	status,2,c
  4390  001ACC  D007               	goto	i2l2333
  4391                           
  4392                           ;LCD.c: 100: dispMainMenu();
  4393  001ACE  ECE6  F00F         	call	i2_dispMainMenu	;wreg free
  4394                           
  4395                           ;LCD.c: 101: currentScreen = 3;
  4396  001AD2  0E00               	movlw	0
  4397  001AD4  6E46               	movwf	_currentScreen+1,c
  4398  001AD6  0E03               	movlw	3
  4399  001AD8  6E45               	movwf	_currentScreen,c
  4400                           
  4401                           ;LCD.c: 102: }
  4402  001ADA  0012               	return	
  4403  001ADC                     i2l2333:
  4404                           
  4405                           ;LCD.c: 103: else if (currentScreen == 3){
  4406  001ADC  0E03               	movlw	3
  4407  001ADE  1845               	xorwf	_currentScreen,w,c
  4408  001AE0  1046               	iorwf	_currentScreen+1,w,c
  4409  001AE2  A4D8               	btfss	status,2,c
  4410  001AE4  D01A               	goto	i2l2349
  4411                           
  4412                           ;LCD.c: 104: if (key == 0){
  4413  001AE6  500E               	movf	dispCorrectScreen@key,w,c
  4414  001AE8  100F               	iorwf	dispCorrectScreen@key+1,w,c
  4415  001AEA  A4D8               	btfss	status,2,c
  4416  001AEC  D00B               	goto	i2l2343
  4417                           
  4418                           ;LCD.c: 105: machineState = 2;
  4419  001AEE  0E00               	movlw	0
  4420  001AF0  6E4E               	movwf	_machineState+1,c
  4421  001AF2  0E02               	movlw	2
  4422  001AF4  6E4D               	movwf	_machineState,c
  4423                           
  4424                           ;LCD.c: 106: dispSortingScreen();
  4425  001AF6  ECF3  F00F         	call	_dispSortingScreen	;wreg free
  4426                           
  4427                           ;LCD.c: 107: currentScreen = 4;
  4428  001AFA  0E00               	movlw	0
  4429  001AFC  6E46               	movwf	_currentScreen+1,c
  4430  001AFE  0E04               	movlw	4
  4431  001B00  6E45               	movwf	_currentScreen,c
  4432                           
  4433                           ;LCD.c: 108: }
  4434  001B02  0012               	return	
  4435  001B04                     i2l2343:
  4436                           
  4437                           ;LCD.c: 109: else if (key == 1){
  4438  001B04  040E               	decf	dispCorrectScreen@key,w,c
  4439  001B06  100F               	iorwf	dispCorrectScreen@key+1,w,c
  4440  001B08  A4D8               	btfss	status,2,c
  4441  001B0A  0012               	return	
  4442                           
  4443                           ;LCD.c: 110: dispLogsMenu();
  4444  001B0C  EC00  F010         	call	_dispLogsMenu	;wreg free
  4445                           
  4446                           ;LCD.c: 111: currentScreen = 5;
  4447  001B10  0E00               	movlw	0
  4448  001B12  6E46               	movwf	_currentScreen+1,c
  4449  001B14  0E05               	movlw	5
  4450  001B16  6E45               	movwf	_currentScreen,c
  4451                           
  4452                           ;LCD.c: 112: }
  4453                           ;LCD.c: 114: }
  4454  001B18  0012               	return	
  4455  001B1A                     i2l2349:
  4456                           
  4457                           ;LCD.c: 115: else if (currentScreen == 5){
  4458  001B1A  0E05               	movlw	5
  4459  001B1C  1845               	xorwf	_currentScreen,w,c
  4460  001B1E  1046               	iorwf	_currentScreen+1,w,c
  4461  001B20  A4D8               	btfss	status,2,c
  4462  001B22  0012               	return	
  4463                           
  4464                           ;LCD.c: 116: if (key == 0){
  4465  001B24  500E               	movf	dispCorrectScreen@key,w,c
  4466  001B26  100F               	iorwf	dispCorrectScreen@key+1,w,c
  4467  001B28  A4D8               	btfss	status,2,c
  4468  001B2A  D007               	goto	i2l2357
  4469                           
  4470                           ;LCD.c: 117: dispDownloadToPCScreen();
  4471  001B2C  EC1A  F010         	call	_dispDownloadToPCScreen	;wreg free
  4472                           
  4473                           ;LCD.c: 118: currentScreen = 7;
  4474  001B30  0E00               	movlw	0
  4475  001B32  6E46               	movwf	_currentScreen+1,c
  4476  001B34  0E07               	movlw	7
  4477  001B36  6E45               	movwf	_currentScreen,c
  4478                           
  4479                           ;LCD.c: 119: }
  4480  001B38  0012               	return	
  4481  001B3A                     i2l2357:
  4482                           
  4483                           ;LCD.c: 120: else if (key == 1){
  4484  001B3A  040E               	decf	dispCorrectScreen@key,w,c
  4485  001B3C  100F               	iorwf	dispCorrectScreen@key+1,w,c
  4486  001B3E  A4D8               	btfss	status,2,c
  4487  001B40  0012               	return	
  4488                           
  4489                           ;LCD.c: 121: dispLogsDisplayMenuScreen();
  4490  001B42  EC0D  F010         	call	_dispLogsDisplayMenuScreen	;wreg free
  4491                           
  4492                           ;LCD.c: 122: currentScreen = 6;
  4493  001B46  0E00               	movlw	0
  4494  001B48  6E46               	movwf	_currentScreen+1,c
  4495  001B4A  0E06               	movlw	6
  4496  001B4C  6E45               	movwf	_currentScreen,c
  4497  001B4E  0012               	return	
  4498  001B50                     __end_of_dispCorrectScreen:
  4499                           	opt stack 0
  4500                           pclatu	equ	0xFFB
  4501                           pclath	equ	0xFFA
  4502                           tblptru	equ	0xFF8
  4503                           tblptrh	equ	0xFF7
  4504                           tblptrl	equ	0xFF6
  4505                           tablat	equ	0xFF5
  4506                           prodh	equ	0xFF4
  4507                           prodl	equ	0xFF3
  4508                           intcon	equ	0xFF2
  4509                           intcon3	equ	0xFF0
  4510                           postinc0	equ	0xFEE
  4511                           fsr0h	equ	0xFEA
  4512                           fsr0l	equ	0xFE9
  4513                           wreg	equ	0xFE8
  4514                           fsr1h	equ	0xFE2
  4515                           fsr1l	equ	0xFE1
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function i2_dispMainMenu *****************
  4521 ;; Defined at:
  4522 ;;		line 67 in file "LCD.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;		None
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;		None
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      void 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;Total ram usage:        0 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    4
  4543 ;; This function calls:
  4544 ;;		i2_clearLCD
  4545 ;;		i2_lcdWrite
  4546 ;; This function is called by:
  4547 ;;		_dispCorrectScreen
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text28
  4552  001FCC                     __ptext28:
  4553                           	opt stack 0
  4554  001FCC                     i2_dispMainMenu:
  4555                           	opt stack 19
  4556                           
  4557                           ;LCD.c: 68: clearLCD();
  4558                           
  4559                           ;incstack = 0
  4560  001FCC  EC38  F010         	call	i2_clearLCD	;wreg free
  4561                           
  4562                           ;LCD.c: 69: lcdWrite("1:START 11:31:45", "2:LOGS  22/02/17");
  4563  001FD0  0E01               	movlw	low STR_1
  4564  001FD2  6E0A               	movwf	i2lcdWrite@string1,c
  4565  001FD4  0E10               	movlw	high STR_1
  4566  001FD6  6E0B               	movwf	i2lcdWrite@string1+1,c
  4567  001FD8  0E12               	movlw	low STR_2
  4568  001FDA  6E0C               	movwf	i2lcdWrite@string2,c
  4569  001FDC  0E10               	movlw	high STR_2
  4570  001FDE  6E0D               	movwf	i2lcdWrite@string2+1,c
  4571  001FE0  ECA9  F00F         	call	i2_lcdWrite	;wreg free
  4572  001FE4  0012               	return		;funcret
  4573  001FE6                     __end_ofi2_dispMainMenu:
  4574                           	opt stack 0
  4575                           pclatu	equ	0xFFB
  4576                           pclath	equ	0xFFA
  4577                           tblptru	equ	0xFF8
  4578                           tblptrh	equ	0xFF7
  4579                           tblptrl	equ	0xFF6
  4580                           tablat	equ	0xFF5
  4581                           prodh	equ	0xFF4
  4582                           prodl	equ	0xFF3
  4583                           intcon	equ	0xFF2
  4584                           intcon3	equ	0xFF0
  4585                           postinc0	equ	0xFEE
  4586                           fsr0h	equ	0xFEA
  4587                           fsr0l	equ	0xFE9
  4588                           wreg	equ	0xFE8
  4589                           fsr1h	equ	0xFE2
  4590                           fsr1l	equ	0xFE1
  4591                           fsr2h	equ	0xFDA
  4592                           fsr2l	equ	0xFD9
  4593                           status	equ	0xFD8
  4594                           
  4595 ;; *************** function _dispSortingScreen *****************
  4596 ;; Defined at:
  4597 ;;		line 72 in file "LCD.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;		None
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;		None
  4602 ;; Return value:  Size  Location     Type
  4603 ;;                  1    wreg      void 
  4604 ;; Registers used:
  4605 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4615 ;;Total ram usage:        0 bytes
  4616 ;; Hardware stack levels used:    1
  4617 ;; Hardware stack levels required when called:    4
  4618 ;; This function calls:
  4619 ;;		i2_clearLCD
  4620 ;;		i2_lcdWrite
  4621 ;; This function is called by:
  4622 ;;		_dispCorrectScreen
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           	psect	text29
  4627  001FE6                     __ptext29:
  4628                           	opt stack 0
  4629  001FE6                     _dispSortingScreen:
  4630                           	opt stack 19
  4631                           
  4632                           ;LCD.c: 73: clearLCD();
  4633                           
  4634                           ;incstack = 0
  4635  001FE6  EC38  F010         	call	i2_clearLCD	;wreg free
  4636                           
  4637                           ;LCD.c: 74: lcdWrite("SORTING...","0:47");
  4638  001FEA  0E61               	movlw	low STR_3
  4639  001FEC  6E0A               	movwf	i2lcdWrite@string1,c
  4640  001FEE  0E10               	movlw	high STR_3
  4641  001FF0  6E0B               	movwf	i2lcdWrite@string1+1,c
  4642  001FF2  0E77               	movlw	low STR_4
  4643  001FF4  6E0C               	movwf	i2lcdWrite@string2,c
  4644  001FF6  0E10               	movlw	high STR_4
  4645  001FF8  6E0D               	movwf	i2lcdWrite@string2+1,c
  4646  001FFA  ECA9  F00F         	call	i2_lcdWrite	;wreg free
  4647  001FFE  0012               	return		;funcret
  4648  002000                     __end_of_dispSortingScreen:
  4649                           	opt stack 0
  4650                           pclatu	equ	0xFFB
  4651                           pclath	equ	0xFFA
  4652                           tblptru	equ	0xFF8
  4653                           tblptrh	equ	0xFF7
  4654                           tblptrl	equ	0xFF6
  4655                           tablat	equ	0xFF5
  4656                           prodh	equ	0xFF4
  4657                           prodl	equ	0xFF3
  4658                           intcon	equ	0xFF2
  4659                           intcon3	equ	0xFF0
  4660                           postinc0	equ	0xFEE
  4661                           fsr0h	equ	0xFEA
  4662                           fsr0l	equ	0xFE9
  4663                           wreg	equ	0xFE8
  4664                           fsr1h	equ	0xFE2
  4665                           fsr1l	equ	0xFE1
  4666                           fsr2h	equ	0xFDA
  4667                           fsr2l	equ	0xFD9
  4668                           status	equ	0xFD8
  4669                           
  4670 ;; *************** function _dispLogsMenu *****************
  4671 ;; Defined at:
  4672 ;;		line 78 in file "LCD.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;		None
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;		None
  4677 ;; Return value:  Size  Location     Type
  4678 ;;                  1    wreg      void 
  4679 ;; Registers used:
  4680 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4681 ;; Tracked objects:
  4682 ;;		On entry : 0/0
  4683 ;;		On exit  : 0/0
  4684 ;;		Unchanged: 0/0
  4685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;Total ram usage:        0 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; Hardware stack levels required when called:    4
  4693 ;; This function calls:
  4694 ;;		i2_clearLCD
  4695 ;;		i2_lcdWrite
  4696 ;; This function is called by:
  4697 ;;		_dispCorrectScreen
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           	psect	text30
  4702  002000                     __ptext30:
  4703                           	opt stack 0
  4704  002000                     _dispLogsMenu:
  4705                           	opt stack 19
  4706                           
  4707                           ;LCD.c: 79: clearLCD();
  4708                           
  4709                           ;incstack = 0
  4710  002000  EC38  F010         	call	i2_clearLCD	;wreg free
  4711                           
  4712                           ;LCD.c: 80: lcdWrite("1:DOWNLOAD 3:ESC","2:DISP LOGS");
  4713  002004  0E23               	movlw	low STR_5
  4714  002006  6E0A               	movwf	i2lcdWrite@string1,c
  4715  002008  0E10               	movlw	high STR_5
  4716  00200A  6E0B               	movwf	i2lcdWrite@string1+1,c
  4717  00200C  0E55               	movlw	low STR_6
  4718  00200E  6E0C               	movwf	i2lcdWrite@string2,c
  4719  002010  0E10               	movlw	high STR_6
  4720  002012  6E0D               	movwf	i2lcdWrite@string2+1,c
  4721  002014  ECA9  F00F         	call	i2_lcdWrite	;wreg free
  4722  002018  0012               	return		;funcret
  4723  00201A                     __end_of_dispLogsMenu:
  4724                           	opt stack 0
  4725                           pclatu	equ	0xFFB
  4726                           pclath	equ	0xFFA
  4727                           tblptru	equ	0xFF8
  4728                           tblptrh	equ	0xFF7
  4729                           tblptrl	equ	0xFF6
  4730                           tablat	equ	0xFF5
  4731                           prodh	equ	0xFF4
  4732                           prodl	equ	0xFF3
  4733                           intcon	equ	0xFF2
  4734                           intcon3	equ	0xFF0
  4735                           postinc0	equ	0xFEE
  4736                           fsr0h	equ	0xFEA
  4737                           fsr0l	equ	0xFE9
  4738                           wreg	equ	0xFE8
  4739                           fsr1h	equ	0xFE2
  4740                           fsr1l	equ	0xFE1
  4741                           fsr2h	equ	0xFDA
  4742                           fsr2l	equ	0xFD9
  4743                           status	equ	0xFD8
  4744                           
  4745 ;; *************** function _dispLogsDisplayMenuScreen *****************
  4746 ;; Defined at:
  4747 ;;		line 83 in file "LCD.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;		None
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;		None
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  1    wreg      void 
  4754 ;; Registers used:
  4755 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;Total ram usage:        0 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    4
  4768 ;; This function calls:
  4769 ;;		i2_clearLCD
  4770 ;;		i2_lcdWrite
  4771 ;; This function is called by:
  4772 ;;		_dispCorrectScreen
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text31
  4777  00201A                     __ptext31:
  4778                           	opt stack 0
  4779  00201A                     _dispLogsDisplayMenuScreen:
  4780                           	opt stack 19
  4781                           
  4782                           ;LCD.c: 84: clearLCD();
  4783                           
  4784                           ;incstack = 0
  4785  00201A  EC38  F010         	call	i2_clearLCD	;wreg free
  4786                           
  4787                           ;LCD.c: 85: lcdWrite("1:SCROLLDN 3:ESC","2:SCROLLUP");
  4788  00201E  0E34               	movlw	low STR_7
  4789  002020  6E0A               	movwf	i2lcdWrite@string1,c
  4790  002022  0E10               	movlw	high STR_7
  4791  002024  6E0B               	movwf	i2lcdWrite@string1+1,c
  4792  002026  0E6C               	movlw	low STR_8
  4793  002028  6E0C               	movwf	i2lcdWrite@string2,c
  4794  00202A  0E10               	movlw	high STR_8
  4795  00202C  6E0D               	movwf	i2lcdWrite@string2+1,c
  4796  00202E  ECA9  F00F         	call	i2_lcdWrite	;wreg free
  4797  002032  0012               	return		;funcret
  4798  002034                     __end_of_dispLogsDisplayMenuScreen:
  4799                           	opt stack 0
  4800                           pclatu	equ	0xFFB
  4801                           pclath	equ	0xFFA
  4802                           tblptru	equ	0xFF8
  4803                           tblptrh	equ	0xFF7
  4804                           tblptrl	equ	0xFF6
  4805                           tablat	equ	0xFF5
  4806                           prodh	equ	0xFF4
  4807                           prodl	equ	0xFF3
  4808                           intcon	equ	0xFF2
  4809                           intcon3	equ	0xFF0
  4810                           postinc0	equ	0xFEE
  4811                           fsr0h	equ	0xFEA
  4812                           fsr0l	equ	0xFE9
  4813                           wreg	equ	0xFE8
  4814                           fsr1h	equ	0xFE2
  4815                           fsr1l	equ	0xFE1
  4816                           fsr2h	equ	0xFDA
  4817                           fsr2l	equ	0xFD9
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function _dispDownloadToPCScreen *****************
  4821 ;; Defined at:
  4822 ;;		line 88 in file "LCD.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;		None
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;		None
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  1    wreg      void 
  4829 ;; Registers used:
  4830 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;Total ram usage:        0 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    4
  4843 ;; This function calls:
  4844 ;;		i2_clearLCD
  4845 ;;		i2_lcdWrite
  4846 ;; This function is called by:
  4847 ;;		_dispCorrectScreen
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           	psect	text32
  4852  002034                     __ptext32:
  4853                           	opt stack 0
  4854  002034                     _dispDownloadToPCScreen:
  4855                           	opt stack 19
  4856                           
  4857                           ;LCD.c: 89: clearLCD();
  4858                           
  4859                           ;incstack = 0
  4860  002034  EC38  F010         	call	i2_clearLCD	;wreg free
  4861                           
  4862                           ;LCD.c: 90: lcdWrite("TRANSFERRING...","");
  4863  002038  0E45               	movlw	low STR_9
  4864  00203A  6E0A               	movwf	i2lcdWrite@string1,c
  4865  00203C  0E10               	movlw	high STR_9
  4866  00203E  6E0B               	movwf	i2lcdWrite@string1+1,c
  4867  002040  0E54               	movlw	low (STR_9+15)
  4868  002042  6E0C               	movwf	i2lcdWrite@string2,c
  4869  002044  0E10               	movlw	high (STR_9+15)
  4870  002046  6E0D               	movwf	i2lcdWrite@string2+1,c
  4871  002048  ECA9  F00F         	call	i2_lcdWrite	;wreg free
  4872  00204C  0012               	return		;funcret
  4873  00204E                     __end_of_dispDownloadToPCScreen:
  4874                           	opt stack 0
  4875                           pclatu	equ	0xFFB
  4876                           pclath	equ	0xFFA
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           intcon	equ	0xFF2
  4884                           intcon3	equ	0xFF0
  4885                           postinc0	equ	0xFEE
  4886                           fsr0h	equ	0xFEA
  4887                           fsr0l	equ	0xFE9
  4888                           wreg	equ	0xFE8
  4889                           fsr1h	equ	0xFE2
  4890                           fsr1l	equ	0xFE1
  4891                           fsr2h	equ	0xFDA
  4892                           fsr2l	equ	0xFD9
  4893                           status	equ	0xFD8
  4894                           
  4895 ;; *************** function i2_lcdWrite *****************
  4896 ;; Defined at:
  4897 ;;		line 54 in file "LCD.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;  string1         2    9[COMRAM] PTR unsigned char 
  4900 ;;		 -> STR_9(16), STR_7(17), STR_5(17), STR_3(11), 
  4901 ;;		 -> STR_1(17), 
  4902 ;;  string2         2   11[COMRAM] PTR unsigned char 
  4903 ;;		 -> STR_10(1), STR_8(11), STR_6(12), STR_4(5), 
  4904 ;;		 -> STR_2(17), 
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;		None
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  1    wreg      void 
  4909 ;; Registers used:
  4910 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4916 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;Total ram usage:        4 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    3
  4923 ;; This function calls:
  4924 ;;		i2_clearLCD
  4925 ;;		i2_lcdInst
  4926 ;;		i2_printf
  4927 ;; This function is called by:
  4928 ;;		_dispSortingScreen
  4929 ;;		_dispLogsMenu
  4930 ;;		_dispLogsDisplayMenuScreen
  4931 ;;		_dispDownloadToPCScreen
  4932 ;;		i2_dispMainMenu
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           	psect	text33
  4937  001F52                     __ptext33:
  4938                           	opt stack 0
  4939  001F52                     i2_lcdWrite:
  4940                           	opt stack 19
  4941                           
  4942                           ;LCD.c: 55: clearLCD();
  4943                           
  4944                           ;incstack = 0
  4945  001F52  EC38  F010         	call	i2_clearLCD	;wreg free
  4946                           
  4947                           ;LCD.c: 56: printf(string1);
  4948  001F56  C00A  F004         	movff	i2lcdWrite@string1,i2printf@f
  4949  001F5A  C00B  F005         	movff	i2lcdWrite@string1+1,i2printf@f+1
  4950  001F5E  ECB9  F00E         	call	i2_printf	;wreg free
  4951                           
  4952                           ;LCD.c: 57: lcdInst(0b11000000);
  4953  001F62  0EC0               	movlw	192
  4954  001F64  EC57  F010         	call	i2_lcdInst
  4955                           
  4956                           ;LCD.c: 58: printf(string2);
  4957  001F68  C00C  F004         	movff	i2lcdWrite@string2,i2printf@f
  4958  001F6C  C00D  F005         	movff	i2lcdWrite@string2+1,i2printf@f+1
  4959  001F70  ECB9  F00E         	call	i2_printf	;wreg free
  4960                           
  4961                           ;LCD.c: 59: lcdInst(0b1100);
  4962  001F74  0E0C               	movlw	12
  4963  001F76  EC57  F010         	call	i2_lcdInst
  4964  001F7A  0012               	return		;funcret
  4965  001F7C                     __end_ofi2_lcdWrite:
  4966                           	opt stack 0
  4967                           pclatu	equ	0xFFB
  4968                           pclath	equ	0xFFA
  4969                           tblptru	equ	0xFF8
  4970                           tblptrh	equ	0xFF7
  4971                           tblptrl	equ	0xFF6
  4972                           tablat	equ	0xFF5
  4973                           prodh	equ	0xFF4
  4974                           prodl	equ	0xFF3
  4975                           intcon	equ	0xFF2
  4976                           intcon3	equ	0xFF0
  4977                           postinc0	equ	0xFEE
  4978                           fsr0h	equ	0xFEA
  4979                           fsr0l	equ	0xFE9
  4980                           wreg	equ	0xFE8
  4981                           fsr1h	equ	0xFE2
  4982                           fsr1l	equ	0xFE1
  4983                           fsr2h	equ	0xFDA
  4984                           fsr2l	equ	0xFD9
  4985                           status	equ	0xFD8
  4986                           
  4987 ;; *************** function i2_printf *****************
  4988 ;; Defined at:
  4989 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;  f               2    3[COMRAM] PTR const unsigned char 
  4992 ;;		 -> STR_10(1), STR_9(16), STR_8(11), STR_7(17), 
  4993 ;;		 -> STR_6(12), STR_5(17), STR_4(5), STR_3(11), 
  4994 ;;		 -> STR_2(17), STR_1(17), 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  printf          4    0        struct .
  4997 ;;  printf          3    0        PTR const unsigned char 
  4998 ;;  printf          2    5[COMRAM] PTR void [1]
  4999 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5000 ;;  printf          2    0        unsigned int 
  5001 ;;  printf          2    0        unsigned int 
  5002 ;;  printf          1    8[COMRAM] char 
  5003 ;;  printf          1    7[COMRAM] unsigned char 
  5004 ;;  printf          1    0        char 
  5005 ;; Return value:  Size  Location     Type
  5006 ;;                  2    3[COMRAM] int 
  5007 ;; Registers used:
  5008 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5014 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;Total ram usage:        6 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:    2
  5021 ;; This function calls:
  5022 ;;		i2_putch
  5023 ;; This function is called by:
  5024 ;;		i2_lcdWrite
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           	psect	text34
  5029  001D72                     __ptext34:
  5030                           	opt stack 0
  5031  001D72                     i2_printf:
  5032                           	opt stack 19
  5033                           
  5034                           ;doprnt.c: 466: va_list ap;
  5035                           ;doprnt.c: 499: signed char c;
  5036                           ;doprnt.c: 506: signed char prec;
  5037                           ;doprnt.c: 508: unsigned char flag;
  5038                           ;doprnt.c: 523: union {
  5039                           ;doprnt.c: 524: unsigned long vd;
  5040                           ;doprnt.c: 525: double integ;
  5041                           ;doprnt.c: 526: } tmpval;
  5042                           ;doprnt.c: 528: unsigned int val;
  5043                           ;doprnt.c: 529: unsigned len;
  5044                           ;doprnt.c: 530: const char * cp;
  5045                           ;doprnt.c: 533: *ap = __va_start();
  5046                           
  5047                           ;incstack = 0
  5048  001D72  0E06               	movlw	low (?i2_printf+2)
  5049  001D74  6E06               	movwf	i2printf@ap,c
  5050  001D76  0E00               	movlw	high (?i2_printf+2)
  5051  001D78  6E07               	movwf	i2printf@ap+1,c
  5052                           
  5053                           ;doprnt.c: 536: while(c = *f++) {
  5054  001D7A  D01D               	goto	i2l1881
  5055  001D7C                     i2l1869:
  5056                           
  5057                           ;doprnt.c: 538: if(c != '%')
  5058  001D7C  0E25               	movlw	37
  5059  001D7E  1809               	xorwf	i2printf@c,w,c
  5060  001D80  B4D8               	btfsc	status,2,c
  5061  001D82  D004               	goto	i2l1873
  5062                           
  5063                           ;doprnt.c: 540: {
  5064                           ;doprnt.c: 541: (putch(c) );
  5065  001D84  5009               	movf	i2printf@c,w,c
  5066  001D86  EC51  F010         	call	i2_putch
  5067                           
  5068                           ;doprnt.c: 542: continue;
  5069  001D8A  D015               	goto	i2l1881
  5070  001D8C                     i2l1873:
  5071                           
  5072                           ;doprnt.c: 543: }
  5073                           ;doprnt.c: 548: flag = 0;
  5074  001D8C  0E00               	movlw	0
  5075  001D8E  6E08               	movwf	i2printf@flag,c
  5076                           
  5077                           ;doprnt.c: 635: switch(c = *f++) {
  5078  001D90  D004               	goto	i2l1879
  5079  001D92                     i2l1875:
  5080                           
  5081                           ;doprnt.c: 809: (putch(c) );
  5082  001D92  5009               	movf	i2printf@c,w,c
  5083  001D94  EC51  F010         	call	i2_putch
  5084                           
  5085                           ;doprnt.c: 822: }
  5086                           
  5087                           ;doprnt.c: 810: continue;
  5088  001D98  D00E               	goto	i2l1881
  5089  001D9A                     i2l1879:
  5090  001D9A  C004  FFF6         	movff	i2printf@f,tblptrl
  5091  001D9E  C005  FFF7         	movff	i2printf@f+1,tblptrh
  5092  001DA2  4A04               	infsnz	i2printf@f,f,c
  5093  001DA4  2A05               	incf	i2printf@f+1,f,c
  5094  001DA6                     	if	0	;tblptru may be non-zero
  5095  001DA6                     	endif
  5096  001DA6                     	if	0	;tblptru may be non-zero
  5097  001DA6                     	endif
  5098  001DA6  0008               	tblrd		*
  5099  001DA8  CFF5 F009          	movff	tablat,i2printf@c
  5100  001DAC  5009               	movf	i2printf@c,w,c
  5101                           
  5102                           ; Switch size 1, requested type "space"
  5103                           ; Number of cases is 1, Range of values is 0 to 0
  5104                           ; switch strategies available:
  5105                           ; Name         Instructions Cycles
  5106                           ; simple_byte            4     3 (average)
  5107                           ;	Chosen strategy is simple_byte
  5108  001DAE  0A00               	xorlw	0	; case 0
  5109  001DB0  B4D8               	btfsc	status,2,c
  5110  001DB2  0012               	return	
  5111  001DB4  D7EE               	goto	i2l1875
  5112  001DB6                     i2l1881:
  5113  001DB6  C004  FFF6         	movff	i2printf@f,tblptrl
  5114  001DBA  C005  FFF7         	movff	i2printf@f+1,tblptrh
  5115  001DBE  4A04               	infsnz	i2printf@f,f,c
  5116  001DC0  2A05               	incf	i2printf@f+1,f,c
  5117  001DC2                     	if	0	;tblptru may be non-zero
  5118  001DC2                     	endif
  5119  001DC2                     	if	0	;tblptru may be non-zero
  5120  001DC2                     	endif
  5121  001DC2  0008               	tblrd		*
  5122  001DC4  CFF5 F009          	movff	tablat,i2printf@c
  5123  001DC8  5009               	movf	i2printf@c,w,c
  5124  001DCA  B4D8               	btfsc	status,2,c
  5125  001DCC  0012               	return	
  5126  001DCE  D7D6               	goto	i2l1869
  5127  001DD0                     __end_ofi2_printf:
  5128                           	opt stack 0
  5129                           pclatu	equ	0xFFB
  5130                           pclath	equ	0xFFA
  5131                           tblptru	equ	0xFF8
  5132                           tblptrh	equ	0xFF7
  5133                           tblptrl	equ	0xFF6
  5134                           tablat	equ	0xFF5
  5135                           prodh	equ	0xFF4
  5136                           prodl	equ	0xFF3
  5137                           intcon	equ	0xFF2
  5138                           intcon3	equ	0xFF0
  5139                           postinc0	equ	0xFEE
  5140                           fsr0h	equ	0xFEA
  5141                           fsr0l	equ	0xFE9
  5142                           wreg	equ	0xFE8
  5143                           fsr1h	equ	0xFE2
  5144                           fsr1l	equ	0xFE1
  5145                           fsr2h	equ	0xFDA
  5146                           fsr2l	equ	0xFD9
  5147                           status	equ	0xFD8
  5148                           
  5149 ;; *************** function i2_putch *****************
  5150 ;; Defined at:
  5151 ;;		line 26 in file "LCD.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  data            1    wreg     unsigned char 
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;  data            1    2[COMRAM] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  1    wreg      void 
  5158 ;; Registers used:
  5159 ;;		wreg, status,2, status,0, cstack
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;Total ram usage:        1 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:    1
  5172 ;; This function calls:
  5173 ;;		i2_lcdNibble
  5174 ;; This function is called by:
  5175 ;;		i2_printf
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           	psect	text35
  5180  0020A2                     __ptext35:
  5181                           	opt stack 0
  5182  0020A2                     i2_putch:
  5183                           	opt stack 19
  5184                           
  5185                           ;incstack = 0
  5186                           ;i2putch@data stored from wreg
  5187  0020A2  6E03               	movwf	i2putch@data,c
  5188                           
  5189                           ;LCD.c: 27: LATDbits.LATD2 = 1;
  5190  0020A4  848C               	bsf	3980,2,c	;volatile
  5191                           
  5192                           ;LCD.c: 28: lcdNibble(data);
  5193  0020A6  5003               	movf	i2putch@data,w,c
  5194  0020A8  EC13  F00F         	call	i2_lcdNibble
  5195  0020AC  0012               	return		;funcret
  5196  0020AE                     __end_ofi2_putch:
  5197                           	opt stack 0
  5198                           pclatu	equ	0xFFB
  5199                           pclath	equ	0xFFA
  5200                           tblptru	equ	0xFF8
  5201                           tblptrh	equ	0xFF7
  5202                           tblptrl	equ	0xFF6
  5203                           tablat	equ	0xFF5
  5204                           prodh	equ	0xFF4
  5205                           prodl	equ	0xFF3
  5206                           intcon	equ	0xFF2
  5207                           intcon3	equ	0xFF0
  5208                           postinc0	equ	0xFEE
  5209                           fsr0h	equ	0xFEA
  5210                           fsr0l	equ	0xFE9
  5211                           wreg	equ	0xFE8
  5212                           fsr1h	equ	0xFE2
  5213                           fsr1l	equ	0xFE1
  5214                           fsr2h	equ	0xFDA
  5215                           fsr2l	equ	0xFD9
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function i2_clearLCD *****************
  5219 ;; Defined at:
  5220 ;;		line 62 in file "LCD.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;		None
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;		None
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		wreg, status,2, status,0, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;Total ram usage:        0 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    2
  5241 ;; This function calls:
  5242 ;;		i2_lcdInst
  5243 ;; This function is called by:
  5244 ;;		_dispSortingScreen
  5245 ;;		_dispLogsMenu
  5246 ;;		_dispLogsDisplayMenuScreen
  5247 ;;		_dispDownloadToPCScreen
  5248 ;;		i2_lcdWrite
  5249 ;;		i2_dispMainMenu
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text36
  5254  002070                     __ptext36:
  5255                           	opt stack 0
  5256  002070                     i2_clearLCD:
  5257                           	opt stack 19
  5258                           
  5259                           ;LCD.c: 63: lcdInst(0b01);
  5260                           
  5261                           ;incstack = 0
  5262  002070  0E01               	movlw	1
  5263  002072  EC57  F010         	call	i2_lcdInst
  5264                           
  5265                           ;LCD.c: 64: lcdInst(0x10);
  5266  002076  0E10               	movlw	16
  5267  002078  EC57  F010         	call	i2_lcdInst
  5268  00207C  0012               	return		;funcret
  5269  00207E                     __end_ofi2_clearLCD:
  5270                           	opt stack 0
  5271                           pclatu	equ	0xFFB
  5272                           pclath	equ	0xFFA
  5273                           tblptru	equ	0xFF8
  5274                           tblptrh	equ	0xFF7
  5275                           tblptrl	equ	0xFF6
  5276                           tablat	equ	0xFF5
  5277                           prodh	equ	0xFF4
  5278                           prodl	equ	0xFF3
  5279                           intcon	equ	0xFF2
  5280                           intcon3	equ	0xFF0
  5281                           postinc0	equ	0xFEE
  5282                           fsr0h	equ	0xFEA
  5283                           fsr0l	equ	0xFE9
  5284                           wreg	equ	0xFE8
  5285                           fsr1h	equ	0xFE2
  5286                           fsr1l	equ	0xFE1
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function i2_lcdInst *****************
  5292 ;; Defined at:
  5293 ;;		line 21 in file "LCD.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;  data            1    wreg     unsigned char 
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;  data            1    2[COMRAM] unsigned char 
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  1    wreg      void 
  5300 ;; Registers used:
  5301 ;;		wreg, status,2, status,0, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;Total ram usage:        1 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    1
  5314 ;; This function calls:
  5315 ;;		i2_lcdNibble
  5316 ;; This function is called by:
  5317 ;;		i2_lcdWrite
  5318 ;;		i2_clearLCD
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text37
  5323  0020AE                     __ptext37:
  5324                           	opt stack 0
  5325  0020AE                     i2_lcdInst:
  5326                           	opt stack 20
  5327                           
  5328                           ;incstack = 0
  5329                           ;i2lcdInst@data stored from wreg
  5330  0020AE  6E03               	movwf	i2lcdInst@data,c
  5331                           
  5332                           ;LCD.c: 22: LATDbits.LATD2 = 0;
  5333  0020B0  948C               	bcf	3980,2,c	;volatile
  5334                           
  5335                           ;LCD.c: 23: lcdNibble(data);
  5336  0020B2  5003               	movf	i2lcdInst@data,w,c
  5337  0020B4  EC13  F00F         	call	i2_lcdNibble
  5338  0020B8  0012               	return		;funcret
  5339  0020BA                     __end_ofi2_lcdInst:
  5340                           	opt stack 0
  5341                           pclatu	equ	0xFFB
  5342                           pclath	equ	0xFFA
  5343                           tblptru	equ	0xFF8
  5344                           tblptrh	equ	0xFF7
  5345                           tblptrl	equ	0xFF6
  5346                           tablat	equ	0xFF5
  5347                           prodh	equ	0xFF4
  5348                           prodl	equ	0xFF3
  5349                           intcon	equ	0xFF2
  5350                           intcon3	equ	0xFF0
  5351                           postinc0	equ	0xFEE
  5352                           fsr0h	equ	0xFEA
  5353                           fsr0l	equ	0xFE9
  5354                           wreg	equ	0xFE8
  5355                           fsr1h	equ	0xFE2
  5356                           fsr1l	equ	0xFE1
  5357                           fsr2h	equ	0xFDA
  5358                           fsr2l	equ	0xFD9
  5359                           status	equ	0xFD8
  5360                           
  5361 ;; *************** function i2_lcdNibble *****************
  5362 ;; Defined at:
  5363 ;;		line 31 in file "LCD.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  data            1    wreg     unsigned char 
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;  data            1    1[COMRAM] unsigned char 
  5368 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  1    wreg      void 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;Total ram usage:        2 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; This function calls:
  5385 ;;		Nothing
  5386 ;; This function is called by:
  5387 ;;		i2_lcdInst
  5388 ;;		i2_putch
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           	psect	text38
  5393  001E26                     __ptext38:
  5394                           	opt stack 0
  5395  001E26                     i2_lcdNibble:
  5396                           	opt stack 19
  5397                           
  5398                           ;incstack = 0
  5399                           ;i2lcdNibble@data stored from wreg
  5400  001E26  6E02               	movwf	i2lcdNibble@data,c
  5401                           
  5402                           ;LCD.c: 33: char temp = data & 0xF0;
  5403  001E28  5002               	movf	i2lcdNibble@data,w,c
  5404  001E2A  0BF0               	andlw	240
  5405  001E2C  6E01               	movwf	i2lcdNibble@temp,c
  5406                           
  5407                           ;LCD.c: 34: LATD = LATD & 0x0F;
  5408  001E2E  508C               	movf	3980,w,c	;volatile
  5409  001E30  0B0F               	andlw	15
  5410  001E32  6E8C               	movwf	3980,c	;volatile
  5411                           
  5412                           ;LCD.c: 35: LATD = temp | LATD;
  5413  001E34  5001               	movf	i2lcdNibble@temp,w,c
  5414  001E36  108C               	iorwf	3980,w,c	;volatile
  5415  001E38  6E8C               	movwf	3980,c	;volatile
  5416                           
  5417                           ;LCD.c: 37: LATDbits.LATD3 = 0;
  5418  001E3A  968C               	bcf	3980,3,c	;volatile
  5419                           
  5420                           ;LCD.c: 38: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5421  001E3C  0E14               	movlw	20
  5422  001E3E                     i2u265_47:
  5423  001E3E  2EE8               	decfsz	wreg,f,c
  5424  001E40  D7FE               	bra	i2u265_47
  5425  001E42  D000               	nop2	
  5426                           
  5427                           ;LCD.c: 39: LATDbits.LATD3 = 1;
  5428  001E44  868C               	bsf	3980,3,c	;volatile
  5429                           
  5430                           ;LCD.c: 40: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5431  001E46  0E14               	movlw	20
  5432  001E48                     i2u266_47:
  5433  001E48  2EE8               	decfsz	wreg,f,c
  5434  001E4A  D7FE               	bra	i2u266_47
  5435  001E4C  D000               	nop2	
  5436                           
  5437                           ;LCD.c: 42: data = data << 4;
  5438  001E4E  3802               	swapf	i2lcdNibble@data,w,c
  5439  001E50  0BF0               	andlw	240
  5440  001E52  6E02               	movwf	i2lcdNibble@data,c
  5441                           
  5442                           ;LCD.c: 44: temp = data & 0xF0;
  5443  001E54  5002               	movf	i2lcdNibble@data,w,c
  5444  001E56  0BF0               	andlw	240
  5445  001E58  6E01               	movwf	i2lcdNibble@temp,c
  5446                           
  5447                           ;LCD.c: 45: LATD = LATD & 0x0F;
  5448  001E5A  508C               	movf	3980,w,c	;volatile
  5449  001E5C  0B0F               	andlw	15
  5450  001E5E  6E8C               	movwf	3980,c	;volatile
  5451                           
  5452                           ;LCD.c: 46: LATD = temp | LATD;
  5453  001E60  5001               	movf	i2lcdNibble@temp,w,c
  5454  001E62  108C               	iorwf	3980,w,c	;volatile
  5455  001E64  6E8C               	movwf	3980,c	;volatile
  5456                           
  5457                           ;LCD.c: 48: LATDbits.LATD3 = 0;
  5458  001E66  968C               	bcf	3980,3,c	;volatile
  5459                           
  5460                           ;LCD.c: 49: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5461  001E68  0E14               	movlw	20
  5462  001E6A                     i2u267_47:
  5463  001E6A  2EE8               	decfsz	wreg,f,c
  5464  001E6C  D7FE               	bra	i2u267_47
  5465  001E6E  D000               	nop2	
  5466                           
  5467                           ;LCD.c: 50: LATDbits.LATD3 = 1;
  5468  001E70  868C               	bsf	3980,3,c	;volatile
  5469                           
  5470                           ;LCD.c: 51: _delay((unsigned long)((25)*(10000000/4000000.0)));
  5471  001E72  0E14               	movlw	20
  5472  001E74                     i2u268_47:
  5473  001E74  2EE8               	decfsz	wreg,f,c
  5474  001E76  D7FE               	bra	i2u268_47
  5475  001E78  D000               	nop2	
  5476  001E7A  0012               	return		;funcret
  5477  001E7C                     __end_ofi2_lcdNibble:
  5478                           	opt stack 0
  5479                           pclatu	equ	0xFFB
  5480                           pclath	equ	0xFFA
  5481                           tblptru	equ	0xFF8
  5482                           tblptrh	equ	0xFF7
  5483                           tblptrl	equ	0xFF6
  5484                           tablat	equ	0xFF5
  5485                           prodh	equ	0xFF4
  5486                           prodl	equ	0xFF3
  5487                           intcon	equ	0xFF2
  5488                           intcon3	equ	0xFF0
  5489                           postinc0	equ	0xFEE
  5490                           fsr0h	equ	0xFEA
  5491                           fsr0l	equ	0xFE9
  5492                           wreg	equ	0xFE8
  5493                           fsr1h	equ	0xFE2
  5494                           fsr1l	equ	0xFE1
  5495                           fsr2h	equ	0xFDA
  5496                           fsr2l	equ	0xFD9
  5497                           status	equ	0xFD8
  5498                           pclatu	equ	0xFFB
  5499                           pclath	equ	0xFFA
  5500                           tblptru	equ	0xFF8
  5501                           tblptrh	equ	0xFF7
  5502                           tblptrl	equ	0xFF6
  5503                           tablat	equ	0xFF5
  5504                           prodh	equ	0xFF4
  5505                           prodl	equ	0xFF3
  5506                           intcon	equ	0xFF2
  5507                           intcon3	equ	0xFF0
  5508                           postinc0	equ	0xFEE
  5509                           fsr0h	equ	0xFEA
  5510                           fsr0l	equ	0xFE9
  5511                           wreg	equ	0xFE8
  5512                           fsr1h	equ	0xFE2
  5513                           fsr1l	equ	0xFE1
  5514                           fsr2h	equ	0xFDA
  5515                           fsr2l	equ	0xFD9
  5516                           status	equ	0xFD8
  5517                           
  5518                           	psect	rparam
  5519  0000                     pclatu	equ	0xFFB
  5520                           pclath	equ	0xFFA
  5521                           tblptru	equ	0xFF8
  5522                           tblptrh	equ	0xFF7
  5523                           tblptrl	equ	0xFF6
  5524                           tablat	equ	0xFF5
  5525                           prodh	equ	0xFF4
  5526                           prodl	equ	0xFF3
  5527                           intcon	equ	0xFF2
  5528                           intcon3	equ	0xFF0
  5529                           postinc0	equ	0xFEE
  5530                           fsr0h	equ	0xFEA
  5531                           fsr0l	equ	0xFE9
  5532                           wreg	equ	0xFE8
  5533                           fsr1h	equ	0xFE2
  5534                           fsr1l	equ	0xFE1
  5535                           fsr2h	equ	0xFDA
  5536                           fsr2l	equ	0xFD9
  5537                           status	equ	0xFD8
  5538                           
  5539                           	psect	temp
  5540  00005F                     btemp:
  5541                           	opt stack 0
  5542  00005F                     	ds	1
  5543  0000                     int$flags	set	btemp
  5544                           pclatu	equ	0xFFB
  5545                           pclath	equ	0xFFA
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           intcon	equ	0xFF2
  5553                           intcon3	equ	0xFF0
  5554                           postinc0	equ	0xFEE
  5555                           fsr0h	equ	0xFEA
  5556                           fsr0l	equ	0xFE9
  5557                           wreg	equ	0xFE8
  5558                           fsr1h	equ	0xFE2
  5559                           fsr1l	equ	0xFE1
  5560                           fsr2h	equ	0xFDA
  5561                           fsr2l	equ	0xFD9
  5562                           status	equ	0xFD8


Data Sizes:
    Strings     123
    Constant    0
    Data        0
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     68      94
    BANK0           128     40      40
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[1]), STR_9(CODE[16]), STR_8(CODE[11]), STR_7(CODE[17]), 
		 -> STR_6(CODE[12]), STR_5(CODE[17]), STR_4(CODE[5]), STR_3(CODE[11]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 

    lcdWrite@string2	PTR unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[1]), STR_8(CODE[11]), STR_6(CODE[12]), STR_4(CODE[5]), 
		 -> STR_2(CODE[17]), 

    lcdWrite@string1	PTR unsigned char  size(2) Largest target is 17
		 -> STR_9(CODE[16]), STR_7(CODE[17]), STR_5(CODE[17]), STR_3(CODE[11]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _rotateStepperMotor->___ftmul
    ___fttol->___ftmul
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _initLCD->_lcdInst
    _dispMainMenu->_lcdWrite
    _lcdWrite->_printf
    _printf->_putch
    _putch->_lcdNibble
    _clearLCD->_lcdInst
    _lcdInst->_lcdNibble
    _detectBottle->_laserDetected
    _bottleComing->_getDistance

Critical Paths under _keypressed in COMRAM

    _keypressed->_dispCorrectScreen
    i2_dispMainMenu->i2_lcdWrite
    _dispSortingScreen->i2_lcdWrite
    _dispLogsMenu->i2_lcdWrite
    _dispLogsDisplayMenuScreen->i2_lcdWrite
    _dispDownloadToPCScreen->i2_lcdWrite
    i2_lcdWrite->i2_printf
    i2_printf->i2_putch
    i2_putch->i2_lcdNibble
    i2_clearLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_rotateContainers
    _rotateContainers->_rotateStepperMotor
    _rotateStepperMotor->___fttol
    ___fttol->___ftmul

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   15668
                                             38 BANK0      2     2      0
                       _bottleComing
                       _detectBottle
                       _dispMainMenu
                            _initLCD
                   _rotateContainers
                 _setChamberEntrance
                     _setChamberExit
                     _setFanRotation
                    _setLaserEmitter
               _setUpperDiscRotation
 ---------------------------------------------------------------------------------
 (1) _setUpperDiscRotation                                 2     0      2      86
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _setLaserEmitter                                      2     0      2     108
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _setFanRotation                                       3     1      2     194
                                             32 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _setChamberExit                                       2     0      2     236
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _setChamberEntrance                                   7     5      2     328
                                             32 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _rotateContainers                                     2     2      0   12853
                                             36 BANK0      2     2      0
                            ___awmod
                 _rotateStepperMotor
 ---------------------------------------------------------------------------------
 (2) _rotateStepperMotor                                  15     9      6   10436
                                             21 BANK0     15     9      6
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     448
                                              6 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3160
                                             59 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3246
                                             44 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2691
                                             40 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2404
                                             32 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2281
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             35 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _dispMainMenu                                         0     0      0    1078
                           _clearLCD
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _lcdWrite                                             4     0      4     988
                                             41 COMRAM     4     0      4
                           _clearLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              18    16      2     332
                                             35 COMRAM     6     4      2
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      90
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _clearLCD                                             0     0      0      90
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _detectBottle                                         4     4      0     437
                                             35 COMRAM     4     4      0
                        _getDistance
                      _laserDetected
 ---------------------------------------------------------------------------------
 (2) _laserDetected                                        3     1      2       0
                                             32 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _bottleComing                                         2     0      2     258
                                             34 COMRAM     2     0      2
                        _getDistance
 ---------------------------------------------------------------------------------
 (2) _getDistance                                          2     0      2     258
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          17    17      0    5247
                                             15 COMRAM    17    17      0
                  _dispCorrectScreen
 ---------------------------------------------------------------------------------
 (7) _dispCorrectScreen                                    2     0      2    5224
                                             13 COMRAM     2     0      2
             _dispDownloadToPCScreen
          _dispLogsDisplayMenuScreen
                       _dispLogsMenu
                  _dispSortingScreen
                     i2_dispMainMenu
 ---------------------------------------------------------------------------------
 (8) i2_dispMainMenu                                       0     0      0    1010
                         i2_clearLCD
                         i2_lcdWrite
 ---------------------------------------------------------------------------------
 (8) _dispSortingScreen                                    0     0      0    1010
                         i2_clearLCD
                         i2_lcdWrite
 ---------------------------------------------------------------------------------
 (8) _dispLogsMenu                                         0     0      0    1010
                         i2_clearLCD
                         i2_lcdWrite
 ---------------------------------------------------------------------------------
 (8) _dispLogsDisplayMenuScreen                            0     0      0    1010
                         i2_clearLCD
                         i2_lcdWrite
 ---------------------------------------------------------------------------------
 (8) _dispDownloadToPCScreen                               0     0      0    1010
                         i2_clearLCD
                         i2_lcdWrite
 ---------------------------------------------------------------------------------
 (9) i2_lcdWrite                                           4     0      4     875
                                              9 COMRAM     4     0      4
                         i2_clearLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           18    16      2     301
                                              3 COMRAM     6     4      2
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_clearLCD                                          0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bottleComing
     _getDistance
   _detectBottle
     _getDistance
     _laserDetected
   _dispMainMenu
     _clearLCD
       _lcdInst
         _lcdNibble
     _lcdWrite
       _clearLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         _putch
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _rotateContainers
     ___awmod
     _rotateStepperMotor
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
   _setChamberEntrance
   _setChamberExit
   _setFanRotation
   _setLaserEmitter
   _setUpperDiscRotation

 _keypressed (ROOT)
   _dispCorrectScreen
     _dispDownloadToPCScreen
       i2_clearLCD
         i2_lcdInst
           i2_lcdNibble
       i2_lcdWrite
         i2_clearLCD
           i2_lcdInst
             i2_lcdNibble
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2_putch
             i2_lcdNibble
     _dispLogsDisplayMenuScreen
       i2_clearLCD
         i2_lcdInst
           i2_lcdNibble
       i2_lcdWrite
         i2_clearLCD
           i2_lcdInst
             i2_lcdNibble
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2_putch
             i2_lcdNibble
     _dispLogsMenu
       i2_clearLCD
         i2_lcdInst
           i2_lcdNibble
       i2_lcdWrite
         i2_clearLCD
           i2_lcdInst
             i2_lcdNibble
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2_putch
             i2_lcdNibble
     _dispSortingScreen
       i2_clearLCD
         i2_lcdInst
           i2_lcdNibble
       i2_lcdWrite
         i2_clearLCD
           i2_lcdInst
             i2_lcdNibble
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2_putch
             i2_lcdNibble
     i2_dispMainMenu
       i2_clearLCD
         i2_lcdInst
           i2_lcdNibble
       i2_lcdWrite
         i2_clearLCD
           i2_lcdInst
             i2_lcdNibble
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2_putch
             i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     28      28       5       31.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     44      5E       1       74.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      86      34        0.0%
DATA                 0      0      86       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 25 23:35:27 2017

                  ??i2_dispMainMenu 000E              __end_of_setFanRotation 1D14  
                    ??_dispMainMenu 002E                                  l88 13E6  
            __size_of_laserDetected 0014                         __CFG_BORV$3 000000  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
              ??_setChamberEntrance 0023                                 l313 1BB2  
                               l309 1B72                                 l338 12F0  
                               l380 1C7A                                 l372 1C56  
                               l284 17A6                                 l390 1CA2  
                               l383 1C7E                                 l375 1C5A  
                               l387 1C9E                                 l660 19FE  
                               l718 1886                        __CFG_CPB$OFF 000000  
                               _PEN 007E2A                        __CFG_CPD$OFF 000000  
                               _SEN 007E28                      ??_dispLogsMenu 000E  
                      ___awmod@sign 0026                                 wreg 000FE8  
                        i2_clearLCD 2070                        __CFG_LVP$OFF 000000  
                      ___ftdiv@cntr 0036                          i2_lcdWrite 1F52  
                      ___ftdiv@sign 003B                        __CFG_WDT$OFF 000000  
                              l2115 1C8C                                l2107 1C68  
                              l2223 1F1E                                l2241 1CDA  
                              l2209 1F8A                                l2251 1CFE  
                              l2237 1CD4                                l2511 1822  
                              l2175 1B62                                l2255 1D04  
                              l2281 193C                                l2265 18E6  
                              l2601 1ED6                                l2505 17FA  
                              l2185 1B90                                l2275 1922  
                              l2267 1900                                l2531 1860  
                              l2611 14AA                                l2269 1908  
                              l2189 1BA2                                l2287 1956  
                              l2471 198E                                l2551 15E0  
                              l2711 10A6                                l2481 19EA  
                              l2473 1998                                l2641 157C  
                              l2633 1550                                l2483 19F4  
                              l2475 19B6                                l2467 1980  
                              l2571 164E                                l2643 1586  
                              l2731 123C                                l2715 10BA  
                              l2707 1092                                l2581 1680  
                              l2557 160C                                l2629 153C  
                              l2661 179A                                l2479 19CC  
                              l2575 1664                                l2647 15A2  
                              l2639 156C                                l2727 118A  
                              l2719 10CC                                l2585 1696  
                              l2665 17B0                                l2657 178C  
                              l2825 1462                                l1891 1D34  
                              l2691 1C22                                l2683 1C02  
                              l2675 1BE8                                l1885 1D1E  
                              l2685 1C0A                                l1895 1D3C  
                              l2687 1C0E                                l2695 1C2C  
                              l2679 1BF4                                l2791 13A8  
                              l1889 1D2E                                l1897 1D58  
                              l2699 1C3A                                STR_1 1001  
                              STR_2 1012                                STR_3 1061  
                              STR_4 1077                                STR_5 1023  
                              STR_6 1055                                STR_7 1034  
                              STR_8 106C                                STR_9 1045  
                              u2111 17E2                                u2131 180A  
                              u1500 2058                                _LATA 000F89  
                              _LATB 000F8A                                u2231 1486  
                              _LATC 000F8B                                _LATD 000F8C  
                              u2161 15C4                                _LATE 000F8D  
                              u2250 14D0                                u2315 1746  
                              u1508 205A                                u2181 15F0  
                              u2255 14C6                                u1660 1F14  
                              u2517 13B8                                u2607 1EB6  
                              u1655 2086                                u2527 13D6  
                              u1656 2088                                u2617 1DE8  
                              u2537 1CCA                                u2627 1DF2  
                              u2547 1CF4                                u2637 1E14  
                              u2557 1B76                                u2647 1E1E  
                              u2567 1B82                                u2577 1BB6  
                              u2587 1BC4                                u2597 1E82  
                              _RCEN 007E2B                                i2l98 1A7E  
                              _RSEN 007E29                         _yopNoCapPos 005D  
                     __CFG_FCMEN$ON 000000                                _main 12F2  
                      ___ftpack@arg 0021                        ___ftpack@exp 0024  
                              fsr0h 000FEA                                fsr1h 000FE2  
                              fsr2h 000FDA                                fsr0l 000FE9  
                              fsr1l 000FE1                                fsr2l 000FD9  
                              btemp 005F                                prodh 000FF4  
                              prodl 000FF3                                start 000E  
                     __CFG_IESO$OFF 000000                       ?_bottleComing 0023  
                   ?_setChamberExit 0021                     __end_ofi2_putch 20AE  
                     __CFG_MCLRE$ON 000000                        ___ftmul@cntr 0084  
                      ___param_bank 000000                        ___ftmul@sign 0085  
                       i2_lcdNibble 1E26          rotateStepperMotor@numSteps 00A0  
                   ?_setFanRotation 0021                        ___fttol@exp1 0094  
                      ___fttol@lval 0090             setFanRotation@direction 0021  
                             ?_main 0001                               _ACKEN 007E2C  
                             _ACKDT 007E2D                               STR_10 1054  
                   __end_of___awmod 1C44                     __end_of___ftdiv 18B8  
                   __end_of___ftmul 16D4                     __end_of___fttol 15B4  
                             _PORTB 000F81                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                     __CFG_PWRT$OFF 000000                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                     __end_of_lcdInst 20A2  
                    __CFG_EBTR0$OFF 000000                      __CFG_EBTR1$OFF 000000  
                    __CFG_EBTR2$OFF 000000                      __CFG_EBTR3$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                     __end_of_initLCD 1EC2  
                    __CFG_EBTRB$OFF 000000                       ___awtoft@sign 002C  
   __size_of_dispDownloadToPCScreen 001A                       ___ftpack@sign 0025  
                             _putch 208A                       _laserDetected 204E  
                             pclath 000FFA                               tablat 000FF5  
                             status 000FD8                      ??_bottleComing 0025  
                    __CFG_PBADEN$ON 000000                __end_of_detectBottle 1970  
                  __end_ofi2_printf 1DD0                     __initialization 1F98  
                __size_ofi2_lcdInst 000C                        __end_of_main 1470  
                        i2printf@ap 0006                    _rotateContainers 107E  
                _rotateStepperMotor 16D4                              ??_main 00A6  
                     ___fttol@sign1 008F                __size_of_getDistance 006C  
               setLaserEmitter@emit 0021                       __activetblptr 000002  
           rotateStepperMotor@delay 009D                         ?i2_clearLCD 0001  
               ?_rotateStepperMotor 0095                     lcdWrite@string1 002A  
                   lcdWrite@string2 002C                              _ADCON1 000FC1  
                       ?i2_lcdWrite 000A                      ?_laserDetected 0021  
               setChamberEntrance@i 0024                     i2lcdNibble@data 0002  
                  __end_of___awtoft 1EFA                              ?_putch 0001  
                  __end_of___ftpack 1A1E                     i2lcdNibble@temp 0001  
                            _INT1IE 007F83                              _INT1IF 007F80  
                            i2l2333 1ADC                              i2l2343 1B04  
                            i2l2357 1B3A                              i2l2349 1B1A  
                            i2l1873 1D8C                              i2l1881 1DB6  
                            i2l1875 1D92                              i2l1869 1D7C  
                            i2l1879 1D9A                __end_of_dispMainMenu 1FCC  
                   _setLaserEmitter 1F7C                           ??i2_putch 0003  
                            _SSPADD 000FC8                              _TRISC3 007CA3  
                            _TRISC4 007CA4                              _SSPBUF 000FC9  
              dispCorrectScreen@key 000E                    __end_of_clearLCD 2070  
              __end_of_dispLogsMenu 201A                      __CFG_XINST$OFF 000000  
              ??_rotateStepperMotor 009B                    __end_of_lcdWrite 1F52  
            _dispDownloadToPCScreen 2034                      __CFG_STVREN$ON 000000  
                         ??___awmod 0025                           ??___ftdiv 0033  
                         ??___ftmul 0042                           ??___fttol 008A  
                            clear_0 1F9E                     ___awmod@divisor 0023  
                   ___awmod@counter 0025                           ??_lcdInst 0023  
                            _printf 1D14               ___ftmul@f3_as_product 0081  
                         ??_initLCD 0024           rotateStepperMotor@degrees 0095  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
      getDistance@ULTRASONIC_SENSOR 0021                   __end_ofi2_lcdInst 20BA  
       ??_dispLogsDisplayMenuScreen 000E                          __accesstop 0080  
           __end_of__initialization 1FA4                       ___rparam_used 000001  
                        ___ftdiv@f1 002D                          ___ftdiv@f2 0030  
                        ___ftdiv@f3 0037                          ___awtoft@c 0029  
                        ___ftmul@f1 003C                          ___ftmul@f2 003F  
                        ___fttol@f1 0086                 __size_ofi2_clearLCD 000E  
                    __pcstackCOMRAM 0001                 __size_ofi2_lcdWrite 002A  
                     __end_of_putch 2096                  __size_of_lcdNibble 0056  
                       i2putch@data 0003                     __CFG_OSC$INTIO7 000000  
              __end_of_bottleComing 1F28             __end_of_setLaserEmitter 1F98  
                   ??_laserDetected 0023                           ?i2_printf 0004  
                     _currentScreen 0045                             ??_putch 0023  
             __size_of_detectBottle 00B8                    ??_setChamberExit 0023  
                  ??_setFanRotation 0023       __size_of_setUpperDiscRotation 000C  
                      ?i2_lcdNibble 0001           _dispLogsDisplayMenuScreen 201A  
                         ?___awtoft 0029                           ?___ftpack 0021  
                           ?_printf 0024         __size_of_setChamberEntrance 0084  
                         ?_clearLCD 0001                        _detectBottle 18B8  
                        _eskaCapPos 0049               __size_of_dispMainMenu 001A  
                        ??i2_printf 0006                             _SSPCON1 000FC6  
                           _SSPCON2 000FC5                           ?_lcdWrite 002A  
                           _SSPSTAT 000FC7               __size_of_dispLogsMenu 001A  
          __end_of_rotateContainers 12F2                             i2_putch 20A2  
                 __end_of_lcdNibble 1E26                             __Hparam 0000  
                           __Lparam 0000              setChamberEntrance@open 0021  
    rotateStepperMotor@angularSpeed 0097                             ___awmod 1BD4  
                           ___ftdiv 17D2                             ___ftmul 15B4  
                           ___fttol 1470                        __psmallconst 1000  
                 _dispCorrectScreen 1ABA                             __pcinit 1F98  
                        ??___awtoft 002C                          ??___ftpack 0026  
                           __ramtop 1000                        _dispMainMenu 1FB2  
                           _lcdInst 2096                             __ptext0 12F2  
                           __ptext1 207E                             __ptext2 1F7C  
                           __ptext3 1CB0                             __ptext4 20BA  
                           __ptext5 1B50                             __ptext6 107E  
                           __ptext7 16D4                             __ptext8 1470  
                           __ptext9 15B4                     __size_of_printf 005E  
                         _T0CONbits 000FD5                  ?_dispCorrectScreen 000E  
                           _initLCD 1E7C                    ___awmod@dividend 0021  
           __size_ofi2_dispMainMenu 001A                        ??i2_clearLCD 0004  
                        ??_clearLCD 0024                        _dispLogsMenu 2000  
                        _keypressed 0008                    ?_setLaserEmitter 0021  
               ??_dispCorrectScreen 0010                        ??i2_lcdWrite 000E  
                        ??_lcdWrite 002E                      __pintcode_body 1A1E  
              end_of_initialization 1FA4                          _numEskaCap 0051  
                     __Lmediumconst 0000                             int_func 1A1E  
                        _numBottles 004F             ?_dispDownloadToPCScreen 0001  
                        _numSeconds 0055                             printf@c 0029  
                           printf@f 0024                  __end_ofi2_clearLCD 207E  
         __end_of_dispCorrectScreen 1B50                             postinc0 000FEE  
                     ??_getDistance 0023               __size_of_bottleComing 002E  
                __end_ofi2_lcdWrite 1F7C                        _machineState 004D  
                      _eskaNoCapPos 004B                      _detectedBottle 0047  
                         i2_lcdInst 20AE                         ___ftdiv@exp 003A  
    __end_of_dispDownloadToPCScreen 204E                        _bottleComing 1EFA  
       __size_of_rotateStepperMotor 00FE                         ___ftmul@exp 0080  
                 _dispSortingScreen 1FE6                __size_ofi2_lcdNibble 0056  
                ?_dispSortingScreen 0001                       i2lcdInst@data 0003  
                 detectBottle@noCap 0026                      __end_of_printf 1D72  
                      i2printf@flag 0008                 __end_of_getDistance 1CB0  
__size_of_dispLogsDisplayMenuScreen 001A                 start_initialization 1F98  
               ??_dispSortingScreen 000E                         ?_keypressed 0001  
                         i2printf@c 0009                           i2printf@f 0004  
                 __size_ofi2_printf 005E                          ?i2_lcdInst 0001  
                setChamberExit@open 0021           __end_of_dispSortingScreen 2000  
        __size_of_dispCorrectScreen 0096                    __CFG_LPT1OSC$OFF 000000  
                          ??_printf 0026        __end_of_setUpperDiscRotation 208A  
                 __size_of___awtoft 0038                   __size_of___ftpack 00AE  
                    i2_dispMainMenu 1FCC                         __pbssCOMRAM 0045  
                     __pcstackBANK0 0080   __end_of_dispLogsDisplayMenuScreen 2034  
                 __size_of_clearLCD 000E              setUpperDiscRotation@on 0021  
             __end_of_laserDetected 2062                   __size_of_lcdWrite 002A  
                          ?i2_putch 0001                   ?_rotateContainers 0001  
                ??_rotateContainers 0045                   __CFG_CCP2MX$PORTC 000000  
               __size_of_keypressed 1AB2                           __pintcode 0008  
                         _lcdNibble 1DD0                            ?___awmod 0021  
                          ?___ftdiv 002D                            ?___ftmul 003C  
                          ?___fttol 0086                         _getDistance 1C44  
        __end_of_setChamberEntrance 1BD4         rotateStepperMotor@direction 0099  
            __end_ofi2_dispMainMenu 1FE6                            ?_lcdInst 0001  
                          ?_initLCD 0001                         __smallconst 1000  
                    __size_of_putch 000C                         ??i2_lcdInst 0003  
                          _LATAbits 000F89                            _LATCbits 000F8B  
                          _LATDbits 000F8C          __size_of_dispSortingScreen 001A  
                          i2u265_47 1E3E                            i2u266_47 1E48  
                          i2u267_47 1E6A                            i2u268_47 1E74  
                         _numYopCap 0057                    __CFG_WDTPS$32768 000000  
                        ?_lcdNibble 0001             __size_of_setChamberExit 0002  
           __size_of_setFanRotation 0064                     ?i2_dispMainMenu 0001  
                     lcdNibble@data 0022                           _yopCapPos 005B  
                        printf@flag 0028                       lcdNibble@temp 0021  
           detectBottle@transparent 0024                            i2_printf 1D72  
          __size_of_setLaserEmitter 001C                    __size_ofi2_putch 000C  
           setChamberEntrance@i_532 0026                  keypressed@keypress 001F  
              _setUpperDiscRotation 207E                            __Hrparam 0000  
                          __Lrparam 0000                  __CFG_BOREN$SBORDIS 000000  
                      _numEskaNoCap 0053                    __size_of___awmod 0070  
                  __size_of___ftdiv 00E6                    __size_of___ftmul 0120  
                  __size_of___fttol 0144                            ___awtoft 1EC2  
                          ___ftpack 1970                    __size_of_lcdInst 000C  
                  __size_of_initLCD 0046                            _clearLCD 2062  
                      ??_keypressed 0010                            __ptext10 17D2  
                          __ptext11 1EC2                            __ptext20 2096  
                          __ptext12 1970                            __ptext21 1DD0  
                          __ptext13 1BD4                            __ptext30 2000  
                          __ptext22 18B8                            __ptext14 1E7C  
                          __ptext31 201A                            __ptext23 204E  
                          __ptext15 1FB2                            __ptext32 2034  
                          __ptext24 1EFA                            __ptext16 1F28  
                          __ptext33 1F52                            __ptext25 1C44  
                          __ptext17 1D14                            __ptext34 1D72  
                          __ptext18 208A                            __ptext35 20A2  
                          __ptext27 1ABA                            __ptext19 2062  
                          __ptext36 2070                            __ptext28 1FCC  
                          __ptext37 20AE                            __ptext29 1FE6  
                          __ptext38 1E26                            _lcdWrite 1F28  
                 i2lcdWrite@string1 000A                   i2lcdWrite@string2 000C  
                     __size_of_main 017E          __end_of_rotateStepperMotor 17D2  
             ?_setUpperDiscRotation 0021                       ??i2_lcdNibble 0001  
                       ??_lcdNibble 0021                  __end_of_keypressed 1ABA  
                          int$flags 005F                 rotateStepperMotor@i 00A2  
                         putch@data 0023                          _INTCONbits 000FF2  
                     ?_detectBottle 0001                            intlevel2 0000  
                    _setChamberExit 20BA                            printf@ap 0026  
                 ??_setLaserEmitter 0023                         _numYopNoCap 0059  
                      ?_getDistance 0021                         lcdInst@data 0023  
                    _setFanRotation 1CB0                       ?_dispMainMenu 0001  
         __size_of_rotateContainers 0274        rotateContainers@containerPos 00A4  
               __end_ofi2_lcdNibble 1E7C                      ??_detectBottle 0024  
                     ?_dispLogsMenu 0001            ??_dispDownloadToPCScreen 000E  
                _setChamberEntrance 1B50          ?_dispLogsDisplayMenuScreen 0001  
            ??_setUpperDiscRotation 0023                 ?_setChamberEntrance 0021  
            __end_of_setChamberExit 20BC  
