

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Feb 24 01:15:11 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           ; Version 1.40
    38                           ; Generated 01/12/2016 GMT
    39                           ; 
    40                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4620 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     _ADCON1	set	4033
    72  0000                     _INTCONbits	set	4082
    73  0000                     _LATA	set	3977
    74  0000                     _LATAbits	set	3977
    75  0000                     _LATB	set	3978
    76  0000                     _LATC	set	3979
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATD	set	3980
    79  0000                     _LATDbits	set	3980
    80  0000                     _PORTB	set	3969
    81  0000                     _SSPADD	set	4040
    82  0000                     _SSPBUF	set	4041
    83  0000                     _SSPCON1	set	4038
    84  0000                     _SSPCON2	set	4037
    85  0000                     _SSPSTAT	set	4039
    86  0000                     _TRISA	set	3986
    87  0000                     _TRISB	set	3987
    88  0000                     _TRISC	set	3988
    89  0000                     _TRISD	set	3989
    90  0000                     _ACKDT	set	32301
    91  0000                     _ACKEN	set	32300
    92  0000                     _INT1IE	set	32643
    93  0000                     _INT1IF	set	32640
    94  0000                     _PEN	set	32298
    95  0000                     _RCEN	set	32299
    96  0000                     _RSEN	set	32297
    97  0000                     _SEN	set	32296
    98  0000                     _TRISC3	set	31907
    99  0000                     _TRISC4	set	31908
   100                           
   101                           	psect	smallconst
   102  001000                     __psmallconst:
   103                           	opt stack 0
   104  001000  00                 	db	0
   105  001001                     STR_1:
   106  001001  31                 	db	49	;'1'
   107  001002  3A                 	db	58	;':'
   108  001003  53                 	db	83	;'S'
   109  001004  54                 	db	84	;'T'
   110  001005  41                 	db	65	;'A'
   111  001006  52                 	db	82	;'R'
   112  001007  54                 	db	84	;'T'
   113  001008  20                 	db	32
   114  001009  31                 	db	49	;'1'
   115  00100A  31                 	db	49	;'1'
   116  00100B  3A                 	db	58	;':'
   117  00100C  33                 	db	51	;'3'
   118  00100D  31                 	db	49	;'1'
   119  00100E  3A                 	db	58	;':'
   120  00100F  34                 	db	52	;'4'
   121  001010  35                 	db	53	;'5'
   122  001011  00                 	db	0
   123  001012                     STR_2:
   124  001012  32                 	db	50	;'2'
   125  001013  3A                 	db	58	;':'
   126  001014  4C                 	db	76	;'L'
   127  001015  4F                 	db	79	;'O'
   128  001016  47                 	db	71	;'G'
   129  001017  53                 	db	83	;'S'
   130  001018  20                 	db	32
   131  001019  20                 	db	32
   132  00101A  32                 	db	50	;'2'
   133  00101B  32                 	db	50	;'2'
   134  00101C  2F                 	db	47
   135  00101D  30                 	db	48	;'0'
   136  00101E  32                 	db	50	;'2'
   137  00101F  2F                 	db	47
   138  001020  31                 	db	49	;'1'
   139  001021  37                 	db	55	;'7'
   140  001022  00                 	db	0
   141  001023                     STR_5:
   142  001023  31                 	db	49	;'1'
   143  001024  3A                 	db	58	;':'
   144  001025  44                 	db	68	;'D'
   145  001026  4F                 	db	79	;'O'
   146  001027  57                 	db	87	;'W'
   147  001028  4E                 	db	78	;'N'
   148  001029  4C                 	db	76	;'L'
   149  00102A  4F                 	db	79	;'O'
   150  00102B  41                 	db	65	;'A'
   151  00102C  44                 	db	68	;'D'
   152  00102D  20                 	db	32
   153  00102E  33                 	db	51	;'3'
   154  00102F  3A                 	db	58	;':'
   155  001030  45                 	db	69	;'E'
   156  001031  53                 	db	83	;'S'
   157  001032  43                 	db	67	;'C'
   158  001033  00                 	db	0
   159  001034                     STR_7:
   160  001034  31                 	db	49	;'1'
   161  001035  3A                 	db	58	;':'
   162  001036  53                 	db	83	;'S'
   163  001037  43                 	db	67	;'C'
   164  001038  52                 	db	82	;'R'
   165  001039  4F                 	db	79	;'O'
   166  00103A  4C                 	db	76	;'L'
   167  00103B  4C                 	db	76	;'L'
   168  00103C  44                 	db	68	;'D'
   169  00103D  4E                 	db	78	;'N'
   170  00103E  20                 	db	32
   171  00103F  33                 	db	51	;'3'
   172  001040  3A                 	db	58	;':'
   173  001041  45                 	db	69	;'E'
   174  001042  53                 	db	83	;'S'
   175  001043  43                 	db	67	;'C'
   176  001044  00                 	db	0
   177  001045                     STR_9:
   178  001045  54                 	db	84	;'T'
   179  001046  52                 	db	82	;'R'
   180  001047  41                 	db	65	;'A'
   181  001048  4E                 	db	78	;'N'
   182  001049  53                 	db	83	;'S'
   183  00104A  46                 	db	70	;'F'
   184  00104B  45                 	db	69	;'E'
   185  00104C  52                 	db	82	;'R'
   186  00104D  52                 	db	82	;'R'
   187  00104E  49                 	db	73	;'I'
   188  00104F  4E                 	db	78	;'N'
   189  001050  47                 	db	71	;'G'
   190  001051  2E                 	db	46
   191  001052  2E                 	db	46
   192  001053  2E                 	db	46
   193  001054  00                 	db	0
   194  001055                     STR_6:
   195  001055  32                 	db	50	;'2'
   196  001056  3A                 	db	58	;':'
   197  001057  44                 	db	68	;'D'
   198  001058  49                 	db	73	;'I'
   199  001059  53                 	db	83	;'S'
   200  00105A  50                 	db	80	;'P'
   201  00105B  20                 	db	32
   202  00105C  4C                 	db	76	;'L'
   203  00105D  4F                 	db	79	;'O'
   204  00105E  47                 	db	71	;'G'
   205  00105F  53                 	db	83	;'S'
   206  001060  00                 	db	0
   207  001061                     STR_3:
   208  001061  53                 	db	83	;'S'
   209  001062  4F                 	db	79	;'O'
   210  001063  52                 	db	82	;'R'
   211  001064  54                 	db	84	;'T'
   212  001065  49                 	db	73	;'I'
   213  001066  4E                 	db	78	;'N'
   214  001067  47                 	db	71	;'G'
   215  001068  2E                 	db	46
   216  001069  2E                 	db	46
   217  00106A  2E                 	db	46
   218  00106B  00                 	db	0
   219  00106C                     STR_8:
   220  00106C  32                 	db	50	;'2'
   221  00106D  3A                 	db	58	;':'
   222  00106E  53                 	db	83	;'S'
   223  00106F  43                 	db	67	;'C'
   224  001070  52                 	db	82	;'R'
   225  001071  4F                 	db	79	;'O'
   226  001072  4C                 	db	76	;'L'
   227  001073  4C                 	db	76	;'L'
   228  001074  55                 	db	85	;'U'
   229  001075  50                 	db	80	;'P'
   230  001076  00                 	db	0
   231  001077                     STR_4:
   232  001077  30                 	db	48	;'0'
   233  001078  3A                 	db	58	;':'
   234  001079  34                 	db	52	;'4'
   235  00107A  37                 	db	55	;'7'
   236  00107B  00                 	db	0
   237  0000                     
   238                           ; #config settings
   239  00107C  00                 	db	0	; dummy byte at the end
   240  0000                     
   241                           	psect	cinit
   242  001456                     __pcinit:
   243                           	opt stack 0
   244  001456                     start_initialization:
   245                           	opt stack 0
   246  001456                     __initialization:
   247                           	opt stack 0
   248                           
   249                           ; Clear objects allocated to COMRAM (16 bytes)
   250  001456  EE00  F02E         	lfsr	0,__pbssCOMRAM
   251  00145A  0E10               	movlw	16
   252  00145C                     clear_0:
   253  00145C  6AEE               	clrf	postinc0,c
   254  00145E  06E8               	decf	wreg,f,c
   255  001460  E1FD               	bnz	clear_0
   256  001462                     end_of_initialization:
   257                           	opt stack 0
   258  001462                     __end_of__initialization:
   259                           	opt stack 0
   260  001462  903E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   261  001464  923E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   262  001466  0E00               	movlw	low (__Lmediumconst shr (0+16))
   263  001468  6EF8               	movwf	tblptru,c
   264  00146A  0100               	movlb	0
   265  00146C  EFD8  F008         	goto	_main	;jump to C main() function
   266                           tblptru	equ	0xFF8
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	bssCOMRAM
   271  00002E                     __pbssCOMRAM:
   272                           	opt stack 0
   273  00002E                     _currentScreen:
   274                           	opt stack 0
   275  00002E                     	ds	2
   276  000030                     _machineState:
   277                           	opt stack 0
   278  000030                     	ds	2
   279  000032                     _numBottles:
   280                           	opt stack 0
   281  000032                     	ds	2
   282  000034                     _numEskaCap:
   283                           	opt stack 0
   284  000034                     	ds	2
   285  000036                     _numEskaNoCap:
   286                           	opt stack 0
   287  000036                     	ds	2
   288  000038                     _numSeconds:
   289                           	opt stack 0
   290  000038                     	ds	2
   291  00003A                     _numYopCap:
   292                           	opt stack 0
   293  00003A                     	ds	2
   294  00003C                     _numYopNoCap:
   295                           	opt stack 0
   296  00003C                     	ds	2
   297                           tblptru	equ	0xFF8
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           
   301                           	psect	cstackCOMRAM
   302  000001                     __pcstackCOMRAM:
   303                           	opt stack 0
   304  000001                     i2lcdNibble@temp:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x0
   308  000001                     	ds	1
   309  000002                     i2lcdNibble@data:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x1
   313  000002                     	ds	1
   314  000003                     i2lcdInst@data:
   315                           	opt stack 0
   316  000003                     i2putch@data:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x2
   320  000003                     	ds	1
   321  000004                     ?i2_printf:
   322                           	opt stack 0
   323  000004                     i2printf@f:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x3
   327  000004                     	ds	2
   328  000006                     i2printf@ap:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x5
   332  000006                     	ds	2
   333  000008                     i2printf@flag:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x7
   337  000008                     	ds	1
   338  000009                     i2printf@c:
   339                           	opt stack 0
   340                           
   341                           ; 1 bytes @ 0x8
   342  000009                     	ds	1
   343  00000A                     i2lcdWrite@string1:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x9
   347  00000A                     	ds	2
   348  00000C                     i2lcdWrite@string2:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0xB
   352  00000C                     	ds	2
   353  00000E                     dispCorrectScreen@key:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0xD
   357  00000E                     	ds	2
   358  000010                     ??_keypressed:
   359                           
   360                           ; 1 bytes @ 0xF
   361  000010                     	ds	15
   362  00001F                     keypressed@keypress:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x1E
   366  00001F                     	ds	2
   367  000021                     lcdNibble@temp:
   368                           	opt stack 0
   369  000021                     transferToContainer@i:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x20
   373  000021                     	ds	1
   374  000022                     lcdNibble@data:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x21
   378  000022                     	ds	1
   379  000023                     lcdInst@data:
   380                           	opt stack 0
   381  000023                     putch@data:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x22
   385  000023                     	ds	1
   386  000024                     ??_initLCD:
   387  000024                     ?_printf:
   388                           	opt stack 0
   389  000024                     printf@f:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x23
   393  000024                     	ds	2
   394  000026                     printf@ap:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x25
   398  000026                     	ds	2
   399  000028                     printf@flag:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x27
   403  000028                     	ds	1
   404  000029                     printf@c:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x28
   408  000029                     	ds	1
   409  00002A                     lcdWrite@string1:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x29
   413  00002A                     	ds	2
   414  00002C                     lcdWrite@string2:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x2B
   418  00002C                     	ds	2
   419  00002E                     tblptru	equ	0xFF8
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           
   423                           ; 1 bytes @ 0x2D
   424 ;;
   425 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   426 ;;
   427 ;; *************** function _main *****************
   428 ;; Defined at:
   429 ;;		line 36 in file "main.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;		None
   432 ;; Auto vars:     Size  Location     Type
   433 ;;		None
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;Total ram usage:        0 bytes
   448 ;; Hardware stack levels required when called:   12
   449 ;; This function calls:
   450 ;;		_dispMainMenu
   451 ;;		_initLCD
   452 ;;		_transferToContainer
   453 ;; This function is called by:
   454 ;;		Startup code after reset
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           	psect	text0
   459  0011B0                     __ptext0:
   460                           	opt stack 0
   461  0011B0                     _main:
   462                           	opt stack 19
   463                           
   464                           ;main.c: 39: TRISA = 0x00;
   465                           
   466                           ;incstack = 0
   467  0011B0  0E00               	movlw	0
   468  0011B2  6E92               	movwf	3986,c	;volatile
   469                           
   470                           ;main.c: 40: TRISC = 0x00;
   471  0011B4  0E00               	movlw	0
   472  0011B6  6E94               	movwf	3988,c	;volatile
   473                           
   474                           ;main.c: 41: TRISD = 0x00;
   475  0011B8  0E00               	movlw	0
   476  0011BA  6E95               	movwf	3989,c	;volatile
   477                           
   478                           ;main.c: 42: TRISB = 0xFF;
   479  0011BC  6893               	setf	3987,c	;volatile
   480                           
   481                           ;main.c: 43: LATA = 0x00;
   482  0011BE  0E00               	movlw	0
   483  0011C0  6E89               	movwf	3977,c	;volatile
   484                           
   485                           ;main.c: 44: LATB = 0x00;
   486  0011C2  0E00               	movlw	0
   487  0011C4  6E8A               	movwf	3978,c	;volatile
   488                           
   489                           ;main.c: 45: LATC = 0x00;
   490  0011C6  0E00               	movlw	0
   491  0011C8  6E8B               	movwf	3979,c	;volatile
   492                           
   493                           ;main.c: 46: ADCON1 = 0xFF;
   494  0011CA  68C1               	setf	4033,c	;volatile
   495                           
   496                           ;main.c: 48: initLCD();
   497  0011CC  ECC6  F009         	call	_initLCD	;wreg free
   498                           
   499                           ;main.c: 50: INT1IE = 1;
   500  0011D0  86F0               	bsf	intcon3,3,c	;volatile
   501                           
   502                           ;main.c: 51: (INTCONbits.GIE = 1);
   503  0011D2  8EF2               	bsf	intcon,7,c	;volatile
   504                           
   505                           ;main.c: 54: currentScreen = 3;
   506  0011D4  0E00               	movlw	0
   507  0011D6  6E2F               	movwf	_currentScreen+1,c
   508  0011D8  0E03               	movlw	3
   509  0011DA  6E2E               	movwf	_currentScreen,c
   510                           
   511                           ;main.c: 55: machineState = 1;
   512  0011DC  0E00               	movlw	0
   513  0011DE  6E31               	movwf	_machineState+1,c
   514  0011E0  0E01               	movlw	1
   515  0011E2  6E30               	movwf	_machineState,c
   516                           
   517                           ;main.c: 56: dispMainMenu();
   518  0011E4  EC38  F00A         	call	_dispMainMenu	;wreg free
   519                           
   520                           ;main.c: 59: numBottles = 0;
   521  0011E8  0E00               	movlw	0
   522  0011EA  6E33               	movwf	_numBottles+1,c
   523  0011EC  0E00               	movlw	0
   524  0011EE  6E32               	movwf	_numBottles,c
   525                           
   526                           ;main.c: 60: numEskaNoCap = 0;
   527  0011F0  0E00               	movlw	0
   528  0011F2  6E37               	movwf	_numEskaNoCap+1,c
   529  0011F4  0E00               	movlw	0
   530  0011F6  6E36               	movwf	_numEskaNoCap,c
   531                           
   532                           ;main.c: 61: numEskaCap = 0;
   533  0011F8  0E00               	movlw	0
   534  0011FA  6E35               	movwf	_numEskaCap+1,c
   535  0011FC  0E00               	movlw	0
   536  0011FE  6E34               	movwf	_numEskaCap,c
   537                           
   538                           ;main.c: 62: numYopNoCap = 0;
   539  001200  0E00               	movlw	0
   540  001202  6E3D               	movwf	_numYopNoCap+1,c
   541  001204  0E00               	movlw	0
   542  001206  6E3C               	movwf	_numYopNoCap,c
   543                           
   544                           ;main.c: 63: numYopCap = 0;
   545  001208  0E00               	movlw	0
   546  00120A  6E3B               	movwf	_numYopCap+1,c
   547  00120C  0E00               	movlw	0
   548  00120E  6E3A               	movwf	_numYopCap,c
   549                           
   550                           ;main.c: 64: numSeconds = 0;
   551  001210  0E00               	movlw	0
   552  001212  6E39               	movwf	_numSeconds+1,c
   553  001214  0E00               	movlw	0
   554  001216  6E38               	movwf	_numSeconds,c
   555                           
   556                           ;main.c: 67: transferToContainer();
   557  001218  ECE9  F009         	call	_transferToContainer	;wreg free
   558  00121C                     l51:
   559  00121C  D7FF               	goto	l51
   560  00121E                     l54:
   561                           
   562                           ;main.c: 74: (INTCONbits.GIE = 0);
   563  00121E  9EF2               	bcf	intcon,7,c	;volatile
   564                           
   565                           ;main.c: 75: (INTCONbits.GIE = 1);
   566  001220  8EF2               	bsf	intcon,7,c	;volatile
   567  001222  D7FD               	goto	l54
   568  001224                     __end_of_main:
   569                           	opt stack 0
   570                           tblptru	equ	0xFF8
   571                           intcon	equ	0xFF2
   572                           intcon3	equ	0xFF0
   573                           postinc0	equ	0xFEE
   574                           wreg	equ	0xFE8
   575                           
   576 ;; *************** function _transferToContainer *****************
   577 ;; Defined at:
   578 ;;		line 87 in file "controlMotors.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;  i               2   32[COMRAM] int 
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg, status,2, status,0
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   595 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   596 ;;Total ram usage:        2 bytes
   597 ;; Hardware stack levels used:    1
   598 ;; Hardware stack levels required when called:    7
   599 ;; This function calls:
   600 ;;		Nothing
   601 ;; This function is called by:
   602 ;;		_main
   603 ;; This function uses a non-reentrant model
   604 ;;
   605                           
   606                           	psect	text1
   607  0013D2                     __ptext1:
   608                           	opt stack 0
   609  0013D2                     _transferToContainer:
   610                           	opt stack 23
   611                           
   612                           ;controlMotors.c: 90: LATCbits.LC0=0; ;
   613                           
   614                           ;incstack = 0
   615  0013D2  908B               	bcf	3979,0,c	;volatile
   616                           
   617                           ;controlMotors.c: 91: int i;
   618                           ;controlMotors.c: 92: for (i=0;i<4096;i++){
   619  0013D4  0E00               	movlw	0
   620  0013D6  6E22               	movwf	transferToContainer@i+1,c
   621  0013D8  0E00               	movlw	0
   622  0013DA  6E21               	movwf	transferToContainer@i,c
   623  0013DC                     l1045:
   624  0013DC  BE22               	btfsc	transferToContainer@i+1,7,c
   625  0013DE  D004               	goto	l258
   626  0013E0  0E10               	movlw	16
   627  0013E2  5C22               	subwf	transferToContainer@i+1,w,c
   628  0013E4  B0D8               	btfsc	status,0,c
   629  0013E6  0012               	return	
   630  0013E8                     l258:
   631                           
   632                           ;controlMotors.c: 93: LATCbits.LC1=1;
   633  0013E8  828B               	bsf	3979,1,c	;volatile
   634                           
   635                           ;controlMotors.c: 94: _delay((unsigned long)((100*0.001)*(10000000/4000.0)));
   636  0013EA  0E53               	movlw	83
   637  0013EC                     u497:
   638  0013EC  2EE8               	decfsz	wreg,f,c
   639  0013EE  D7FE               	bra	u497
   640  0013F0  F000               	nop	
   641                           
   642                           ;controlMotors.c: 95: LATCbits.LC1=0;
   643  0013F2  928B               	bcf	3979,1,c	;volatile
   644                           
   645                           ;controlMotors.c: 96: _delay((unsigned long)((100*0.001)*(10000000/4000.0)));
   646  0013F4  0E53               	movlw	83
   647  0013F6                     u507:
   648  0013F6  2EE8               	decfsz	wreg,f,c
   649  0013F8  D7FE               	bra	u507
   650  0013FA  F000               	nop	
   651  0013FC  4A21               	infsnz	transferToContainer@i,f,c
   652  0013FE  2A22               	incf	transferToContainer@i+1,f,c
   653  001400  D7ED               	goto	l1045
   654  001402                     __end_of_transferToContainer:
   655                           	opt stack 0
   656                           tblptru	equ	0xFF8
   657                           intcon	equ	0xFF2
   658                           intcon3	equ	0xFF0
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           status	equ	0xFD8
   662                           
   663 ;; *************** function _initLCD *****************
   664 ;; Defined at:
   665 ;;		line 9 in file "LCD.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;		None
   668 ;; Auto vars:     Size  Location     Type
   669 ;;		None
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      void 
   672 ;; Registers used:
   673 ;;		wreg, status,2, status,0, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   681 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   683 ;;Total ram usage:        1 bytes
   684 ;; Hardware stack levels used:    1
   685 ;; Hardware stack levels required when called:    9
   686 ;; This function calls:
   687 ;;		_lcdInst
   688 ;; This function is called by:
   689 ;;		_main
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           	psect	text2
   694  00138C                     __ptext2:
   695                           	opt stack 0
   696  00138C                     _initLCD:
   697                           	opt stack 21
   698                           
   699                           ;LCD.c: 10: _delay((unsigned long)((15)*(10000000/4000.0)));
   700                           
   701                           ;incstack = 0
   702  00138C  0E31               	movlw	49
   703  00138E  6E24               	movwf	??_initLCD& (0+255),c
   704  001390  0EB2               	movlw	178
   705  001392                     u517:
   706  001392  2EE8               	decfsz	wreg,f,c
   707  001394  D7FE               	bra	u517
   708  001396  2E24               	decfsz	??_initLCD& (0+255),f,c
   709  001398  D7FC               	bra	u517
   710  00139A  D000               	nop2	
   711                           
   712                           ;LCD.c: 11: lcdInst(0b00110011);
   713  00139C  0E33               	movlw	51
   714  00139E  EC9A  F00A         	call	_lcdInst
   715                           
   716                           ;LCD.c: 12: lcdInst(0b00110010);
   717  0013A2  0E32               	movlw	50
   718  0013A4  EC9A  F00A         	call	_lcdInst
   719                           
   720                           ;LCD.c: 13: lcdInst(0b00101000);
   721  0013A8  0E28               	movlw	40
   722  0013AA  EC9A  F00A         	call	_lcdInst
   723                           
   724                           ;LCD.c: 14: lcdInst(0b00001111);
   725  0013AE  0E0F               	movlw	15
   726  0013B0  EC9A  F00A         	call	_lcdInst
   727                           
   728                           ;LCD.c: 15: lcdInst(0b00000110);
   729  0013B4  0E06               	movlw	6
   730  0013B6  EC9A  F00A         	call	_lcdInst
   731                           
   732                           ;LCD.c: 16: lcdInst(0b00000001);
   733  0013BA  0E01               	movlw	1
   734  0013BC  EC9A  F00A         	call	_lcdInst
   735                           
   736                           ;LCD.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
   737  0013C0  0E31               	movlw	49
   738  0013C2  6E24               	movwf	??_initLCD& (0+255),c
   739  0013C4  0EB2               	movlw	178
   740  0013C6                     u527:
   741  0013C6  2EE8               	decfsz	wreg,f,c
   742  0013C8  D7FE               	bra	u527
   743  0013CA  2E24               	decfsz	??_initLCD& (0+255),f,c
   744  0013CC  D7FC               	bra	u527
   745  0013CE  D000               	nop2	
   746  0013D0  0012               	return		;funcret
   747  0013D2                     __end_of_initLCD:
   748                           	opt stack 0
   749                           tblptru	equ	0xFF8
   750                           intcon	equ	0xFF2
   751                           intcon3	equ	0xFF0
   752                           postinc0	equ	0xFEE
   753                           wreg	equ	0xFE8
   754                           status	equ	0xFD8
   755                           
   756 ;; *************** function _dispMainMenu *****************
   757 ;; Defined at:
   758 ;;		line 66 in file "LCD.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;		None
   761 ;; Auto vars:     Size  Location     Type
   762 ;;		None
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   776 ;;Total ram usage:        0 bytes
   777 ;; Hardware stack levels used:    1
   778 ;; Hardware stack levels required when called:   11
   779 ;; This function calls:
   780 ;;		_clearLCD
   781 ;;		_lcdWrite
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text3
   788  001470                     __ptext3:
   789                           	opt stack 0
   790  001470                     _dispMainMenu:
   791                           	opt stack 19
   792                           
   793                           ;LCD.c: 67: clearLCD();
   794                           
   795                           ;incstack = 0
   796  001470  EC86  F00A         	call	_clearLCD	;wreg free
   797                           
   798                           ;LCD.c: 68: lcdWrite("1:START 11:31:45", "2:LOGS  22/02/17");
   799  001474  0E01               	movlw	low STR_1
   800  001476  6E2A               	movwf	lcdWrite@string1,c
   801  001478  0E10               	movlw	high STR_1
   802  00147A  6E2B               	movwf	lcdWrite@string1+1,c
   803  00147C  0E12               	movlw	low STR_2
   804  00147E  6E2C               	movwf	lcdWrite@string2,c
   805  001480  0E10               	movlw	high STR_2
   806  001482  6E2D               	movwf	lcdWrite@string2+1,c
   807  001484  EC01  F00A         	call	_lcdWrite	;wreg free
   808  001488  0012               	return		;funcret
   809  00148A                     __end_of_dispMainMenu:
   810                           	opt stack 0
   811                           tblptru	equ	0xFF8
   812                           intcon	equ	0xFF2
   813                           intcon3	equ	0xFF0
   814                           postinc0	equ	0xFEE
   815                           wreg	equ	0xFE8
   816                           status	equ	0xFD8
   817                           
   818 ;; *************** function _lcdWrite *****************
   819 ;; Defined at:
   820 ;;		line 53 in file "LCD.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;  string1         2   41[COMRAM] PTR unsigned char 
   823 ;;		 -> STR_9(16), STR_7(17), STR_5(17), STR_3(11), 
   824 ;;		 -> STR_1(17), 
   825 ;;  string2         2   43[COMRAM] PTR unsigned char 
   826 ;;		 -> STR_10(1), STR_8(11), STR_6(12), STR_4(5), 
   827 ;;		 -> STR_2(17), 
   828 ;; Auto vars:     Size  Location     Type
   829 ;;		None
   830 ;; Return value:  Size  Location     Type
   831 ;;                  1    wreg      void 
   832 ;; Registers used:
   833 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   834 ;; Tracked objects:
   835 ;;		On entry : 0/0
   836 ;;		On exit  : 0/0
   837 ;;		Unchanged: 0/0
   838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   839 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   842 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   843 ;;Total ram usage:        4 bytes
   844 ;; Hardware stack levels used:    1
   845 ;; Hardware stack levels required when called:   10
   846 ;; This function calls:
   847 ;;		_clearLCD
   848 ;;		_lcdInst
   849 ;;		_printf
   850 ;; This function is called by:
   851 ;;		_dispMainMenu
   852 ;; This function uses a non-reentrant model
   853 ;;
   854                           
   855                           	psect	text4
   856  001402                     __ptext4:
   857                           	opt stack 0
   858  001402                     _lcdWrite:
   859                           	opt stack 19
   860                           
   861                           ;LCD.c: 54: clearLCD();
   862                           
   863                           ;incstack = 0
   864  001402  EC86  F00A         	call	_clearLCD	;wreg free
   865                           
   866                           ;LCD.c: 55: printf(string1);
   867  001406  C02A  F024         	movff	lcdWrite@string1,printf@f
   868  00140A  C02B  F025         	movff	lcdWrite@string1+1,printf@f+1
   869  00140E  EC12  F009         	call	_printf	;wreg free
   870                           
   871                           ;LCD.c: 56: lcdInst(0b11000000);
   872  001412  0EC0               	movlw	192
   873  001414  EC9A  F00A         	call	_lcdInst
   874                           
   875                           ;LCD.c: 57: printf(string2);
   876  001418  C02C  F024         	movff	lcdWrite@string2,printf@f
   877  00141C  C02D  F025         	movff	lcdWrite@string2+1,printf@f+1
   878  001420  EC12  F009         	call	_printf	;wreg free
   879                           
   880                           ;LCD.c: 58: lcdInst(0b1100);
   881  001424  0E0C               	movlw	12
   882  001426  EC9A  F00A         	call	_lcdInst
   883  00142A  0012               	return		;funcret
   884  00142C                     __end_of_lcdWrite:
   885                           	opt stack 0
   886                           tblptru	equ	0xFF8
   887                           intcon	equ	0xFF2
   888                           intcon3	equ	0xFF0
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           status	equ	0xFD8
   892                           
   893 ;; *************** function _printf *****************
   894 ;; Defined at:
   895 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
   896 ;; Parameters:    Size  Location     Type
   897 ;;  f               2   35[COMRAM] PTR const unsigned char 
   898 ;;		 -> STR_10(1), STR_9(16), STR_8(11), STR_7(17), 
   899 ;;		 -> STR_6(12), STR_5(17), STR_4(5), STR_3(11), 
   900 ;;		 -> STR_2(17), STR_1(17), 
   901 ;; Auto vars:     Size  Location     Type
   902 ;;  tmpval          4    0        struct .
   903 ;;  cp              3    0        PTR const unsigned char 
   904 ;;  ap              2   37[COMRAM] PTR void [1]
   905 ;;		 -> ?i2_printf(2), ?_printf(2), 
   906 ;;  len             2    0        unsigned int 
   907 ;;  val             2    0        unsigned int 
   908 ;;  c               1   40[COMRAM] char 
   909 ;;  flag            1   39[COMRAM] unsigned char 
   910 ;;  prec            1    0        char 
   911 ;; Return value:  Size  Location     Type
   912 ;;                  2   35[COMRAM] int 
   913 ;; Registers used:
   914 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   920 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;Total ram usage:        6 bytes
   925 ;; Hardware stack levels used:    1
   926 ;; Hardware stack levels required when called:    9
   927 ;; This function calls:
   928 ;;		_putch
   929 ;; This function is called by:
   930 ;;		_lcdWrite
   931 ;; This function uses a non-reentrant model
   932 ;;
   933                           
   934                           	psect	text5
   935  001224                     __ptext5:
   936                           	opt stack 0
   937  001224                     _printf:
   938                           	opt stack 19
   939                           
   940                           ;doprnt.c: 466: va_list ap;
   941                           ;doprnt.c: 499: signed char c;
   942                           ;doprnt.c: 506: signed char prec;
   943                           ;doprnt.c: 508: unsigned char flag;
   944                           ;doprnt.c: 523: union {
   945                           ;doprnt.c: 524: unsigned long vd;
   946                           ;doprnt.c: 525: double integ;
   947                           ;doprnt.c: 526: } tmpval;
   948                           ;doprnt.c: 528: unsigned int val;
   949                           ;doprnt.c: 529: unsigned len;
   950                           ;doprnt.c: 530: const char * cp;
   951                           ;doprnt.c: 533: *ap = __va_start();
   952                           
   953                           ;incstack = 0
   954  001224  0E26               	movlw	low (?_printf+2)
   955  001226  6E26               	movwf	printf@ap,c
   956  001228  0E00               	movlw	high (?_printf+2)
   957  00122A  6E27               	movwf	printf@ap+1,c
   958                           
   959                           ;doprnt.c: 536: while(c = *f++) {
   960  00122C  D01D               	goto	l1311
   961  00122E                     l1299:
   962                           
   963                           ;doprnt.c: 538: if(c != '%')
   964  00122E  0E25               	movlw	37
   965  001230  1829               	xorwf	printf@c,w,c
   966  001232  B4D8               	btfsc	status,2,c
   967  001234  D004               	goto	l1303
   968                           
   969                           ;doprnt.c: 540: {
   970                           ;doprnt.c: 541: (putch(c) );
   971  001236  5029               	movf	printf@c,w,c
   972  001238  EC94  F00A         	call	_putch
   973                           
   974                           ;doprnt.c: 542: continue;
   975  00123C  D015               	goto	l1311
   976  00123E                     l1303:
   977                           
   978                           ;doprnt.c: 543: }
   979                           ;doprnt.c: 548: flag = 0;
   980  00123E  0E00               	movlw	0
   981  001240  6E28               	movwf	printf@flag,c
   982                           
   983                           ;doprnt.c: 635: switch(c = *f++) {
   984  001242  D004               	goto	l1309
   985  001244                     l1305:
   986                           
   987                           ;doprnt.c: 809: (putch(c) );
   988  001244  5029               	movf	printf@c,w,c
   989  001246  EC94  F00A         	call	_putch
   990                           
   991                           ;doprnt.c: 822: }
   992                           
   993                           ;doprnt.c: 810: continue;
   994  00124A  D00E               	goto	l1311
   995  00124C                     l1309:
   996  00124C  C024  FFF6         	movff	printf@f,tblptrl
   997  001250  C025  FFF7         	movff	printf@f+1,tblptrh
   998  001254  4A24               	infsnz	printf@f,f,c
   999  001256  2A25               	incf	printf@f+1,f,c
  1000  001258                     	if	0	;tblptru may be non-zero
  1001  001258                     	endif
  1002  001258                     	if	0	;tblptru may be non-zero
  1003  001258                     	endif
  1004  001258  0008               	tblrd		*
  1005  00125A  CFF5 F029          	movff	tablat,printf@c
  1006  00125E  5029               	movf	printf@c,w,c
  1007                           
  1008                           ; Switch size 1, requested type "space"
  1009                           ; Number of cases is 1, Range of values is 0 to 0
  1010                           ; switch strategies available:
  1011                           ; Name         Instructions Cycles
  1012                           ; simple_byte            4     3 (average)
  1013                           ;	Chosen strategy is simple_byte
  1014  001260  0A00               	xorlw	0	; case 0
  1015  001262  B4D8               	btfsc	status,2,c
  1016  001264  0012               	return	
  1017  001266  D7EE               	goto	l1305
  1018  001268                     l1311:
  1019  001268  C024  FFF6         	movff	printf@f,tblptrl
  1020  00126C  C025  FFF7         	movff	printf@f+1,tblptrh
  1021  001270  4A24               	infsnz	printf@f,f,c
  1022  001272  2A25               	incf	printf@f+1,f,c
  1023  001274                     	if	0	;tblptru may be non-zero
  1024  001274                     	endif
  1025  001274                     	if	0	;tblptru may be non-zero
  1026  001274                     	endif
  1027  001274  0008               	tblrd		*
  1028  001276  CFF5 F029          	movff	tablat,printf@c
  1029  00127A  5029               	movf	printf@c,w,c
  1030  00127C  B4D8               	btfsc	status,2,c
  1031  00127E  0012               	return	
  1032  001280  D7D6               	goto	l1299
  1033  001282                     __end_of_printf:
  1034                           	opt stack 0
  1035                           tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           tblptrl	equ	0xFF6
  1038                           tablat	equ	0xFF5
  1039                           intcon	equ	0xFF2
  1040                           intcon3	equ	0xFF0
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           status	equ	0xFD8
  1044                           
  1045 ;; *************** function _putch *****************
  1046 ;; Defined at:
  1047 ;;		line 25 in file "LCD.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  data            1    wreg     unsigned char 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  data            1   34[COMRAM] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1064 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1065 ;;Total ram usage:        1 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    8
  1068 ;; This function calls:
  1069 ;;		_lcdNibble
  1070 ;; This function is called by:
  1071 ;;		_printf
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075                           	psect	text6
  1076  001528                     __ptext6:
  1077                           	opt stack 0
  1078  001528                     _putch:
  1079                           	opt stack 19
  1080                           
  1081                           ;incstack = 0
  1082                           ;putch@data stored from wreg
  1083  001528  6E23               	movwf	putch@data,c
  1084                           
  1085                           ;LCD.c: 26: LATDbits.LATD2 = 1;
  1086  00152A  848C               	bsf	3980,2,c	;volatile
  1087                           
  1088                           ;LCD.c: 27: lcdNibble(data);
  1089  00152C  5023               	movf	putch@data,w,c
  1090  00152E  EC70  F009         	call	_lcdNibble
  1091  001532  0012               	return		;funcret
  1092  001534                     __end_of_putch:
  1093                           	opt stack 0
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           intcon	equ	0xFF2
  1099                           intcon3	equ	0xFF0
  1100                           postinc0	equ	0xFEE
  1101                           wreg	equ	0xFE8
  1102                           status	equ	0xFD8
  1103                           
  1104 ;; *************** function _clearLCD *****************
  1105 ;; Defined at:
  1106 ;;		line 61 in file "LCD.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, status,2, status,0, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1124 ;;Total ram usage:        0 bytes
  1125 ;; Hardware stack levels used:    1
  1126 ;; Hardware stack levels required when called:    9
  1127 ;; This function calls:
  1128 ;;		_lcdInst
  1129 ;; This function is called by:
  1130 ;;		_lcdWrite
  1131 ;;		_dispMainMenu
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135                           	psect	text7
  1136  00150C                     __ptext7:
  1137                           	opt stack 0
  1138  00150C                     _clearLCD:
  1139                           	opt stack 19
  1140                           
  1141                           ;LCD.c: 62: lcdInst(0b01);
  1142                           
  1143                           ;incstack = 0
  1144  00150C  0E01               	movlw	1
  1145  00150E  EC9A  F00A         	call	_lcdInst
  1146                           
  1147                           ;LCD.c: 63: lcdInst(0x10);
  1148  001512  0E10               	movlw	16
  1149  001514  EC9A  F00A         	call	_lcdInst
  1150  001518  0012               	return		;funcret
  1151  00151A                     __end_of_clearLCD:
  1152                           	opt stack 0
  1153                           tblptru	equ	0xFF8
  1154                           tblptrh	equ	0xFF7
  1155                           tblptrl	equ	0xFF6
  1156                           tablat	equ	0xFF5
  1157                           intcon	equ	0xFF2
  1158                           intcon3	equ	0xFF0
  1159                           postinc0	equ	0xFEE
  1160                           wreg	equ	0xFE8
  1161                           status	equ	0xFD8
  1162                           
  1163 ;; *************** function _lcdInst *****************
  1164 ;; Defined at:
  1165 ;;		line 20 in file "LCD.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;  data            1    wreg     unsigned char 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  data            1   34[COMRAM] unsigned char 
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2, status,0, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1182 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1183 ;;Total ram usage:        1 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; Hardware stack levels required when called:    8
  1186 ;; This function calls:
  1187 ;;		_lcdNibble
  1188 ;; This function is called by:
  1189 ;;		_initLCD
  1190 ;;		_lcdWrite
  1191 ;;		_clearLCD
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           	psect	text8
  1196  001534                     __ptext8:
  1197                           	opt stack 0
  1198  001534                     _lcdInst:
  1199                           	opt stack 21
  1200                           
  1201                           ;incstack = 0
  1202                           ;lcdInst@data stored from wreg
  1203  001534  6E23               	movwf	lcdInst@data,c
  1204                           
  1205                           ;LCD.c: 21: LATDbits.LATD2 = 0;
  1206  001536  948C               	bcf	3980,2,c	;volatile
  1207                           
  1208                           ;LCD.c: 22: lcdNibble(data);
  1209  001538  5023               	movf	lcdInst@data,w,c
  1210  00153A  EC70  F009         	call	_lcdNibble
  1211  00153E  0012               	return		;funcret
  1212  001540                     __end_of_lcdInst:
  1213                           	opt stack 0
  1214                           tblptru	equ	0xFF8
  1215                           tblptrh	equ	0xFF7
  1216                           tblptrl	equ	0xFF6
  1217                           tablat	equ	0xFF5
  1218                           intcon	equ	0xFF2
  1219                           intcon3	equ	0xFF0
  1220                           postinc0	equ	0xFEE
  1221                           wreg	equ	0xFE8
  1222                           status	equ	0xFD8
  1223                           
  1224 ;; *************** function _lcdNibble *****************
  1225 ;; Defined at:
  1226 ;;		line 30 in file "LCD.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  data            1    wreg     unsigned char 
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;  data            1   33[COMRAM] unsigned char 
  1231 ;;  temp            1   32[COMRAM] unsigned char 
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  1    wreg      void 
  1234 ;; Registers used:
  1235 ;;		wreg, status,2, status,0
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1242 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;Total ram usage:        2 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; Hardware stack levels required when called:    7
  1248 ;; This function calls:
  1249 ;;		Nothing
  1250 ;; This function is called by:
  1251 ;;		_lcdInst
  1252 ;;		_putch
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           	psect	text9
  1257  0012E0                     __ptext9:
  1258                           	opt stack 0
  1259  0012E0                     _lcdNibble:
  1260                           	opt stack 21
  1261                           
  1262                           ;incstack = 0
  1263                           ;lcdNibble@data stored from wreg
  1264  0012E0  6E22               	movwf	lcdNibble@data,c
  1265                           
  1266                           ;LCD.c: 32: char temp = data & 0xF0;
  1267  0012E2  5022               	movf	lcdNibble@data,w,c
  1268  0012E4  0BF0               	andlw	240
  1269  0012E6  6E21               	movwf	lcdNibble@temp,c
  1270                           
  1271                           ;LCD.c: 33: LATD = LATD & 0x0F;
  1272  0012E8  508C               	movf	3980,w,c	;volatile
  1273  0012EA  0B0F               	andlw	15
  1274  0012EC  6E8C               	movwf	3980,c	;volatile
  1275                           
  1276                           ;LCD.c: 34: LATD = temp | LATD;
  1277  0012EE  5021               	movf	lcdNibble@temp,w,c
  1278  0012F0  108C               	iorwf	3980,w,c	;volatile
  1279  0012F2  6E8C               	movwf	3980,c	;volatile
  1280                           
  1281                           ;LCD.c: 36: LATDbits.LATD3 = 0;
  1282  0012F4  968C               	bcf	3980,3,c	;volatile
  1283                           
  1284                           ;LCD.c: 37: _delay((unsigned long)((25)*(10000000/4000000.0)));
  1285  0012F6  0E14               	movlw	20
  1286  0012F8                     u537:
  1287  0012F8  2EE8               	decfsz	wreg,f,c
  1288  0012FA  D7FE               	bra	u537
  1289  0012FC  D000               	nop2	
  1290                           
  1291                           ;LCD.c: 38: LATDbits.LATD3 = 1;
  1292  0012FE  868C               	bsf	3980,3,c	;volatile
  1293                           
  1294                           ;LCD.c: 39: _delay((unsigned long)((25)*(10000000/4000000.0)));
  1295  001300  0E14               	movlw	20
  1296  001302                     u547:
  1297  001302  2EE8               	decfsz	wreg,f,c
  1298  001304  D7FE               	bra	u547
  1299  001306  D000               	nop2	
  1300                           
  1301                           ;LCD.c: 41: data = data << 4;
  1302  001308  3822               	swapf	lcdNibble@data,w,c
  1303  00130A  0BF0               	andlw	240
  1304  00130C  6E22               	movwf	lcdNibble@data,c
  1305                           
  1306                           ;LCD.c: 43: temp = data & 0xF0;
  1307  00130E  5022               	movf	lcdNibble@data,w,c
  1308  001310  0BF0               	andlw	240
  1309  001312  6E21               	movwf	lcdNibble@temp,c
  1310                           
  1311                           ;LCD.c: 44: LATD = LATD & 0x0F;
  1312  001314  508C               	movf	3980,w,c	;volatile
  1313  001316  0B0F               	andlw	15
  1314  001318  6E8C               	movwf	3980,c	;volatile
  1315                           
  1316                           ;LCD.c: 45: LATD = temp | LATD;
  1317  00131A  5021               	movf	lcdNibble@temp,w,c
  1318  00131C  108C               	iorwf	3980,w,c	;volatile
  1319  00131E  6E8C               	movwf	3980,c	;volatile
  1320                           
  1321                           ;LCD.c: 47: LATDbits.LATD3 = 0;
  1322  001320  968C               	bcf	3980,3,c	;volatile
  1323                           
  1324                           ;LCD.c: 48: _delay((unsigned long)((25)*(10000000/4000000.0)));
  1325  001322  0E14               	movlw	20
  1326  001324                     u557:
  1327  001324  2EE8               	decfsz	wreg,f,c
  1328  001326  D7FE               	bra	u557
  1329  001328  D000               	nop2	
  1330                           
  1331                           ;LCD.c: 49: LATDbits.LATD3 = 1;
  1332  00132A  868C               	bsf	3980,3,c	;volatile
  1333                           
  1334                           ;LCD.c: 50: _delay((unsigned long)((25)*(10000000/4000000.0)));
  1335  00132C  0E14               	movlw	20
  1336  00132E                     u567:
  1337  00132E  2EE8               	decfsz	wreg,f,c
  1338  001330  D7FE               	bra	u567
  1339  001332  D000               	nop2	
  1340  001334  0012               	return		;funcret
  1341  001336                     __end_of_lcdNibble:
  1342                           	opt stack 0
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           intcon	equ	0xFF2
  1348                           intcon3	equ	0xFF0
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           status	equ	0xFD8
  1352                           
  1353 ;; *************** function _keypressed *****************
  1354 ;; Defined at:
  1355 ;;		line 97 in file "main.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;  keypress        2   30[COMRAM] int 
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1370 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1371 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1372 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1373 ;;Total ram usage:       17 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; Hardware stack levels required when called:    6
  1376 ;; This function calls:
  1377 ;;		_dispCorrectScreen
  1378 ;; This function is called by:
  1379 ;;		Interrupt level 2
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	intcode
  1384  000008                     __pintcode:
  1385                           	opt stack 0
  1386  000008                     _keypressed:
  1387                           	opt stack 19
  1388                           
  1389                           ;incstack = 0
  1390  000008  823E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1391  00000A  ED3F  F008         	call	int_func,f	;refresh shadow registers
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           intcon	equ	0xFF2
  1397                           intcon3	equ	0xFF0
  1398                           postinc0	equ	0xFEE
  1399                           wreg	equ	0xFE8
  1400                           status	equ	0xFD8
  1401                           
  1402                           	psect	intcode_body
  1403  00107E                     __pintcode_body:
  1404                           	opt stack 19
  1405  00107E                     int_func:
  1406                           	opt stack 19
  1407  00107E  0006               	pop		; remove dummy address from shadow register refresh
  1408  001080  CFFA F011          	movff	pclath,??_keypressed+1
  1409  001084  CFFB F012          	movff	pclatu,??_keypressed+2
  1410  001088  CFE9 F013          	movff	fsr0l,??_keypressed+3
  1411  00108C  CFEA F014          	movff	fsr0h,??_keypressed+4
  1412  001090  CFE1 F015          	movff	fsr1l,??_keypressed+5
  1413  001094  CFE2 F016          	movff	fsr1h,??_keypressed+6
  1414  001098  CFD9 F017          	movff	fsr2l,??_keypressed+7
  1415  00109C  CFDA F018          	movff	fsr2h,??_keypressed+8
  1416  0010A0  CFF3 F019          	movff	prodl,??_keypressed+9
  1417  0010A4  CFF4 F01A          	movff	prodh,??_keypressed+10
  1418  0010A8  CFF6 F01B          	movff	tblptrl,??_keypressed+11
  1419  0010AC  CFF7 F01C          	movff	tblptrh,??_keypressed+12
  1420  0010B0  CFF8 F01D          	movff	tblptru,??_keypressed+13
  1421  0010B4  CFF5 F01E          	movff	tablat,??_keypressed+14
  1422                           
  1423                           ;main.c: 98: if(INT1IF){
  1424  0010B8  A0F0               	btfss	intcon3,0,c	;volatile
  1425  0010BA  D011               	goto	i2l61
  1426                           
  1427                           ;main.c: 99: int keypress = (PORTB & 0xF0) >> 4;
  1428  0010BC  CF81 F010          	movff	3969,??_keypressed	;volatile
  1429  0010C0  3A10               	swapf	??_keypressed,f,c
  1430  0010C2  0E0F               	movlw	15
  1431  0010C4  1610               	andwf	??_keypressed,f,c
  1432  0010C6  0E0F               	movlw	15
  1433  0010C8  1610               	andwf	??_keypressed,f,c
  1434  0010CA  5010               	movf	??_keypressed,w,c
  1435  0010CC  6E1F               	movwf	keypressed@keypress,c
  1436  0010CE  6A20               	clrf	keypressed@keypress+1,c
  1437                           
  1438                           ;main.c: 100: dispCorrectScreen(keypress);
  1439  0010D0  C01F  F00E         	movff	keypressed@keypress,dispCorrectScreen@key
  1440  0010D4  C020  F00F         	movff	keypressed@keypress+1,dispCorrectScreen@key+1
  1441  0010D8  EC8D  F008         	call	_dispCorrectScreen	;wreg free
  1442                           
  1443                           ;main.c: 101: INT1IF = 0;
  1444  0010DC  90F0               	bcf	intcon3,0,c	;volatile
  1445  0010DE                     i2l61:
  1446  0010DE  C01E  FFF5         	movff	??_keypressed+14,tablat
  1447  0010E2  C01D  FFF8         	movff	??_keypressed+13,tblptru
  1448  0010E6  C01C  FFF7         	movff	??_keypressed+12,tblptrh
  1449  0010EA  C01B  FFF6         	movff	??_keypressed+11,tblptrl
  1450  0010EE  C01A  FFF4         	movff	??_keypressed+10,prodh
  1451  0010F2  C019  FFF3         	movff	??_keypressed+9,prodl
  1452  0010F6  C018  FFDA         	movff	??_keypressed+8,fsr2h
  1453  0010FA  C017  FFD9         	movff	??_keypressed+7,fsr2l
  1454  0010FE  C016  FFE2         	movff	??_keypressed+6,fsr1h
  1455  001102  C015  FFE1         	movff	??_keypressed+5,fsr1l
  1456  001106  C014  FFEA         	movff	??_keypressed+4,fsr0h
  1457  00110A  C013  FFE9         	movff	??_keypressed+3,fsr0l
  1458  00110E  C012  FFFB         	movff	??_keypressed+2,pclatu
  1459  001112  C011  FFFA         	movff	??_keypressed+1,pclath
  1460  001116  923E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1461  001118  0011               	retfie		f
  1462  00111A                     __end_of_keypressed:
  1463                           	opt stack 0
  1464                           pclatu	equ	0xFFB
  1465                           pclath	equ	0xFFA
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           prodh	equ	0xFF4
  1471                           prodl	equ	0xFF3
  1472                           intcon	equ	0xFF2
  1473                           intcon3	equ	0xFF0
  1474                           postinc0	equ	0xFEE
  1475                           fsr0h	equ	0xFEA
  1476                           fsr0l	equ	0xFE9
  1477                           wreg	equ	0xFE8
  1478                           fsr1h	equ	0xFE2
  1479                           fsr1l	equ	0xFE1
  1480                           fsr2h	equ	0xFDA
  1481                           fsr2l	equ	0xFD9
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _dispCorrectScreen *****************
  1485 ;; Defined at:
  1486 ;;		line 92 in file "LCD.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  key             2   13[COMRAM] int 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;		None
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1500 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;Total ram usage:        2 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    5
  1507 ;; This function calls:
  1508 ;;		_dispDownloadToPCScreen
  1509 ;;		_dispLogsDisplayMenuScreen
  1510 ;;		_dispLogsMenu
  1511 ;;		_dispSortingScreen
  1512 ;;		i2_dispMainMenu
  1513 ;; This function is called by:
  1514 ;;		_keypressed
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text11
  1519  00111A                     __ptext11:
  1520                           	opt stack 0
  1521  00111A                     _dispCorrectScreen:
  1522                           	opt stack 19
  1523                           
  1524                           ;LCD.c: 94: if (key == 2 && machineState != 2){
  1525                           
  1526                           ;incstack = 0
  1527  00111A  0E02               	movlw	2
  1528  00111C  180E               	xorwf	dispCorrectScreen@key,w,c
  1529  00111E  100F               	iorwf	dispCorrectScreen@key+1,w,c
  1530  001120  A4D8               	btfss	status,2,c
  1531  001122  D00C               	goto	i2l1361
  1532  001124  0E02               	movlw	2
  1533  001126  1830               	xorwf	_machineState,w,c
  1534  001128  1031               	iorwf	_machineState+1,w,c
  1535  00112A  B4D8               	btfsc	status,2,c
  1536  00112C  D007               	goto	i2l1361
  1537                           
  1538                           ;LCD.c: 95: dispMainMenu();
  1539  00112E  EC45  F00A         	call	i2_dispMainMenu	;wreg free
  1540                           
  1541                           ;LCD.c: 96: currentScreen = 3;
  1542  001132  0E00               	movlw	0
  1543  001134  6E2F               	movwf	_currentScreen+1,c
  1544  001136  0E03               	movlw	3
  1545  001138  6E2E               	movwf	_currentScreen,c
  1546                           
  1547                           ;LCD.c: 97: }
  1548  00113A  0012               	return	
  1549  00113C                     i2l1361:
  1550                           
  1551                           ;LCD.c: 98: else if (currentScreen == 3){
  1552  00113C  0E03               	movlw	3
  1553  00113E  182E               	xorwf	_currentScreen,w,c
  1554  001140  102F               	iorwf	_currentScreen+1,w,c
  1555  001142  A4D8               	btfss	status,2,c
  1556  001144  D01A               	goto	i2l1377
  1557                           
  1558                           ;LCD.c: 99: if (key == 0){
  1559  001146  500E               	movf	dispCorrectScreen@key,w,c
  1560  001148  100F               	iorwf	dispCorrectScreen@key+1,w,c
  1561  00114A  A4D8               	btfss	status,2,c
  1562  00114C  D00B               	goto	i2l1371
  1563                           
  1564                           ;LCD.c: 100: machineState = 2;
  1565  00114E  0E00               	movlw	0
  1566  001150  6E31               	movwf	_machineState+1,c
  1567  001152  0E02               	movlw	2
  1568  001154  6E30               	movwf	_machineState,c
  1569                           
  1570                           ;LCD.c: 101: dispSortingScreen();
  1571  001156  EC52  F00A         	call	_dispSortingScreen	;wreg free
  1572                           
  1573                           ;LCD.c: 102: currentScreen = 4;
  1574  00115A  0E00               	movlw	0
  1575  00115C  6E2F               	movwf	_currentScreen+1,c
  1576  00115E  0E04               	movlw	4
  1577  001160  6E2E               	movwf	_currentScreen,c
  1578                           
  1579                           ;LCD.c: 103: }
  1580  001162  0012               	return	
  1581  001164                     i2l1371:
  1582                           
  1583                           ;LCD.c: 104: else if (key == 1){
  1584  001164  040E               	decf	dispCorrectScreen@key,w,c
  1585  001166  100F               	iorwf	dispCorrectScreen@key+1,w,c
  1586  001168  A4D8               	btfss	status,2,c
  1587  00116A  0012               	return	
  1588                           
  1589                           ;LCD.c: 105: dispLogsMenu();
  1590  00116C  EC5F  F00A         	call	_dispLogsMenu	;wreg free
  1591                           
  1592                           ;LCD.c: 106: currentScreen = 5;
  1593  001170  0E00               	movlw	0
  1594  001172  6E2F               	movwf	_currentScreen+1,c
  1595  001174  0E05               	movlw	5
  1596  001176  6E2E               	movwf	_currentScreen,c
  1597                           
  1598                           ;LCD.c: 107: }
  1599                           ;LCD.c: 109: }
  1600  001178  0012               	return	
  1601  00117A                     i2l1377:
  1602                           
  1603                           ;LCD.c: 110: else if (currentScreen == 5){
  1604  00117A  0E05               	movlw	5
  1605  00117C  182E               	xorwf	_currentScreen,w,c
  1606  00117E  102F               	iorwf	_currentScreen+1,w,c
  1607  001180  A4D8               	btfss	status,2,c
  1608  001182  0012               	return	
  1609                           
  1610                           ;LCD.c: 111: if (key == 0){
  1611  001184  500E               	movf	dispCorrectScreen@key,w,c
  1612  001186  100F               	iorwf	dispCorrectScreen@key+1,w,c
  1613  001188  A4D8               	btfss	status,2,c
  1614  00118A  D007               	goto	i2l1385
  1615                           
  1616                           ;LCD.c: 112: dispDownloadToPCScreen();
  1617  00118C  EC79  F00A         	call	_dispDownloadToPCScreen	;wreg free
  1618                           
  1619                           ;LCD.c: 113: currentScreen = 7;
  1620  001190  0E00               	movlw	0
  1621  001192  6E2F               	movwf	_currentScreen+1,c
  1622  001194  0E07               	movlw	7
  1623  001196  6E2E               	movwf	_currentScreen,c
  1624                           
  1625                           ;LCD.c: 114: }
  1626  001198  0012               	return	
  1627  00119A                     i2l1385:
  1628                           
  1629                           ;LCD.c: 115: else if (key == 1){
  1630  00119A  040E               	decf	dispCorrectScreen@key,w,c
  1631  00119C  100F               	iorwf	dispCorrectScreen@key+1,w,c
  1632  00119E  A4D8               	btfss	status,2,c
  1633  0011A0  0012               	return	
  1634                           
  1635                           ;LCD.c: 116: dispLogsDisplayMenuScreen();
  1636  0011A2  EC6C  F00A         	call	_dispLogsDisplayMenuScreen	;wreg free
  1637                           
  1638                           ;LCD.c: 117: currentScreen = 6;
  1639  0011A6  0E00               	movlw	0
  1640  0011A8  6E2F               	movwf	_currentScreen+1,c
  1641  0011AA  0E06               	movlw	6
  1642  0011AC  6E2E               	movwf	_currentScreen,c
  1643  0011AE  0012               	return	
  1644  0011B0                     __end_of_dispCorrectScreen:
  1645                           	opt stack 0
  1646                           pclatu	equ	0xFFB
  1647                           pclath	equ	0xFFA
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           prodh	equ	0xFF4
  1653                           prodl	equ	0xFF3
  1654                           intcon	equ	0xFF2
  1655                           intcon3	equ	0xFF0
  1656                           postinc0	equ	0xFEE
  1657                           fsr0h	equ	0xFEA
  1658                           fsr0l	equ	0xFE9
  1659                           wreg	equ	0xFE8
  1660                           fsr1h	equ	0xFE2
  1661                           fsr1l	equ	0xFE1
  1662                           fsr2h	equ	0xFDA
  1663                           fsr2l	equ	0xFD9
  1664                           status	equ	0xFD8
  1665                           
  1666 ;; *************** function i2_dispMainMenu *****************
  1667 ;; Defined at:
  1668 ;;		line 66 in file "LCD.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;		None
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;		None
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  1    wreg      void 
  1675 ;; Registers used:
  1676 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;Total ram usage:        0 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:    4
  1689 ;; This function calls:
  1690 ;;		i2_clearLCD
  1691 ;;		i2_lcdWrite
  1692 ;; This function is called by:
  1693 ;;		_dispCorrectScreen
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text12
  1698  00148A                     __ptext12:
  1699                           	opt stack 0
  1700  00148A                     i2_dispMainMenu:
  1701                           	opt stack 19
  1702                           
  1703                           ;LCD.c: 67: clearLCD();
  1704                           
  1705                           ;incstack = 0
  1706  00148A  EC8D  F00A         	call	i2_clearLCD	;wreg free
  1707                           
  1708                           ;LCD.c: 68: lcdWrite("1:START 11:31:45", "2:LOGS  22/02/17");
  1709  00148E  0E01               	movlw	low STR_1
  1710  001490  6E0A               	movwf	i2lcdWrite@string1,c
  1711  001492  0E10               	movlw	high STR_1
  1712  001494  6E0B               	movwf	i2lcdWrite@string1+1,c
  1713  001496  0E12               	movlw	low STR_2
  1714  001498  6E0C               	movwf	i2lcdWrite@string2,c
  1715  00149A  0E10               	movlw	high STR_2
  1716  00149C  6E0D               	movwf	i2lcdWrite@string2+1,c
  1717  00149E  EC16  F00A         	call	i2_lcdWrite	;wreg free
  1718  0014A2  0012               	return		;funcret
  1719  0014A4                     __end_ofi2_dispMainMenu:
  1720                           	opt stack 0
  1721                           pclatu	equ	0xFFB
  1722                           pclath	equ	0xFFA
  1723                           tblptru	equ	0xFF8
  1724                           tblptrh	equ	0xFF7
  1725                           tblptrl	equ	0xFF6
  1726                           tablat	equ	0xFF5
  1727                           prodh	equ	0xFF4
  1728                           prodl	equ	0xFF3
  1729                           intcon	equ	0xFF2
  1730                           intcon3	equ	0xFF0
  1731                           postinc0	equ	0xFEE
  1732                           fsr0h	equ	0xFEA
  1733                           fsr0l	equ	0xFE9
  1734                           wreg	equ	0xFE8
  1735                           fsr1h	equ	0xFE2
  1736                           fsr1l	equ	0xFE1
  1737                           fsr2h	equ	0xFDA
  1738                           fsr2l	equ	0xFD9
  1739                           status	equ	0xFD8
  1740                           
  1741 ;; *************** function _dispSortingScreen *****************
  1742 ;; Defined at:
  1743 ;;		line 71 in file "LCD.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;		None
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      void 
  1750 ;; Registers used:
  1751 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1761 ;;Total ram usage:        0 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    4
  1764 ;; This function calls:
  1765 ;;		i2_clearLCD
  1766 ;;		i2_lcdWrite
  1767 ;; This function is called by:
  1768 ;;		_dispCorrectScreen
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text13
  1773  0014A4                     __ptext13:
  1774                           	opt stack 0
  1775  0014A4                     _dispSortingScreen:
  1776                           	opt stack 19
  1777                           
  1778                           ;LCD.c: 72: clearLCD();
  1779                           
  1780                           ;incstack = 0
  1781  0014A4  EC8D  F00A         	call	i2_clearLCD	;wreg free
  1782                           
  1783                           ;LCD.c: 73: lcdWrite("SORTING...","0:47");
  1784  0014A8  0E61               	movlw	low STR_3
  1785  0014AA  6E0A               	movwf	i2lcdWrite@string1,c
  1786  0014AC  0E10               	movlw	high STR_3
  1787  0014AE  6E0B               	movwf	i2lcdWrite@string1+1,c
  1788  0014B0  0E77               	movlw	low STR_4
  1789  0014B2  6E0C               	movwf	i2lcdWrite@string2,c
  1790  0014B4  0E10               	movlw	high STR_4
  1791  0014B6  6E0D               	movwf	i2lcdWrite@string2+1,c
  1792  0014B8  EC16  F00A         	call	i2_lcdWrite	;wreg free
  1793  0014BC  0012               	return		;funcret
  1794  0014BE                     __end_of_dispSortingScreen:
  1795                           	opt stack 0
  1796                           pclatu	equ	0xFFB
  1797                           pclath	equ	0xFFA
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           prodh	equ	0xFF4
  1803                           prodl	equ	0xFF3
  1804                           intcon	equ	0xFF2
  1805                           intcon3	equ	0xFF0
  1806                           postinc0	equ	0xFEE
  1807                           fsr0h	equ	0xFEA
  1808                           fsr0l	equ	0xFE9
  1809                           wreg	equ	0xFE8
  1810                           fsr1h	equ	0xFE2
  1811                           fsr1l	equ	0xFE1
  1812                           fsr2h	equ	0xFDA
  1813                           fsr2l	equ	0xFD9
  1814                           status	equ	0xFD8
  1815                           
  1816 ;; *************** function _dispLogsMenu *****************
  1817 ;; Defined at:
  1818 ;;		line 77 in file "LCD.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;		None
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;		None
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      void 
  1825 ;; Registers used:
  1826 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;Total ram usage:        0 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    4
  1839 ;; This function calls:
  1840 ;;		i2_clearLCD
  1841 ;;		i2_lcdWrite
  1842 ;; This function is called by:
  1843 ;;		_dispCorrectScreen
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text14
  1848  0014BE                     __ptext14:
  1849                           	opt stack 0
  1850  0014BE                     _dispLogsMenu:
  1851                           	opt stack 19
  1852                           
  1853                           ;LCD.c: 78: clearLCD();
  1854                           
  1855                           ;incstack = 0
  1856  0014BE  EC8D  F00A         	call	i2_clearLCD	;wreg free
  1857                           
  1858                           ;LCD.c: 79: lcdWrite("1:DOWNLOAD 3:ESC","2:DISP LOGS");
  1859  0014C2  0E23               	movlw	low STR_5
  1860  0014C4  6E0A               	movwf	i2lcdWrite@string1,c
  1861  0014C6  0E10               	movlw	high STR_5
  1862  0014C8  6E0B               	movwf	i2lcdWrite@string1+1,c
  1863  0014CA  0E55               	movlw	low STR_6
  1864  0014CC  6E0C               	movwf	i2lcdWrite@string2,c
  1865  0014CE  0E10               	movlw	high STR_6
  1866  0014D0  6E0D               	movwf	i2lcdWrite@string2+1,c
  1867  0014D2  EC16  F00A         	call	i2_lcdWrite	;wreg free
  1868  0014D6  0012               	return		;funcret
  1869  0014D8                     __end_of_dispLogsMenu:
  1870                           	opt stack 0
  1871                           pclatu	equ	0xFFB
  1872                           pclath	equ	0xFFA
  1873                           tblptru	equ	0xFF8
  1874                           tblptrh	equ	0xFF7
  1875                           tblptrl	equ	0xFF6
  1876                           tablat	equ	0xFF5
  1877                           prodh	equ	0xFF4
  1878                           prodl	equ	0xFF3
  1879                           intcon	equ	0xFF2
  1880                           intcon3	equ	0xFF0
  1881                           postinc0	equ	0xFEE
  1882                           fsr0h	equ	0xFEA
  1883                           fsr0l	equ	0xFE9
  1884                           wreg	equ	0xFE8
  1885                           fsr1h	equ	0xFE2
  1886                           fsr1l	equ	0xFE1
  1887                           fsr2h	equ	0xFDA
  1888                           fsr2l	equ	0xFD9
  1889                           status	equ	0xFD8
  1890                           
  1891 ;; *************** function _dispLogsDisplayMenuScreen *****************
  1892 ;; Defined at:
  1893 ;;		line 82 in file "LCD.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;		None
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;		None
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;Total ram usage:        0 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    4
  1914 ;; This function calls:
  1915 ;;		i2_clearLCD
  1916 ;;		i2_lcdWrite
  1917 ;; This function is called by:
  1918 ;;		_dispCorrectScreen
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text15
  1923  0014D8                     __ptext15:
  1924                           	opt stack 0
  1925  0014D8                     _dispLogsDisplayMenuScreen:
  1926                           	opt stack 19
  1927                           
  1928                           ;LCD.c: 83: clearLCD();
  1929                           
  1930                           ;incstack = 0
  1931  0014D8  EC8D  F00A         	call	i2_clearLCD	;wreg free
  1932                           
  1933                           ;LCD.c: 84: lcdWrite("1:SCROLLDN 3:ESC","2:SCROLLUP");
  1934  0014DC  0E34               	movlw	low STR_7
  1935  0014DE  6E0A               	movwf	i2lcdWrite@string1,c
  1936  0014E0  0E10               	movlw	high STR_7
  1937  0014E2  6E0B               	movwf	i2lcdWrite@string1+1,c
  1938  0014E4  0E6C               	movlw	low STR_8
  1939  0014E6  6E0C               	movwf	i2lcdWrite@string2,c
  1940  0014E8  0E10               	movlw	high STR_8
  1941  0014EA  6E0D               	movwf	i2lcdWrite@string2+1,c
  1942  0014EC  EC16  F00A         	call	i2_lcdWrite	;wreg free
  1943  0014F0  0012               	return		;funcret
  1944  0014F2                     __end_of_dispLogsDisplayMenuScreen:
  1945                           	opt stack 0
  1946                           pclatu	equ	0xFFB
  1947                           pclath	equ	0xFFA
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           prodh	equ	0xFF4
  1953                           prodl	equ	0xFF3
  1954                           intcon	equ	0xFF2
  1955                           intcon3	equ	0xFF0
  1956                           postinc0	equ	0xFEE
  1957                           fsr0h	equ	0xFEA
  1958                           fsr0l	equ	0xFE9
  1959                           wreg	equ	0xFE8
  1960                           fsr1h	equ	0xFE2
  1961                           fsr1l	equ	0xFE1
  1962                           fsr2h	equ	0xFDA
  1963                           fsr2l	equ	0xFD9
  1964                           status	equ	0xFD8
  1965                           
  1966 ;; *************** function _dispDownloadToPCScreen *****************
  1967 ;; Defined at:
  1968 ;;		line 87 in file "LCD.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;		None
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;		None
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  1    wreg      void 
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;Total ram usage:        0 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    4
  1989 ;; This function calls:
  1990 ;;		i2_clearLCD
  1991 ;;		i2_lcdWrite
  1992 ;; This function is called by:
  1993 ;;		_dispCorrectScreen
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           	psect	text16
  1998  0014F2                     __ptext16:
  1999                           	opt stack 0
  2000  0014F2                     _dispDownloadToPCScreen:
  2001                           	opt stack 19
  2002                           
  2003                           ;LCD.c: 88: clearLCD();
  2004                           
  2005                           ;incstack = 0
  2006  0014F2  EC8D  F00A         	call	i2_clearLCD	;wreg free
  2007                           
  2008                           ;LCD.c: 89: lcdWrite("TRANSFERRING...","");
  2009  0014F6  0E45               	movlw	low STR_9
  2010  0014F8  6E0A               	movwf	i2lcdWrite@string1,c
  2011  0014FA  0E10               	movlw	high STR_9
  2012  0014FC  6E0B               	movwf	i2lcdWrite@string1+1,c
  2013  0014FE  0E54               	movlw	low (STR_9+15)
  2014  001500  6E0C               	movwf	i2lcdWrite@string2,c
  2015  001502  0E10               	movlw	high (STR_9+15)
  2016  001504  6E0D               	movwf	i2lcdWrite@string2+1,c
  2017  001506  EC16  F00A         	call	i2_lcdWrite	;wreg free
  2018  00150A  0012               	return		;funcret
  2019  00150C                     __end_of_dispDownloadToPCScreen:
  2020                           	opt stack 0
  2021                           pclatu	equ	0xFFB
  2022                           pclath	equ	0xFFA
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           prodh	equ	0xFF4
  2028                           prodl	equ	0xFF3
  2029                           intcon	equ	0xFF2
  2030                           intcon3	equ	0xFF0
  2031                           postinc0	equ	0xFEE
  2032                           fsr0h	equ	0xFEA
  2033                           fsr0l	equ	0xFE9
  2034                           wreg	equ	0xFE8
  2035                           fsr1h	equ	0xFE2
  2036                           fsr1l	equ	0xFE1
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041 ;; *************** function i2_lcdWrite *****************
  2042 ;; Defined at:
  2043 ;;		line 53 in file "LCD.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  string1         2    9[COMRAM] PTR unsigned char 
  2046 ;;		 -> STR_9(16), STR_7(17), STR_5(17), STR_3(11), 
  2047 ;;		 -> STR_1(17), 
  2048 ;;  string2         2   11[COMRAM] PTR unsigned char 
  2049 ;;		 -> STR_10(1), STR_8(11), STR_6(12), STR_4(5), 
  2050 ;;		 -> STR_2(17), 
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;		None
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  1    wreg      void 
  2055 ;; Registers used:
  2056 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;Total ram usage:        4 bytes
  2067 ;; Hardware stack levels used:    1
  2068 ;; Hardware stack levels required when called:    3
  2069 ;; This function calls:
  2070 ;;		i2_clearLCD
  2071 ;;		i2_lcdInst
  2072 ;;		i2_printf
  2073 ;; This function is called by:
  2074 ;;		_dispSortingScreen
  2075 ;;		_dispLogsMenu
  2076 ;;		_dispLogsDisplayMenuScreen
  2077 ;;		_dispDownloadToPCScreen
  2078 ;;		i2_dispMainMenu
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text17
  2083  00142C                     __ptext17:
  2084                           	opt stack 0
  2085  00142C                     i2_lcdWrite:
  2086                           	opt stack 19
  2087                           
  2088                           ;LCD.c: 54: clearLCD();
  2089                           
  2090                           ;incstack = 0
  2091  00142C  EC8D  F00A         	call	i2_clearLCD	;wreg free
  2092                           
  2093                           ;LCD.c: 55: printf(string1);
  2094  001430  C00A  F004         	movff	i2lcdWrite@string1,i2printf@f
  2095  001434  C00B  F005         	movff	i2lcdWrite@string1+1,i2printf@f+1
  2096  001438  EC41  F009         	call	i2_printf	;wreg free
  2097                           
  2098                           ;LCD.c: 56: lcdInst(0b11000000);
  2099  00143C  0EC0               	movlw	192
  2100  00143E  ECA6  F00A         	call	i2_lcdInst
  2101                           
  2102                           ;LCD.c: 57: printf(string2);
  2103  001442  C00C  F004         	movff	i2lcdWrite@string2,i2printf@f
  2104  001446  C00D  F005         	movff	i2lcdWrite@string2+1,i2printf@f+1
  2105  00144A  EC41  F009         	call	i2_printf	;wreg free
  2106                           
  2107                           ;LCD.c: 58: lcdInst(0b1100);
  2108  00144E  0E0C               	movlw	12
  2109  001450  ECA6  F00A         	call	i2_lcdInst
  2110  001454  0012               	return		;funcret
  2111  001456                     __end_ofi2_lcdWrite:
  2112                           	opt stack 0
  2113                           pclatu	equ	0xFFB
  2114                           pclath	equ	0xFFA
  2115                           tblptru	equ	0xFF8
  2116                           tblptrh	equ	0xFF7
  2117                           tblptrl	equ	0xFF6
  2118                           tablat	equ	0xFF5
  2119                           prodh	equ	0xFF4
  2120                           prodl	equ	0xFF3
  2121                           intcon	equ	0xFF2
  2122                           intcon3	equ	0xFF0
  2123                           postinc0	equ	0xFEE
  2124                           fsr0h	equ	0xFEA
  2125                           fsr0l	equ	0xFE9
  2126                           wreg	equ	0xFE8
  2127                           fsr1h	equ	0xFE2
  2128                           fsr1l	equ	0xFE1
  2129                           fsr2h	equ	0xFDA
  2130                           fsr2l	equ	0xFD9
  2131                           status	equ	0xFD8
  2132                           
  2133 ;; *************** function i2_printf *****************
  2134 ;; Defined at:
  2135 ;;		line 464 in file "/opt/microchip/xc8/v1.40/sources/common/doprnt.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  f               2    3[COMRAM] PTR const unsigned char 
  2138 ;;		 -> STR_10(1), STR_9(16), STR_8(11), STR_7(17), 
  2139 ;;		 -> STR_6(12), STR_5(17), STR_4(5), STR_3(11), 
  2140 ;;		 -> STR_2(17), STR_1(17), 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;  printf          4    0        struct .
  2143 ;;  printf          3    0        PTR const unsigned char 
  2144 ;;  printf          2    5[COMRAM] PTR void [1]
  2145 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2146 ;;  printf          2    0        unsigned int 
  2147 ;;  printf          2    0        unsigned int 
  2148 ;;  printf          1    8[COMRAM] char 
  2149 ;;  printf          1    7[COMRAM] unsigned char 
  2150 ;;  printf          1    0        char 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  2    3[COMRAM] int 
  2153 ;; Registers used:
  2154 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2160 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2161 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2163 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2164 ;;Total ram usage:        6 bytes
  2165 ;; Hardware stack levels used:    1
  2166 ;; Hardware stack levels required when called:    2
  2167 ;; This function calls:
  2168 ;;		i2_putch
  2169 ;; This function is called by:
  2170 ;;		i2_lcdWrite
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           	psect	text18
  2175  001282                     __ptext18:
  2176                           	opt stack 0
  2177  001282                     i2_printf:
  2178                           	opt stack 19
  2179                           
  2180                           ;doprnt.c: 466: va_list ap;
  2181                           ;doprnt.c: 499: signed char c;
  2182                           ;doprnt.c: 506: signed char prec;
  2183                           ;doprnt.c: 508: unsigned char flag;
  2184                           ;doprnt.c: 523: union {
  2185                           ;doprnt.c: 524: unsigned long vd;
  2186                           ;doprnt.c: 525: double integ;
  2187                           ;doprnt.c: 526: } tmpval;
  2188                           ;doprnt.c: 528: unsigned int val;
  2189                           ;doprnt.c: 529: unsigned len;
  2190                           ;doprnt.c: 530: const char * cp;
  2191                           ;doprnt.c: 533: *ap = __va_start();
  2192                           
  2193                           ;incstack = 0
  2194  001282  0E06               	movlw	low (?i2_printf+2)
  2195  001284  6E06               	movwf	i2printf@ap,c
  2196  001286  0E00               	movlw	high (?i2_printf+2)
  2197  001288  6E07               	movwf	i2printf@ap+1,c
  2198                           
  2199                           ;doprnt.c: 536: while(c = *f++) {
  2200  00128A  D01D               	goto	i2l1295
  2201  00128C                     i2l1283:
  2202                           
  2203                           ;doprnt.c: 538: if(c != '%')
  2204  00128C  0E25               	movlw	37
  2205  00128E  1809               	xorwf	i2printf@c,w,c
  2206  001290  B4D8               	btfsc	status,2,c
  2207  001292  D004               	goto	i2l1287
  2208                           
  2209                           ;doprnt.c: 540: {
  2210                           ;doprnt.c: 541: (putch(c) );
  2211  001294  5009               	movf	i2printf@c,w,c
  2212  001296  ECA0  F00A         	call	i2_putch
  2213                           
  2214                           ;doprnt.c: 542: continue;
  2215  00129A  D015               	goto	i2l1295
  2216  00129C                     i2l1287:
  2217                           
  2218                           ;doprnt.c: 543: }
  2219                           ;doprnt.c: 548: flag = 0;
  2220  00129C  0E00               	movlw	0
  2221  00129E  6E08               	movwf	i2printf@flag,c
  2222                           
  2223                           ;doprnt.c: 635: switch(c = *f++) {
  2224  0012A0  D004               	goto	i2l1293
  2225  0012A2                     i2l1289:
  2226                           
  2227                           ;doprnt.c: 809: (putch(c) );
  2228  0012A2  5009               	movf	i2printf@c,w,c
  2229  0012A4  ECA0  F00A         	call	i2_putch
  2230                           
  2231                           ;doprnt.c: 822: }
  2232                           
  2233                           ;doprnt.c: 810: continue;
  2234  0012A8  D00E               	goto	i2l1295
  2235  0012AA                     i2l1293:
  2236  0012AA  C004  FFF6         	movff	i2printf@f,tblptrl
  2237  0012AE  C005  FFF7         	movff	i2printf@f+1,tblptrh
  2238  0012B2  4A04               	infsnz	i2printf@f,f,c
  2239  0012B4  2A05               	incf	i2printf@f+1,f,c
  2240  0012B6                     	if	0	;tblptru may be non-zero
  2241  0012B6                     	endif
  2242  0012B6                     	if	0	;tblptru may be non-zero
  2243  0012B6                     	endif
  2244  0012B6  0008               	tblrd		*
  2245  0012B8  CFF5 F009          	movff	tablat,i2printf@c
  2246  0012BC  5009               	movf	i2printf@c,w,c
  2247                           
  2248                           ; Switch size 1, requested type "space"
  2249                           ; Number of cases is 1, Range of values is 0 to 0
  2250                           ; switch strategies available:
  2251                           ; Name         Instructions Cycles
  2252                           ; simple_byte            4     3 (average)
  2253                           ;	Chosen strategy is simple_byte
  2254  0012BE  0A00               	xorlw	0	; case 0
  2255  0012C0  B4D8               	btfsc	status,2,c
  2256  0012C2  0012               	return	
  2257  0012C4  D7EE               	goto	i2l1289
  2258  0012C6                     i2l1295:
  2259  0012C6  C004  FFF6         	movff	i2printf@f,tblptrl
  2260  0012CA  C005  FFF7         	movff	i2printf@f+1,tblptrh
  2261  0012CE  4A04               	infsnz	i2printf@f,f,c
  2262  0012D0  2A05               	incf	i2printf@f+1,f,c
  2263  0012D2                     	if	0	;tblptru may be non-zero
  2264  0012D2                     	endif
  2265  0012D2                     	if	0	;tblptru may be non-zero
  2266  0012D2                     	endif
  2267  0012D2  0008               	tblrd		*
  2268  0012D4  CFF5 F009          	movff	tablat,i2printf@c
  2269  0012D8  5009               	movf	i2printf@c,w,c
  2270  0012DA  B4D8               	btfsc	status,2,c
  2271  0012DC  0012               	return	
  2272  0012DE  D7D6               	goto	i2l1283
  2273  0012E0                     __end_ofi2_printf:
  2274                           	opt stack 0
  2275                           pclatu	equ	0xFFB
  2276                           pclath	equ	0xFFA
  2277                           tblptru	equ	0xFF8
  2278                           tblptrh	equ	0xFF7
  2279                           tblptrl	equ	0xFF6
  2280                           tablat	equ	0xFF5
  2281                           prodh	equ	0xFF4
  2282                           prodl	equ	0xFF3
  2283                           intcon	equ	0xFF2
  2284                           intcon3	equ	0xFF0
  2285                           postinc0	equ	0xFEE
  2286                           fsr0h	equ	0xFEA
  2287                           fsr0l	equ	0xFE9
  2288                           wreg	equ	0xFE8
  2289                           fsr1h	equ	0xFE2
  2290                           fsr1l	equ	0xFE1
  2291                           fsr2h	equ	0xFDA
  2292                           fsr2l	equ	0xFD9
  2293                           status	equ	0xFD8
  2294                           
  2295 ;; *************** function i2_putch *****************
  2296 ;; Defined at:
  2297 ;;		line 25 in file "LCD.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;  data            1    wreg     unsigned char 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  data            1    2[COMRAM] unsigned char 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      void 
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0, cstack
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;Total ram usage:        1 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    1
  2318 ;; This function calls:
  2319 ;;		i2_lcdNibble
  2320 ;; This function is called by:
  2321 ;;		i2_printf
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text19
  2326  001540                     __ptext19:
  2327                           	opt stack 0
  2328  001540                     i2_putch:
  2329                           	opt stack 19
  2330                           
  2331                           ;incstack = 0
  2332                           ;i2putch@data stored from wreg
  2333  001540  6E03               	movwf	i2putch@data,c
  2334                           
  2335                           ;LCD.c: 26: LATDbits.LATD2 = 1;
  2336  001542  848C               	bsf	3980,2,c	;volatile
  2337                           
  2338                           ;LCD.c: 27: lcdNibble(data);
  2339  001544  5003               	movf	i2putch@data,w,c
  2340  001546  EC9B  F009         	call	i2_lcdNibble
  2341  00154A  0012               	return		;funcret
  2342  00154C                     __end_ofi2_putch:
  2343                           	opt stack 0
  2344                           pclatu	equ	0xFFB
  2345                           pclath	equ	0xFFA
  2346                           tblptru	equ	0xFF8
  2347                           tblptrh	equ	0xFF7
  2348                           tblptrl	equ	0xFF6
  2349                           tablat	equ	0xFF5
  2350                           prodh	equ	0xFF4
  2351                           prodl	equ	0xFF3
  2352                           intcon	equ	0xFF2
  2353                           intcon3	equ	0xFF0
  2354                           postinc0	equ	0xFEE
  2355                           fsr0h	equ	0xFEA
  2356                           fsr0l	equ	0xFE9
  2357                           wreg	equ	0xFE8
  2358                           fsr1h	equ	0xFE2
  2359                           fsr1l	equ	0xFE1
  2360                           fsr2h	equ	0xFDA
  2361                           fsr2l	equ	0xFD9
  2362                           status	equ	0xFD8
  2363                           
  2364 ;; *************** function i2_clearLCD *****************
  2365 ;; Defined at:
  2366 ;;		line 61 in file "LCD.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;		None
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;		None
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  1    wreg      void 
  2373 ;; Registers used:
  2374 ;;		wreg, status,2, status,0, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;Total ram usage:        0 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    2
  2387 ;; This function calls:
  2388 ;;		i2_lcdInst
  2389 ;; This function is called by:
  2390 ;;		_dispSortingScreen
  2391 ;;		_dispLogsMenu
  2392 ;;		_dispLogsDisplayMenuScreen
  2393 ;;		_dispDownloadToPCScreen
  2394 ;;		i2_lcdWrite
  2395 ;;		i2_dispMainMenu
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text20
  2400  00151A                     __ptext20:
  2401                           	opt stack 0
  2402  00151A                     i2_clearLCD:
  2403                           	opt stack 19
  2404                           
  2405                           ;LCD.c: 62: lcdInst(0b01);
  2406                           
  2407                           ;incstack = 0
  2408  00151A  0E01               	movlw	1
  2409  00151C  ECA6  F00A         	call	i2_lcdInst
  2410                           
  2411                           ;LCD.c: 63: lcdInst(0x10);
  2412  001520  0E10               	movlw	16
  2413  001522  ECA6  F00A         	call	i2_lcdInst
  2414  001526  0012               	return		;funcret
  2415  001528                     __end_ofi2_clearLCD:
  2416                           	opt stack 0
  2417                           pclatu	equ	0xFFB
  2418                           pclath	equ	0xFFA
  2419                           tblptru	equ	0xFF8
  2420                           tblptrh	equ	0xFF7
  2421                           tblptrl	equ	0xFF6
  2422                           tablat	equ	0xFF5
  2423                           prodh	equ	0xFF4
  2424                           prodl	equ	0xFF3
  2425                           intcon	equ	0xFF2
  2426                           intcon3	equ	0xFF0
  2427                           postinc0	equ	0xFEE
  2428                           fsr0h	equ	0xFEA
  2429                           fsr0l	equ	0xFE9
  2430                           wreg	equ	0xFE8
  2431                           fsr1h	equ	0xFE2
  2432                           fsr1l	equ	0xFE1
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437 ;; *************** function i2_lcdInst *****************
  2438 ;; Defined at:
  2439 ;;		line 20 in file "LCD.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  data            1    wreg     unsigned char 
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;  data            1    2[COMRAM] unsigned char 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, status,2, status,0, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2456 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;Total ram usage:        1 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    1
  2460 ;; This function calls:
  2461 ;;		i2_lcdNibble
  2462 ;; This function is called by:
  2463 ;;		i2_lcdWrite
  2464 ;;		i2_clearLCD
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text21
  2469  00154C                     __ptext21:
  2470                           	opt stack 0
  2471  00154C                     i2_lcdInst:
  2472                           	opt stack 20
  2473                           
  2474                           ;incstack = 0
  2475                           ;i2lcdInst@data stored from wreg
  2476  00154C  6E03               	movwf	i2lcdInst@data,c
  2477                           
  2478                           ;LCD.c: 21: LATDbits.LATD2 = 0;
  2479  00154E  948C               	bcf	3980,2,c	;volatile
  2480                           
  2481                           ;LCD.c: 22: lcdNibble(data);
  2482  001550  5003               	movf	i2lcdInst@data,w,c
  2483  001552  EC9B  F009         	call	i2_lcdNibble
  2484  001556  0012               	return		;funcret
  2485  001558                     __end_ofi2_lcdInst:
  2486                           	opt stack 0
  2487                           pclatu	equ	0xFFB
  2488                           pclath	equ	0xFFA
  2489                           tblptru	equ	0xFF8
  2490                           tblptrh	equ	0xFF7
  2491                           tblptrl	equ	0xFF6
  2492                           tablat	equ	0xFF5
  2493                           prodh	equ	0xFF4
  2494                           prodl	equ	0xFF3
  2495                           intcon	equ	0xFF2
  2496                           intcon3	equ	0xFF0
  2497                           postinc0	equ	0xFEE
  2498                           fsr0h	equ	0xFEA
  2499                           fsr0l	equ	0xFE9
  2500                           wreg	equ	0xFE8
  2501                           fsr1h	equ	0xFE2
  2502                           fsr1l	equ	0xFE1
  2503                           fsr2h	equ	0xFDA
  2504                           fsr2l	equ	0xFD9
  2505                           status	equ	0xFD8
  2506                           
  2507 ;; *************** function i2_lcdNibble *****************
  2508 ;; Defined at:
  2509 ;;		line 30 in file "LCD.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;  data            1    wreg     unsigned char 
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  data            1    1[COMRAM] unsigned char 
  2514 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      void 
  2517 ;; Registers used:
  2518 ;;		wreg, status,2, status,0
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;Total ram usage:        2 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; This function calls:
  2531 ;;		Nothing
  2532 ;; This function is called by:
  2533 ;;		i2_lcdInst
  2534 ;;		i2_putch
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text22
  2539  001336                     __ptext22:
  2540                           	opt stack 0
  2541  001336                     i2_lcdNibble:
  2542                           	opt stack 19
  2543                           
  2544                           ;incstack = 0
  2545                           ;i2lcdNibble@data stored from wreg
  2546  001336  6E02               	movwf	i2lcdNibble@data,c
  2547                           
  2548                           ;LCD.c: 32: char temp = data & 0xF0;
  2549  001338  5002               	movf	i2lcdNibble@data,w,c
  2550  00133A  0BF0               	andlw	240
  2551  00133C  6E01               	movwf	i2lcdNibble@temp,c
  2552                           
  2553                           ;LCD.c: 33: LATD = LATD & 0x0F;
  2554  00133E  508C               	movf	3980,w,c	;volatile
  2555  001340  0B0F               	andlw	15
  2556  001342  6E8C               	movwf	3980,c	;volatile
  2557                           
  2558                           ;LCD.c: 34: LATD = temp | LATD;
  2559  001344  5001               	movf	i2lcdNibble@temp,w,c
  2560  001346  108C               	iorwf	3980,w,c	;volatile
  2561  001348  6E8C               	movwf	3980,c	;volatile
  2562                           
  2563                           ;LCD.c: 36: LATDbits.LATD3 = 0;
  2564  00134A  968C               	bcf	3980,3,c	;volatile
  2565                           
  2566                           ;LCD.c: 37: _delay((unsigned long)((25)*(10000000/4000000.0)));
  2567  00134C  0E14               	movlw	20
  2568  00134E                     i2u57_47:
  2569  00134E  2EE8               	decfsz	wreg,f,c
  2570  001350  D7FE               	bra	i2u57_47
  2571  001352  D000               	nop2	
  2572                           
  2573                           ;LCD.c: 38: LATDbits.LATD3 = 1;
  2574  001354  868C               	bsf	3980,3,c	;volatile
  2575                           
  2576                           ;LCD.c: 39: _delay((unsigned long)((25)*(10000000/4000000.0)));
  2577  001356  0E14               	movlw	20
  2578  001358                     i2u58_47:
  2579  001358  2EE8               	decfsz	wreg,f,c
  2580  00135A  D7FE               	bra	i2u58_47
  2581  00135C  D000               	nop2	
  2582                           
  2583                           ;LCD.c: 41: data = data << 4;
  2584  00135E  3802               	swapf	i2lcdNibble@data,w,c
  2585  001360  0BF0               	andlw	240
  2586  001362  6E02               	movwf	i2lcdNibble@data,c
  2587                           
  2588                           ;LCD.c: 43: temp = data & 0xF0;
  2589  001364  5002               	movf	i2lcdNibble@data,w,c
  2590  001366  0BF0               	andlw	240
  2591  001368  6E01               	movwf	i2lcdNibble@temp,c
  2592                           
  2593                           ;LCD.c: 44: LATD = LATD & 0x0F;
  2594  00136A  508C               	movf	3980,w,c	;volatile
  2595  00136C  0B0F               	andlw	15
  2596  00136E  6E8C               	movwf	3980,c	;volatile
  2597                           
  2598                           ;LCD.c: 45: LATD = temp | LATD;
  2599  001370  5001               	movf	i2lcdNibble@temp,w,c
  2600  001372  108C               	iorwf	3980,w,c	;volatile
  2601  001374  6E8C               	movwf	3980,c	;volatile
  2602                           
  2603                           ;LCD.c: 47: LATDbits.LATD3 = 0;
  2604  001376  968C               	bcf	3980,3,c	;volatile
  2605                           
  2606                           ;LCD.c: 48: _delay((unsigned long)((25)*(10000000/4000000.0)));
  2607  001378  0E14               	movlw	20
  2608  00137A                     i2u59_47:
  2609  00137A  2EE8               	decfsz	wreg,f,c
  2610  00137C  D7FE               	bra	i2u59_47
  2611  00137E  D000               	nop2	
  2612                           
  2613                           ;LCD.c: 49: LATDbits.LATD3 = 1;
  2614  001380  868C               	bsf	3980,3,c	;volatile
  2615                           
  2616                           ;LCD.c: 50: _delay((unsigned long)((25)*(10000000/4000000.0)));
  2617  001382  0E14               	movlw	20
  2618  001384                     i2u60_47:
  2619  001384  2EE8               	decfsz	wreg,f,c
  2620  001386  D7FE               	bra	i2u60_47
  2621  001388  D000               	nop2	
  2622  00138A  0012               	return		;funcret
  2623  00138C                     __end_ofi2_lcdNibble:
  2624                           	opt stack 0
  2625                           pclatu	equ	0xFFB
  2626                           pclath	equ	0xFFA
  2627                           tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           prodh	equ	0xFF4
  2632                           prodl	equ	0xFF3
  2633                           intcon	equ	0xFF2
  2634                           intcon3	equ	0xFF0
  2635                           postinc0	equ	0xFEE
  2636                           fsr0h	equ	0xFEA
  2637                           fsr0l	equ	0xFE9
  2638                           wreg	equ	0xFE8
  2639                           fsr1h	equ	0xFE2
  2640                           fsr1l	equ	0xFE1
  2641                           fsr2h	equ	0xFDA
  2642                           fsr2l	equ	0xFD9
  2643                           status	equ	0xFD8
  2644                           pclatu	equ	0xFFB
  2645                           pclath	equ	0xFFA
  2646                           tblptru	equ	0xFF8
  2647                           tblptrh	equ	0xFF7
  2648                           tblptrl	equ	0xFF6
  2649                           tablat	equ	0xFF5
  2650                           prodh	equ	0xFF4
  2651                           prodl	equ	0xFF3
  2652                           intcon	equ	0xFF2
  2653                           intcon3	equ	0xFF0
  2654                           postinc0	equ	0xFEE
  2655                           fsr0h	equ	0xFEA
  2656                           fsr0l	equ	0xFE9
  2657                           wreg	equ	0xFE8
  2658                           fsr1h	equ	0xFE2
  2659                           fsr1l	equ	0xFE1
  2660                           fsr2h	equ	0xFDA
  2661                           fsr2l	equ	0xFD9
  2662                           status	equ	0xFD8
  2663                           
  2664                           	psect	rparam
  2665  0000                     pclatu	equ	0xFFB
  2666                           pclath	equ	0xFFA
  2667                           tblptru	equ	0xFF8
  2668                           tblptrh	equ	0xFF7
  2669                           tblptrl	equ	0xFF6
  2670                           tablat	equ	0xFF5
  2671                           prodh	equ	0xFF4
  2672                           prodl	equ	0xFF3
  2673                           intcon	equ	0xFF2
  2674                           intcon3	equ	0xFF0
  2675                           postinc0	equ	0xFEE
  2676                           fsr0h	equ	0xFEA
  2677                           fsr0l	equ	0xFE9
  2678                           wreg	equ	0xFE8
  2679                           fsr1h	equ	0xFE2
  2680                           fsr1l	equ	0xFE1
  2681                           fsr2h	equ	0xFDA
  2682                           fsr2l	equ	0xFD9
  2683                           status	equ	0xFD8
  2684                           
  2685                           	psect	temp
  2686  00003E                     btemp:
  2687                           	opt stack 0
  2688  00003E                     	ds	1
  2689  0000                     int$flags	set	btemp
  2690                           pclatu	equ	0xFFB
  2691                           pclath	equ	0xFFA
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           prodh	equ	0xFF4
  2697                           prodl	equ	0xFF3
  2698                           intcon	equ	0xFF2
  2699                           intcon3	equ	0xFF0
  2700                           postinc0	equ	0xFEE
  2701                           fsr0h	equ	0xFEA
  2702                           fsr0l	equ	0xFE9
  2703                           wreg	equ	0xFE8
  2704                           fsr1h	equ	0xFE2
  2705                           fsr1l	equ	0xFE1
  2706                           fsr2h	equ	0xFDA
  2707                           fsr2l	equ	0xFD9
  2708                           status	equ	0xFD8


Data Sizes:
    Strings     123
    Constant    0
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     45      61
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[1]), STR_9(CODE[16]), STR_8(CODE[11]), STR_7(CODE[17]), 
		 -> STR_6(CODE[12]), STR_5(CODE[17]), STR_4(CODE[5]), STR_3(CODE[11]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 

    lcdWrite@string2	PTR unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[1]), STR_8(CODE[11]), STR_6(CODE[12]), STR_4(CODE[5]), 
		 -> STR_2(CODE[17]), 

    lcdWrite@string1	PTR unsigned char  size(2) Largest target is 17
		 -> STR_9(CODE[16]), STR_7(CODE[17]), STR_5(CODE[17]), STR_3(CODE[11]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _initLCD->_lcdInst
    _dispMainMenu->_lcdWrite
    _lcdWrite->_printf
    _printf->_putch
    _putch->_lcdNibble
    _clearLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in COMRAM

    _keypressed->_dispCorrectScreen
    i2_dispMainMenu->i2_lcdWrite
    _dispSortingScreen->i2_lcdWrite
    _dispLogsMenu->i2_lcdWrite
    _dispLogsDisplayMenuScreen->i2_lcdWrite
    _dispDownloadToPCScreen->i2_lcdWrite
    i2_lcdWrite->i2_printf
    i2_printf->i2_putch
    i2_putch->i2_lcdNibble
    i2_clearLCD->i2_lcdInst
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1198
                       _dispMainMenu
                            _initLCD
                _transferToContainer
 ---------------------------------------------------------------------------------
 (1) _transferToContainer                                  2     2      0      30
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             35 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _dispMainMenu                                         0     0      0    1078
                           _clearLCD
                           _lcdWrite
 ---------------------------------------------------------------------------------
 (2) _lcdWrite                                             4     0      4     988
                                             41 COMRAM     4     0      4
                           _clearLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              18    16      2     332
                                             35 COMRAM     6     4      2
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      90
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _clearLCD                                             0     0      0      90
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          17    17      0    5247
                                             15 COMRAM    17    17      0
                  _dispCorrectScreen
 ---------------------------------------------------------------------------------
 (7) _dispCorrectScreen                                    2     0      2    5224
                                             13 COMRAM     2     0      2
             _dispDownloadToPCScreen
          _dispLogsDisplayMenuScreen
                       _dispLogsMenu
                  _dispSortingScreen
                     i2_dispMainMenu
 ---------------------------------------------------------------------------------
 (8) i2_dispMainMenu                                       0     0      0    1010
                         i2_clearLCD
                         i2_lcdWrite
 ---------------------------------------------------------------------------------
 (8) _dispSortingScreen                                    0     0      0    1010
                         i2_clearLCD
                         i2_lcdWrite
 ---------------------------------------------------------------------------------
 (8) _dispLogsMenu                                         0     0      0    1010
                         i2_clearLCD
                         i2_lcdWrite
 ---------------------------------------------------------------------------------
 (8) _dispLogsDisplayMenuScreen                            0     0      0    1010
                         i2_clearLCD
                         i2_lcdWrite
 ---------------------------------------------------------------------------------
 (8) _dispDownloadToPCScreen                               0     0      0    1010
                         i2_clearLCD
                         i2_lcdWrite
 ---------------------------------------------------------------------------------
 (9) i2_lcdWrite                                           4     0      4     875
                                              9 COMRAM     4     0      4
                         i2_clearLCD
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           18    16      2     301
                                              3 COMRAM     6     4      2
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_clearLCD                                          0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dispMainMenu
     _clearLCD
       _lcdInst
         _lcdNibble
     _lcdWrite
       _clearLCD
         _lcdInst
           _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         _putch
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _transferToContainer

 _keypressed (ROOT)
   _dispCorrectScreen
     _dispDownloadToPCScreen
       i2_clearLCD
         i2_lcdInst
           i2_lcdNibble
       i2_lcdWrite
         i2_clearLCD
           i2_lcdInst
             i2_lcdNibble
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2_putch
             i2_lcdNibble
     _dispLogsDisplayMenuScreen
       i2_clearLCD
         i2_lcdInst
           i2_lcdNibble
       i2_lcdWrite
         i2_clearLCD
           i2_lcdInst
             i2_lcdNibble
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2_putch
             i2_lcdNibble
     _dispLogsMenu
       i2_clearLCD
         i2_lcdInst
           i2_lcdNibble
       i2_lcdWrite
         i2_clearLCD
           i2_lcdInst
             i2_lcdNibble
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2_putch
             i2_lcdNibble
     _dispSortingScreen
       i2_clearLCD
         i2_lcdInst
           i2_lcdNibble
       i2_lcdWrite
         i2_clearLCD
           i2_lcdInst
             i2_lcdNibble
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2_putch
             i2_lcdNibble
     i2_dispMainMenu
       i2_clearLCD
         i2_lcdInst
           i2_lcdNibble
       i2_lcdWrite
         i2_clearLCD
           i2_lcdInst
             i2_lcdNibble
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2_putch
             i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2D      3D       1       48.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3D      34        0.0%
DATA                 0      0      3D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Feb 24 01:15:11 2017

                  ??i2_dispMainMenu 000E                                  l51 121C  
                                l54 121E                      ??_dispMainMenu 002E  
                       __CFG_BORV$3 000000                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                                 l258 13E8  
                      __CFG_CPB$OFF 000000                                 _PEN 007E2A  
                      __CFG_CPD$OFF 000000                                 u507 13F6  
                               u517 1392                                 u527 13C6  
                               u537 12F8                                 u547 1302  
                               _SEN 007E28                                 u557 1324  
                               u567 132E                                 u497 13EC  
                    ??_dispLogsMenu 000E                                 wreg 000FE8  
                        i2_clearLCD 151A                        __CFG_LVP$OFF 000000  
                        i2_lcdWrite 142C                        __CFG_WDT$OFF 000000  
                              l1045 13DC                                l1303 123E  
                              l1311 1268                                l1305 1244  
                              l1309 124C                                l1299 122E  
                              STR_1 1001                                STR_2 1012  
                              STR_3 1061                                STR_4 1077  
                              STR_5 1023                                STR_6 1055  
                              STR_7 1034                                STR_8 106C  
                              STR_9 1045                                _LATA 000F89  
                              _LATB 000F8A                                _LATC 000F8B  
                              _LATD 000F8C                                _RCEN 007E2B  
                              i2l61 10DE                                _RSEN 007E29  
                     __CFG_FCMEN$ON 000000                                _main 11B0  
                              fsr0h 000FEA                                fsr1h 000FE2  
                              fsr2h 000FDA                                fsr0l 000FE9  
                              fsr1l 000FE1                                fsr2l 000FD9  
                              btemp 003E                                prodh 000FF4  
                              prodl 000FF3                                start 000E  
                     __CFG_IESO$OFF 000000                     __end_ofi2_putch 154C  
                     __CFG_MCLRE$ON 000000                        ___param_bank 000000  
                       i2_lcdNibble 1336                               ?_main 0001  
                             _ACKEN 007E2C                               _ACKDT 007E2D  
                             STR_10 1054                               _PORTB 000F81  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                     __CFG_PWRT$OFF 000000                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                     __end_of_lcdInst 1540  
                    __CFG_EBTR0$OFF 000000                      __CFG_EBTR1$OFF 000000  
                    __CFG_EBTR2$OFF 000000                      __CFG_EBTR3$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                     __end_of_initLCD 13D2  
                    __CFG_EBTRB$OFF 000000     __size_of_dispDownloadToPCScreen 001A  
                             _putch 1528                               pclath 000FFA  
                             tablat 000FF5                               status 000FD8  
                    __CFG_PBADEN$ON 000000                    __end_ofi2_printf 12E0  
                   __initialization 1456                  __size_ofi2_lcdInst 000C  
                      __end_of_main 1224                          i2printf@ap 0006  
                            ??_main 002E                       __activetblptr 000002  
                       ?i2_clearLCD 0001                     lcdWrite@string1 002A  
                   lcdWrite@string2 002C                              _ADCON1 000FC1  
                       ?i2_lcdWrite 000A                     i2lcdNibble@data 0002  
                            ?_putch 0001                     i2lcdNibble@temp 0001  
                            _INT1IE 007F83                              _INT1IF 007F80  
                            i2l1361 113C                              i2l1283 128C  
                            i2l1371 1164                              i2l1293 12AA  
                            i2l1287 129C                              i2l1295 12C6  
                            i2l1289 12A2                              i2l1385 119A  
                            i2l1377 117A                __end_of_dispMainMenu 148A  
                         ??i2_putch 0003                              _SSPADD 000FC8  
                            _TRISC3 007CA3                              _TRISC4 007CA4  
                            _SSPBUF 000FC9                dispCorrectScreen@key 000E  
                  __end_of_clearLCD 151A                __end_of_dispLogsMenu 14D8  
                    __CFG_XINST$OFF 000000                    __end_of_lcdWrite 142C  
            _dispDownloadToPCScreen 14F2                      __CFG_STVREN$ON 000000  
                            clear_0 145C                           ??_lcdInst 0023  
                            _printf 1224                           ??_initLCD 0024  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                 __end_ofi2_lcdInst 1558         ??_dispLogsDisplayMenuScreen 000E  
                        __accesstop 0080             __end_of__initialization 1462  
      __size_of_transferToContainer 0030                       ___rparam_used 000001  
               __size_ofi2_clearLCD 000E                      __pcstackCOMRAM 0001  
               __size_ofi2_lcdWrite 002A                       __end_of_putch 1534  
                __size_of_lcdNibble 0056                         i2putch@data 0003  
                   __CFG_OSC$INTIO7 000000                           ?i2_printf 0004  
                     _currentScreen 002E                             ??_putch 0023  
                      ?i2_lcdNibble 0001           _dispLogsDisplayMenuScreen 14D8  
                           ?_printf 0024                           ?_clearLCD 0001  
             __size_of_dispMainMenu 001A                          ??i2_printf 0006  
                           i2u60_47 1384                             i2u57_47 134E  
                           i2u58_47 1358                             i2u59_47 137A  
                           _SSPCON1 000FC6                             _SSPCON2 000FC5  
                         ?_lcdWrite 002A                             _SSPSTAT 000FC7  
             __size_of_dispLogsMenu 001A                             i2_putch 1540  
                 __end_of_lcdNibble 1336                             __Hparam 0000  
                           __Lparam 0000                        __psmallconst 1000  
                 _dispCorrectScreen 111A                             __pcinit 1456  
                           __ramtop 1000                        _dispMainMenu 1470  
                           _lcdInst 1534                             __ptext0 11B0  
                           __ptext1 13D2                             __ptext2 138C  
                           __ptext3 1470                             __ptext4 1402  
                           __ptext5 1224                             __ptext6 1528  
                           __ptext7 150C                             __ptext8 1534  
                           __ptext9 12E0                     __size_of_printf 005E  
                ?_dispCorrectScreen 000E                             _initLCD 138C  
           __size_ofi2_dispMainMenu 001A                        ??i2_clearLCD 0004  
                        ??_clearLCD 0024                        _dispLogsMenu 14BE  
                        _keypressed 0008                 ??_dispCorrectScreen 0010  
                      ??i2_lcdWrite 000E                          ??_lcdWrite 002E  
                    __pintcode_body 107E                end_of_initialization 1462  
                        _numEskaCap 0034                       __Lmediumconst 0000  
                           int_func 107E                          _numBottles 0032  
           ?_dispDownloadToPCScreen 0001                          _numSeconds 0038  
                           printf@c 0029                             printf@f 0024  
                __end_ofi2_clearLCD 1528           __end_of_dispCorrectScreen 11B0  
                           postinc0 000FEE                  __end_ofi2_lcdWrite 1456  
                      _machineState 0030                 _transferToContainer 13D2  
              transferToContainer@i 0021                ?_transferToContainer 0001  
                         i2_lcdInst 154C      __end_of_dispDownloadToPCScreen 150C  
                 _dispSortingScreen 14A4                __size_ofi2_lcdNibble 0056  
                ?_dispSortingScreen 0001                       i2lcdInst@data 0003  
                    __end_of_printf 1282                        i2printf@flag 0008  
__size_of_dispLogsDisplayMenuScreen 001A                 start_initialization 1456  
               ??_dispSortingScreen 000E                         ?_keypressed 0001  
                         i2printf@c 0009                           i2printf@f 0004  
                 __size_ofi2_printf 005E               ??_transferToContainer 0021  
                        ?i2_lcdInst 0001           __end_of_dispSortingScreen 14BE  
        __size_of_dispCorrectScreen 0096                    __CFG_LPT1OSC$OFF 000000  
                          ??_printf 0026                      i2_dispMainMenu 148A  
                       __pbssCOMRAM 002E   __end_of_dispLogsDisplayMenuScreen 14F2  
                 __size_of_clearLCD 000E                   __size_of_lcdWrite 002A  
                          ?i2_putch 0001                   __CFG_CCP2MX$PORTC 000000  
               __size_of_keypressed 1112                           __pintcode 0008  
                         _lcdNibble 12E0              __end_ofi2_dispMainMenu 14A4  
                          ?_lcdInst 0001                            ?_initLCD 0001  
                       __smallconst 1000                      __size_of_putch 000C  
                       ??i2_lcdInst 0003                            _LATAbits 000F89  
                          _LATCbits 000F8B                            _LATDbits 000F8C  
        __size_of_dispSortingScreen 001A                           _numYopCap 003A  
                  __CFG_WDTPS$32768 000000                          ?_lcdNibble 0001  
                   ?i2_dispMainMenu 0001                       lcdNibble@data 0022  
                        printf@flag 0028                       lcdNibble@temp 0021  
                          i2_printf 1282                    __size_ofi2_putch 000C  
                keypressed@keypress 001F                            __Hrparam 0000  
                          __Lrparam 0000                  __CFG_BOREN$SBORDIS 000000  
                      _numEskaNoCap 0036                    __size_of_lcdInst 000C  
                  __size_of_initLCD 0046                            _clearLCD 150C  
                      ??_keypressed 0010                            __ptext11 111A  
                          __ptext20 151A                            __ptext12 148A  
                          __ptext21 154C                            __ptext13 14A4  
                          __ptext22 1336                            __ptext14 14BE  
                          __ptext15 14D8                            __ptext16 14F2  
                          __ptext17 142C                            __ptext18 1282  
                          __ptext19 1540                            _lcdWrite 1402  
                 i2lcdWrite@string1 000A                   i2lcdWrite@string2 000C  
                     __size_of_main 0074                       ??i2_lcdNibble 0001  
                       ??_lcdNibble 0021                  __end_of_keypressed 111A  
                          int$flags 003E                           putch@data 0023  
                        _INTCONbits 000FF2         __end_of_transferToContainer 1402  
                          intlevel2 0000                            printf@ap 0026  
                       _numYopNoCap 003C                         lcdInst@data 0023  
                     ?_dispMainMenu 0001                 __end_ofi2_lcdNibble 138C  
                     ?_dispLogsMenu 0001            ??_dispDownloadToPCScreen 000E  
        ?_dispLogsDisplayMenuScreen 0001  
